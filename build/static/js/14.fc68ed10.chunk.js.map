{"version":3,"sources":["../../src/components/DetailsList/DetailsList.types.ts","../../src/selection/Selection.types.ts","../../src/dom/getRect.ts","../../src/components/ChoiceGroup/ChoiceGroupOption/ChoiceGroupOption.base.tsx","../../src/components/ChoiceGroup/ChoiceGroupOption/ChoiceGroupOption.styles.ts","../../src/components/ChoiceGroup/ChoiceGroupOption/ChoiceGroupOption.tsx","../../src/components/ChoiceGroup/ChoiceGroup.base.tsx","../../src/components/ChoiceGroup/ChoiceGroup.styles.ts","../../src/components/ChoiceGroup/ChoiceGroup.tsx","../../src/components/Toggle/Toggle.base.tsx","../../src/components/Toggle/Toggle.tsx","../../src/components/Toggle/Toggle.styles.ts","../../src/selection/Selection.ts","../../src/components/GroupedList/GroupedList.types.ts","../../src/components/GroupedList/GroupSpacer.tsx","../../src/getNativeElementProps.ts","../../src/components/Check/Check.base.tsx","../../src/components/Check/Check.styles.ts","../../src/components/Check/Check.tsx","../../src/components/DetailsList/DetailsRow.styles.ts","../../src/components/DetailsList/DetailsHeader.styles.ts","../../src/components/DetailsList/DetailsRowCheck.styles.ts","../../src/components/DetailsList/DetailsRowCheck.tsx","../../src/components/DetailsList/DetailsHeader.types.ts","../../src/utilities/dragdrop/DragDropHelper.tsx","../../src/components/DetailsList/DetailsColumn.base.tsx","../../src/components/DetailsList/DetailsColumn.styles.ts","../../src/components/DetailsList/DetailsColumn.ts","../../src/components/DetailsList/DetailsHeader.base.tsx","../../src/components/DetailsList/DetailsHeader.ts","../../src/components/DetailsList/DetailsRowFields.tsx","../../src/components/DetailsList/DetailsRow.base.tsx","../../src/components/DetailsList/DetailsRow.ts","../../src/components/Spinner/Spinner.types.ts","../../src/utilities/selection/SelectionZone.tsx","../../src/components/GroupedList/GroupedList.styles.ts","../../src/components/GroupedList/GroupHeader.styles.ts","../../src/components/Spinner/Spinner.base.tsx","../../src/components/Spinner/Spinner.styles.tsx","../../src/components/Spinner/Spinner.tsx","../../src/components/GroupedList/GroupHeader.base.tsx","../../src/components/GroupedList/GroupHeader.ts","../../src/components/GroupedList/GroupShowAll.styles.ts","../../src/components/GroupedList/GroupShowAll.base.tsx","../../src/components/GroupedList/GroupShowAll.ts","../../src/components/GroupedList/GroupFooter.styles.ts","../../src/components/GroupedList/GroupFooter.base.tsx","../../src/components/GroupedList/GroupFooter.ts","../../src/components/List/List.types.ts","../../src/components/List/List.tsx","../../src/components/GroupedList/GroupedListSection.tsx","../../src/components/GroupedList/GroupedList.base.tsx","../../src/components/GroupedList/GroupedList.ts","../../src/utilities/decorators/withViewport.tsx","../../src/utilities/groupedList/GroupedListUtility.tsx","../../src/components/DetailsList/DetailsList.base.tsx","../../src/components/DetailsList/DetailsList.styles.ts","../../src/components/DetailsList/DetailsList.ts","../../src/AutoScroll.ts","../../src/components/MarqueeSelection/MarqueeSelection.base.tsx","../../src/math.ts","../../src/components/MarqueeSelection/MarqueeSelection.tsx","../../src/components/MarqueeSelection/MarqueeSelection.styles.tsx","../../src/components/Announced/Announced.base.tsx","../../src/components/Announced/Announced.ts","../../src/components/Announced/Announced.styles.ts"],"names":["ColumnActionsMode","ConstrainMode","ColumnDragEndLocation","DetailsListLayoutMode","CheckboxVisibility","SelectionMode","SelectionDirection","SELECTION_CHANGE","SELECTION_ITEMS_CHANGE","getRect","element","rect","window","left","top","width","innerWidth","height","innerHeight","right","bottom","getBoundingClientRect","getClassNames","classNamesFunction","props","_onChange","evt","onChange","_onBlur","onBlur","_onFocus","onFocus","_onRenderField","id","imageSrc","imageAlt","selectedImageSrc","iconProps","imageSize","label","onRenderLabel","composeRenderFunction","_onRenderLabel","htmlFor","className","_classNames","field","innerField","imageWrapper","Image","src","alt","selectedImageWrapper","iconWrapper","Icon","labelWrapper","labelId","text","initializeComponentRef","render","ariaLabel","focused","required","theme","disabled","checked","styles","name","onRenderField","this","hasIcon","hasImage","imageIsLarge","root","choiceFieldWrapper","css","input","type","nativeProps","defaultProps","GlobalClassNames","getChoiceGroupFocusStyle","focusBorderColor","hasIconOrImage","selectors","position","outline","border","content","pointerEvents","borderColor","borderWidth","getImageWrapperStyle","isSelectedImageWrapper","paddingBottom","transitionProperty","transitionDuration","transitionTimingFunction","display","borderStyle","overflow","opacity","ChoiceGroupOption","styled","palette","semanticColors","fonts","classNames","circleBorderColor","neutralPrimary","circleHoveredBorderColor","inputBorderHovered","circleCheckedBorderColor","inputBackgroundChecked","circleCheckedHoveredBorderColor","themeDark","circleDisabledBorderColor","disabledBodySubtext","circleBackgroundColor","bodyBackground","dotUncheckedHoveredColor","neutralSecondary","dotCheckedColor","dotCheckedHoveredColor","dotDisabledColor","labelHoverFocusColor","neutralDark","focusBorder","iconOrImageChoiceBorderUncheckedHoveredColor","iconOrImageChoiceBorderCheckedColor","iconOrImageChoiceBorderCheckedHoveredColor","iconOrImageChoiceBackgroundColor","neutralLighter","fieldHoverOrFocusProperties","color","backgroundColor","enabledFieldWithImageHoverOrFocusProperties","circleAreaProperties","fontWeight","boxSizing","borderRadius","background","forcedColorAdjust","dotAreaProperties","choiceFieldSize","radioButtonSpacing","medium","alignItems","bodyText","minHeight","marginTop","paddingLeft","fontSize","margin","cursor","verticalAlign","userSelect","paddingTop","textAlign","justifyContent","flexDirection","disabledBodyText","paddingRight","lineHeight","labelWrapperLineHeight","maxWidth","whiteSpace","undefined","scope","_focusCallbacks","_changeCallbacks","ev","option","setState","keyFocused","defaultSelectedKey","options","validDefaultSelectedKey","_isControlled","some","key","state","keyChecked","_getKeyChecked","_id","getId","_labelId","value","componentDidUpdate","prevProps","prevState","newKeyChecked","divProps","optionsContainIconOrImage","ariaLabelledBy","applicationRole","role","Label","flexContainer","map","innerOptionProps","_getOptionId","_getOptionLabelId","focus","optionToFocus","checkedOption","filter","elementToFocus","document","getElementById","setFocusVisibility","onChanged","originalOption","selectedKey","optionsChecked","ChoiceGroup","flexWrap","_toggleButton","_onClick","onClick","checkedProp","warnMutuallyExclusive","warnDeprecations","onAriaLabel","offAriaLabel","defaultChecked","getDerivedStateFromProps","nextProps","as","keytipProps","offText","onText","inlineLabel","stateText","badAriaLabel","toggleNativeProps","onOffMissing","toggleId","stateTextId","labelledById","ariaRole","renderPill","keytipAttributes","pill","ref","_noop","thumb","pillContent","KeytipData","ariaDescribedBy","RootType","hidden","container","current","Toggle","pillUncheckedBackground","pillCheckedBackground","pillCheckedHoveredBackground","inputBackgroundCheckedHovered","thumbUncheckedHoveredBackground","pillCheckedDisabledBackground","thumbBackground","smallInputBorder","thumbCheckedBackground","inputForegroundChecked","thumbDisabledBackground","thumbCheckedDisabledBackground","disabledBackground","pillBorderColor","pillBorderHoveredColor","pillBorderDisabledColor","textDisabledColor","disabledText","marginBottom","marginRight","order","marginLeft","wordBreak","inset","DEFAULT_PILL_HEIGHT","transition","padding","DEFAULT_THUMB_SIZE","regular","onSelectionChanged","onItemsChanged","getKey","canSelectItem","items","selectionMode","mode","_getKey","defaultGetKey","_changeEventSuppressionCount","_exemptedCount","_anchoredIndex","_unselectableCount","_onSelectionChanged","_onItemsChanged","_canSelectItem","_keyToIndexMap","_isModal","setItems","count","getSelectedCount","item","index","setChangeEvents","isEnabled","suppressChange","_hasChanged","_change","isModal","setModal","setAllSelected","shouldClear","newKeyToIndexMap","newUnselectableIndices","hasSelectionChanged","haveItemsChanged","i","length","_setAllSelected","newExemptedIndicies","newExemptedCount","indexProperty","_exemptedIndices","hasOwnProperty","Number","exemptKey","_items","newIndex","_isAllSelected","Object","keys","_unselectableIndices","_selectedItems","_updateCount","raise","getItems","getSelection","isIndexSelected","push","getSelectedIndices","_selectedIndices","getItemIndex","isRangeSelected","fromIndex","endIndex","isAllSelected","selectableCount","single","Math","min","isKeySelected","multiple","setKeySelected","isSelected","shouldAnchor","setIndexSelected","none","max","isExempt","selectToKey","clearSelection","selectToIndex","anchorIndex","startIndex","toggleAllSelected","toggleKeySelected","toggleIndexSelected","toggleRangeSelected","preserveModalState","CollapseAllVisibility","indentWidth","style","nativeElementMap","audio","video","ol","li","a","button","textarea","select","table","tr","th","td","colGroup","col","form","iframe","img","useFastIcons","IconComponent","FontIcon","iconName","circle","check","displayName","CheckGlobalClassNames","checkHost","Check","isRTL","sharedCircleCheck","themePrimary","white","DetailsRowGlobalClassNames","compact","cell","cellAnimation","cellCheck","cellMeasurer","listCellFirstChild","isContentUnselectable","isCheckVisible","isRowHeader","fields","DEFAULT_CELL_STYLE_PROPS","cellLeftPadding","cellRightPadding","cellExtraRightPadding","DEFAULT_ROW_HEIGHTS","rowHeight","compactRowHeight","values","rowVerticalPadding","compactRowVerticalPadding","tooltipHost","cellIsCheck","collapseButton","isCollapsed","isSelectAllHidden","isResizingColumn","cellSizer","isResizing","dropHintCircleStyle","dropHintCaretStyle","dropHintLineStyle","cellTitle","cellName","filterChevron","gripperBarVertical","checkTooltip","cellStyleProps","textOverflow","isDisabled","isHeader","FastCheck","_defaultCheckboxRender","checkboxProps","_fastDefaultCheckboxRender","SelectAllVisibility","DetailsRowCheck","isVisible","canSelect","anySelected","selected","checkClassName","onRenderDetailsCheckbox","defaultCheckboxRender","onRenderCheckbox","detailsCheckboxProps","tagName","excludedPropNames","allowedPropNames","getNativeElementProps","buttonProps","tabIndex","small","params","_selection","selection","_dragEnterCounts","_activeTargets","_lastId","_initialized","dispose","_events","subscribe","events","dragDropOptions","EventGroup","doc","getDocument","on","body","_onMouseUp","bind","_onDocumentMouseUp","onDragStart","onDragLeave","onDragEnter","onDragEnd","onDrop","onDragOver","onMouseDown","isDraggable","isDroppable","activeTarget","handlers","eventMap","context","updateDropState","dragDropTarget","_isDraggable","_isDroppable","handler","callback","eventName","event","isHandled","preventDefault","data","_onMouseDown","_onDragEnd","_isDragging","dataTransfer","setData","target","off","unsubscribe","_dragData","dropTarget","documentElement","_onMouseMove","buttons","_isChild","_onMouseLeave","clientX","clientY","eventTarget","dragTarget","parentElement","childElement","canDrag","dragContext","canDrop","column","isIconOnly","accessibleLabel","_root","_onRenderFilterIcon","columnProps","_onRenderColumnHeaderTooltip","tooltipHostProps","hostClassName","children","_onColumnClick","onColumnClick","columnActionsMode","_onDragStart","itemIndex","selectedItems","_updateHeaderDragInfo","classList","add","borderWhileDragging","_async","setTimeout","noBorderWhileDragging","remove","setDraggedItemIndex","updateDragInfo","_onColumnContextMenu","onColumnContextMenu","_onRootMouseDown","stopPropagation","Async","columnIndex","parentId","onRenderColumnHeaderTooltip","headerClassName","iconClassName","isActionable","isEmpty","isIconVisible","isSorted","isGrouped","isFiltered","isPadded","transitionDurationDrag","transitionDurationDrop","onRenderFilterIcon","onRenderHeader","isSortedDescending","draggable","calculatedWidth","gripperBarVerticalStyle","cellTooltip","setAriaDescribedBy","_hasAccessibleLabel","onContextMenu","hasDropdown","isMenuOpen","nearIcon","sortIcon","_renderAccessibleLabel","componentDidMount","dragDropHelper","_addDragDropHandling","isDropped","borderAfterDropping","noBorderAfterDropping","TRANSITION_DURATION_DROP","componentWillUnmount","_dragDropSubscription","_getColumnDragDropOptions","selectionIndex","filterAriaLabel","sortAscendingAriaLabel","sortDescendingAriaLabel","groupAriaLabel","DetailsColumn","colors","iconForegroundColor","bodySubtext","headerForegroundColor","headerBackgroundColor","dropdownChevronForegroundColor","resizerColor","neutralTertiaryAlt","nearIconStyle","borderAfterDragOrDrop","outlineColor","listHeaderBackgroundHovered","listHeaderBackgroundPressed","neutralTertiary","alignContent","maxHeight","flex","semibold","NO_COLUMNS","_rootElement","_rootComponent","_draggedColumnIndex","_dropHintDetails","_updateDroppingState","newValue","_resetDropHints","_onDragOver","_computeDropHintToBeShown","_onDrop","columnReorderProps","_getColumnReorderProps","targetIndex","_currentDropHintIndex","isValidDrop","_isValidCurrentDropHintIndex","_onDropIndexInfo","sourceIndex","onColumnDrop","dragDropDetails","draggedIndex","handleColumnReorder","_updateDragInfo","_isCheckboxColumnHidden","_getDropHintPositions","onColumnDragStart","onColumnDragEnd","columnDragEndLocation","_isEventOnHeader","dropLocation","prevRef","columns","prevX","prevMid","frozenColumnCountFromStart","frozenColumnCountFromEnd","dropHintElement","querySelectorAll","offsetLeft","newMid","originX","startX","endX","dropHintElementRef","isRtl","eventXRelativePosition","currentDropHintIndex","_liesBetween","currentIndex","lastValidColumn","indexToUpdate","_isBefore","_isAfter","middleIndex","ceil","_updateDropHintElement","_renderColumnSizer","columnResizeDetails","isResizable","_stopPropagation","_onSizerBlur","cellSizerStart","cellSizerEnd","cellIsResizing","onDoubleClick","_onSizerDoubleClick","_onSelectAllClicked","columnIndexAttr","getAttribute","columnMinWidth","_onRootMouseMove","isSizing","_onRootKeyDown","onColumnResized","increment","which","KeyCodes","enter","shiftKey","_onSizerMouseMove","onColumnIsSizingChanged","movement","_onSizerMouseUp","_onToggleCollapseAll","onToggleCollapseAll","newCollapsed","isAllCollapsed","_dragDropHelper","minimumPixelsForDrag","_subscriptionObject","_getHeaderDragDropOptions","previousColumns","ariaLabelForToggleAllGroupsButton","ariaLabelForSelectAllCheckbox","selectAllVisibility","ariaLabelForSelectionColumn","groupNestingDepth","checkboxVisibility","showCheckbox","isCheckboxHidden","isCheckboxAlwaysVisible","always","FocusZone","componentRef","elementRef","onMouseMove","direction","horizontal","collapseAllVisibility","visible","cellIsGroupExpander","_renderDropHint","_renderColumnDivider","Layer","sizingOverlay","onMouseUp","columnReorderOptions","displayProperty","childNodes","clientRect","header","onRenderDivider","dropHintIndex","dropHintStyle","onColumnAutoResized","rtl","b","DetailsHeader","cellSizerFadeInStyles","cellStyles","minWidth","borderBottom","bodyDivider","cellWrapperPadded","neutralLight","cellIsActionable","cellIsEmpty","zIndex","boxShadow","transformOrigin","transform","visibility","columnStartIndex","rowClassNames","onRenderItemColumn","getCellValueKey","cellsByColumn","enableUpdateAnimations","rowHeaderId","cellValueKeysRef","cellValueKeys","onRender","getValueKey","cellContentsRender","fieldName","toString","getCellText","previousValueKey","cellValueKey","showAnimation","isMultiline","cellPadded","cellUnpadded","_cellMeasurer","_focusZone","selectionState","getSelectionState","isDropping","dragDropEvents","_droppingClassNames","columnMeasureInfo","previousState","onDidMount","_getRowDragDropOptions","_onDidMountCalled","previousProps","newWidth","onMeasureDone","onWillUnmount","shouldComponentUpdate","nextState","useReducedRowRenderer","newSelectionState","flatIndexOffset","onRenderCheck","rowWidth","getRowAriaLabel","getRowAriaDescription","getRowAriaDescribedBy","checkButtonAriaLabel","checkboxCellClassName","rowFieldsAs","isSelectionModal","droppingClassName","ariaRowDescription","ariaSelected","_rowClassNames","rowFields","RowFields","_ariaRowDescriptionId","allowFocusRoot","checkCell","checkCover","measureCell","forceIntoFirstElement","_onRenderCheck","eventsToRegister","SpinnerSize","SpinnerType","DetailsRow","neutralQuaternaryAlt","defaultHeaderText","defaultMetaText","defaultBackground","defaultHoverHeaderText","defaultHoverMetaText","defaultHoverBackground","selectedHeaderText","selectedMetaText","selectedBackground","selectedHoverHeaderText","selectedHoverMetaText","selectedHoverBackground","focusHeaderText","focusMetaText","focusBackground","focusHoverBackground","selectedStyles","highContrastStyle","borderTop","cannotSelectStyles","rootCompactStyles","cellCompactStyles","defaultCellStyles","fadeIn400","slideLeftIn40","flexShrink","ignoreNextFocus","_handleNextFocus","_onSelectionChange","_onMouseDownCapture","activeElement","elementContains","_hasAttribute","getParent","isToggleModifierPressed","_isCtrlPressed","_isMetaPressed","_getSelectionMode","_shouldHandleFocus","isToggle","itemRoot","_findItemRoot","_getItemIndex","enterModalOnTouch","_isTouch","_setIsTouch","isSelectedOnFocus","_onItemSurfaceClick","_updateModifiers","_isSelectionDisabled","_shouldAutoSelect","_isShiftPressed","_onInvokeMouseDown","disableAutoSelectOnInputElements","_onTouchStartCapture","enableTouchInvocationTarget","isSelectionDisabled","_onToggleAllClick","_onToggleClick","_onInvokeClick","_onContextMenu","onItemContextMenu","nativeEvent","_onDoubleClick","onItemInvoked","_isInputElement","_onKeyDownCapture","_onKeyDown","isSelectAllKey","isClearSelectionKey","escape","space","win","getWindow","_findScrollParentAndTryClearOnEmptyClick","onKeyDown","onKeyDownCapture","onMouseDownCapture","onFocusCapture","_isTabPressed","_clearAndSelectIndex","scrollParent","_tryClearOnEmptyClick","Node","contains","selectionPreservedOnEmptyClick","_isNonHandledClick","selectionClearedOnSurfaceClick","ctrlKey","metaKey","keyCode","tab","indexValue","attributeName","handleFocus","_shouldHandleFocusTimeoutId","clearTimeout","isTouch","_isTouchTimeoutId","group","link","listCell","beziers","dropIcon","expand","title","iconTag","size","ariaLive","labelPosition","statusMessage","styleSize","large","DelayedRender","screenReaderText","spinAnimation","memoize","Spinner","themeLight","borderTopColor","animationName","animationDuration","animationIterationCount","animationTimingFunction","xSmall","_toggleCollapse","onToggleCollapse","isGroupLoading","newLoadingVisible","isLoadingVisible","_onKeyUp","onGroupHeaderKeyUp","defaultPrevented","shouldOpen","_onToggleSelectGroupClick","onToggleSelectGroup","_onHeaderClick","onGroupHeaderClick","_onRenderTitle","ariaColSpan","headerCount","hasMoreData","groupLevel","viewport","loadingText","onRenderTitle","onRenderGroupHeaderCheckbox","isCollapsedGroupSelectVisible","expandButtonProps","expandButtonIcon","selectAllButtonProps","ariaPosInSet","ariaSetSize","canSelectGroup","isSelectionCheckVisible","currentlySelected","onKeyUp","groupHeaderContainer","expandIsCollapsed","GroupHeader","finalRowHeight","checkExpandResetStyles","listBackground","listItemBackgroundHovered","actionLinkHovered","durationValue4","durationValue1","transitionDelay","durationValue3","listItemBackgroundChecked","listItemBackgroundCheckedHovered","neutralQuaternary","mediumPlus","durationValue2","GroupShowAll","showAllLinkText","onToggleSummarize","memoizedOnClick","Link","GroupFooter","footerText","ScrollToMode","EMPTY_RECT","_measurePageRect","_measureSurfaceRect","_measureScrollRect","_surface","_pageRefs","_getDerivedStateFromProps","renderCount","version","_resetRequiredWindows","_requiredRect","_measureVersion","_invalidatePageCache","_updatePages","_onRenderRoot","rootRef","surfaceElement","_onRenderSurface","surfaceRef","pageElements","_onRenderPage","pageProps","defaultRender","onRenderCell","page","cellRole","cells","itemKey","ignoreScrollingState","isScrolling","pages","_estimatedPageHeight","_totalEstimates","_requiredWindowsAhead","_requiredWindowsBehind","_onAsyncScroll","debounce","leading","maxWait","_onAsyncIdle","_onAsyncResize","_onScrollingDone","_cachedPageHeights","_focusedIndex","_pageCache","scrollToIndex","measureItem","scrollToMode","_getRenderCount","allowedRect","_allowedRect","scrollTop","itemsPerPage","pageSpecification","_getPageSpecification","pageHeight","itemCount","_scrollElement","scrollRect","scrollWindow","itemPositionWithinPage","itemIndexInPage","scrollBottom","getStartItemIndexInView","isSpacer","_scrollTop","floor","totalRowHeight","_onScroll","finalProps","finalState","pagesVersion","getPageHeight","_updatePageMeasurements","_materializedRect","_hasCompletedFirstRender","onPagesUpdated","newProps","newState","oldPages","newPages","oldPage","newPage","forceUpdate","_updateRenderRects","getTotalListHeight","_surfaceRect","onRenderSurface","onRenderRoot","_renderPage","finalOnRenderSurface","_shouldVirtualize","onShouldVirtualize","cachedPage","usePageCache","pageElement","pageStyle","_getPageStyle","onRenderPage","newRef","getPageStyle","indexString","innerRect","outerRect","renderedWindowsAhead","renderedWindowsBehind","windowsAhead","requiredWindowsAhead","windowsBehind","requiredWindowsBehind","newListState","_buildPages","oldListPages","_notifyPageChanges","onPageAdded","onPageRemoved","renderedIndexes","_onPageAdded","_onPageRemoved","heightChanged","_measurePage","hasChangedHeight","cachedHeight","measureVersion","newClientRect","clientWidth","clientHeight","round","materializedRect","pageTop","currentSpacer","focusedIndex","shouldVirtualize","isFirstRender","pageData","targetRect","newRect","pageBottom","isPageRendered","isPageInAllowedRange","isPageInRequiredRange","itemsInPage","_createPage","slice","_visibleRect","SPACER_KEY_PREFIX","visibleRect","getPageSpecification","_getItemCountForPage","_getPageHeight","visibileRect","getItemCountForPage","pageKey","surfaceRect","scrollHeight","_scrollHeight","abs","visibleTop","_expandRect","containsFocus","pagesBefore","pagesAfter","_list","_subGroupRefs","_droppingClassName","_onRenderGroupHeader","_onRenderGroupShowAll","_onRenderGroupFooter","_renderSubGroup","subGroup","subGroupIndex","getGroupItemLimit","groupProps","headerProps","showAllProps","footerProps","listProps","onRenderGroupHeader","onRenderGroupShowAll","onRenderGroupFooter","nestingDepth","level","showEmptyGroups","GroupedListSection","_getGroupKey","groupIndex","groups","_getGroupDragDropOptions","isGroup","newIsDropping","groupedListClassNames","Infinity","isShowAllVisible","isShowingAll","hasNestedGroups","dividerProps","ariaControlsProps","groupedListId","groupHeaderProps","groupShowAllProps","groupFooterProps","canDragGroups","_getDroppingClassName","_returnOne","_onRenderGroup","forceListUpdate","subGroupCount","pageRefs","String","_onRenderGroupCell","groupIsDropping","_renderGroup","_onToggleSelectGroup","_onToggleCollapse","_onToggleSummarize","_getGroupNestingDepth","finalListProps","onRenderShowAll","onRenderFooter","_getDefaultGroupItemLimit","_getGroupItemLimit","_getGroupHeight","COMPACT_ROW_HEIGHT","ROW_HEIGHT","getGroupHeight","pageGroup","_updateIsSomeGroupExpanded","_isInnerZoneKeystroke","_isSomeGroupExpanded","_computeIsSomeGroupExpanded","listVersion","shouldForceUpdates","isAllGroupsCollapsed","_setGroupsCollapsedState","focusZoneProps","rootListProps","shouldEnterInnerZone","vertical","_forceListUpdates","toggleCollapseAll","allCollapsed","groupsInLevel","onGroupExpandStateChanged","newIsSomeGroupExpanded","isHeaderVisible","GroupedList","withViewport","ComposedComponent","_registerResizeObserver","_viewportResizeObserver","ResizeObserver","observe","_unregisterResizeObserver","disconnect","_updateViewport","withForceUpdate","viewportElement","scrollElement","_resizeAttempts","_composedComponentInstance","delayFirstMeasure","disableResizeObserver","skipViewportMeasures","_isResizeObserverAvailable","previousSkipViewportMeasures","newViewport","_updateComposedComponentRef","BaseDecorator","ariaLabelForListHeader","constrainMode","isPlaceholderData","layoutMode","onColumnHeaderClick","onColumnHeaderContextMenu","selectionZoneProps","ariaLabelForGrid","rowElementEventMap","shouldApplyApplicationRole","adjustedColumns","isSomeGroupExpanded","listRef","focusZoneRef","groupedListRef","headerRef","onRowDidMount","onRowWillUnmount","disableSelectionZone","onActiveRowChanged","onRenderMissingItem","checkButtonGroupAriaLabel","enterModalSelectionOnTouch","onRenderDefaultRow","selectionZoneRef","rowId","getGroupNestingDepth","additionalListProps","defaultOnRenderDetailsHeader","detailsHeaderProps","defaultOnRenderDetailsFooter","propsOnRenderDetailsHeader","onRenderDetailsHeader","propsOnRenderDetailsFooter","onRenderDetailsFooter","detailsFooterProps","columnReorderOnDragEnd","finalDropLocation","outside","surface","rowCount","total","remainingGroups","currentGroup","pop","colCount","isFixed","fixedColumns","isHorizontalConstrained","horizontalConstrained","onRenderDetailsGroupFooter","finalOnRenderDetailsGroupFooter","onRenderDetailsGroupHeader","finalOnRenderDetailsGroupHeader","ariaRowCount","ariaRowIndex","finalGroupProps","sumColumnWidths","useConst","totalWidth","forEach","finalOnRenderRow","onRenderRow","rowProps","onRenderListCell","isRightArrow","focusZone","onActiveElementChanged","shouldRaiseClicks","list","onHeaderKeyDown","down","onContentKeyDown","up","altKey","headerWrapper","contentWrapper","_header","_groupedList","_selectionZone","_onRenderRow","setKey","newViewportWidth","oldViewportWidth","shouldResetSelection","_initialFocusedIndex","initialFocusedIndex","focusedItemIndex","_adjustColumns","_onGroupExpandStateChanged","_onColumnIsSizingChanged","_onRowDidMount","row","_getItemKey","_activeRows","_setFocusToRowIfPending","_onRowWillUnmount","collapsed","_onColumnResized","resizingColumn","resizingColumnIndex","newCalculatedWidth","onColumnResize","_rememberCalculatedWidth","_onColumnAutoResized","totalCount","_onActiveRowChanged","el","onActiveItemChanged","_columnOverrides","lastWidth","_getAdjustedColumns","Selection","focusIndex","_setFocusToRow","_notifyColumnsResized","onDidUpdate","currentWidth","viewportWidth","lastSelectionMode","newColumns","canResizeColumns","sortedColumnKey","groupedColumnKey","firstItem","propName","isCollapsable","isCollapsible","clickable","buildColumns","newItems","_getFixedColumns","_getJustifiedColumns","_getColumnOverride","flexMargin","remainingWidth","sumProportionalWidth","flexGrow","getPaddedWidth","rowCheckWidth","groupExpandWidth","widthFraction","newColumn","fullWidth","shrinkWidth","MAX_VALUE","minimumWidth","availableWidth","baseColumn","lastIndex","overflowWidth","originalWidth","splice","isLast","overrides","spaceLeft","justified","onHover","DetailsListBase","paddingOnly","DetailsList","listText","overflowX","overflowY","WebkitOverflowScrolling","_scrollableParent","_incrementScroll","_scrollRect","_onTouchMove","_stopScroll","_computeScrollVelocity","touches","clientDirection","scrollClient","scrollRectTop","scrollRectLeft","scrollClientBottom","scrollClientRight","_isVerticalScroll","_scrollVelocity","_startScroll","_timeoutId","scrollLeft","onShouldStartSelection","_isMouseEventOnScrollbar","_isInSelectionToggle","_isDragStartInSelection","_scrollableSurface","_selectedIndicies","_preservedIndicies","_onAsyncMouseMove","_autoScroll","_scrollLeft","_rootRect","_onTouchStart","_onPointerDown","pointerType","dragRect","hitTarget","isDraggingConstrainedToRoot","rootProps","dragMask","box","boxFill","targetElement","targetScrollbarWidth","offsetWidth","targetScrollbarHeight","offsetHeight","_getRootRect","requestAnimationFrame","_lastMouseEvent","rootRect","currentPoint","_dragOrigin","point1","point2","left1","x","top1","y","left2","top2","sqrt","pow","getDistanceBetweenPoints","constrainedPoint","_evaluateSelection","_itemRectCache","_isPointInRectangle","rectangle","point","allElements","itemRect","previousSelectedIndices","_allSelectedIndices","needToUpdate","rootTagName","MarqueeSelection","message","Root","Announced"],"mappings":"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","file":"static/js/14.fc68ed10.chunk.js","sourcesContent":["import * as React from 'react';\nimport { DetailsListBase } from './DetailsList.base';\nimport { ISelection, SelectionMode, ISelectionZoneProps } from '../../utilities/selection/index';\nimport { IRefObject, IBaseProps, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport { IDragDropEvents, IDragDropContext, IDragDropHelper, IDragDropOptions } from './../../utilities/dragdrop/index';\nimport { IGroup, IGroupRenderProps, IGroupDividerProps, IGroupedListProps } from '../GroupedList/index';\nimport { IDetailsRowProps, IDetailsRowBaseProps } from '../DetailsList/DetailsRow';\nimport { IDetailsHeaderProps, IDetailsHeaderBaseProps } from './DetailsHeader';\nimport { IDetailsFooterProps, IDetailsFooterBaseProps } from './DetailsFooter.types';\nimport { IWithViewportProps, IViewport } from '../../utilities/decorators/withViewport';\nimport { IList, IListProps, ScrollToMode } from '../List/index';\nimport { ITheme, IStyle } from '../../Styling';\nimport { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\nimport { IDetailsCheckboxProps } from './DetailsRowCheck.types';\nimport {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnFilterIconProps,\n} from './DetailsColumn.types';\n\nexport {\n  IDetailsHeaderProps,\n  IDetailsRowBaseProps,\n  IDetailsHeaderBaseProps,\n  IDetailsFooterBaseProps,\n  IDragDropContext,\n  IDragDropEvents,\n  IDragDropHelper,\n  IDragDropOptions,\n  IViewport,\n  IWithViewportProps,\n};\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list prop updates don't change, but the list\n   * still needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change,\n   * you can call this to force a re-evaluation. Be aware that this can be an expensive operation and should be\n   * done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Scroll to and focus the item at the given index. focusIndex will call scrollToIndex on the specified index.\n   *\n   * @param index - Index of item to scroll to\n   * @param forceIntoFirstElement - If true, focus will be set to the first focusable child element of the item rather\n   *  than the item itself.\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional setting to determine where in the window the item should be scrolled to\n   * when focused.\n   */\n  focusIndex: (\n    index: number,\n    forceIntoFirstElement?: boolean,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListProps extends IBaseProps<IDetailsList>, IWithViewportProps {\n  /** Theme provided by a higher-order component. */\n  theme?: ITheme;\n\n  /** Custom overrides to the themed or default styles. */\n  styles?: IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>;\n\n  /**\n   * Callback to access the IDetailsList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IDetailsList>;\n\n  /** A key that uniquely identifies the given items. If provided, the selection will be reset when the key changes. */\n  setKey?: string;\n\n  /** The items to render. */\n  items: any[];\n\n  /** Set this to true to indicate that the items being displayed are placeholder data. */\n  isPlaceholderData?: boolean;\n\n  /** Properties to pass through to the List components being rendered. */\n  listProps?: IListProps;\n\n  /** Default index to set focus to once the items have rendered and the index exists. */\n  initialFocusedIndex?: number;\n\n  /** Class name to add to the root element. */\n  className?: string;\n\n  /** Grouping instructions. */\n  groups?: IGroup[];\n\n  /** Override properties to render groups. */\n  groupProps?: IDetailsGroupRenderProps;\n\n  /** Override for the indent width used for group nesting. */\n  indentWidth?: number;\n\n  /** Selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. Options include none, single, multiple */\n  selectionMode?: SelectionMode;\n\n  /**\n   * By default, selection is cleared when clicking on an empty (non-focusable) section of the screen.\n   * Setting this value to true overrides that behavior and maintains selection.\n   * @defaultvalue false\n   **/\n  selectionPreservedOnEmptyClick?: boolean;\n\n  /**\n   * Additional props to pass through to the SelectionZone created by default.\n   */\n  selectionZoneProps?: ISelectionZoneProps;\n\n  /** Controls how the columns are adjusted. */\n  layoutMode?: DetailsListLayoutMode;\n\n  /**\n   * Controls the visibility of selection check box.\n   * @defaultvalue CheckboxVisibility.onHover\n   */\n  checkboxVisibility?: CheckboxVisibility;\n\n  /**\n   * Controls the visibility of the header.\n   * @defaultvalue true\n   */\n  isHeaderVisible?: boolean;\n\n  /** column defitions. If none are provided, default columns will be created based on the items' properties. */\n  columns?: IColumn[];\n\n  /** Controls how the list contrains overflow. */\n  constrainMode?: ConstrainMode;\n\n  /** Event names and corresponding callbacks that will be registered to rendered row elements. */\n  rowElementEventMap?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Callback for when the list has been updated. Useful for telemetry tracking externally. */\n  onDidUpdate?: (detailsList?: DetailsListBase) => void;\n\n  /**\n   * Callback for when a given row has been mounted. Useful for identifying when a row has been rendered on the page.\n   */\n  onRowDidMount?: (item?: any, index?: number) => void;\n\n  /**\n   * Callback for when a given row has been unmounted.\n   * Useful for identifying when a row has been removed from the page.\n   */\n  onRowWillUnmount?: (item?: any, index?: number) => void;\n\n  /** Callback for when the user clicks on the column header. */\n  onColumnHeaderClick?: (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void;\n\n  /** Callback for when the user asks for a contextual menu (usually via right click) from a column header. */\n  onColumnHeaderContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /** Callback fired on column resize */\n  onColumnResize?: (column?: IColumn, newWidth?: number, columnIndex?: number) => void;\n\n  /** Callback for when a given row has been invoked (by pressing enter while it is selected.) */\n  onItemInvoked?: (item?: any, index?: number, ev?: Event) => void;\n\n  /**\n   * Callback for when the context menu of an item has been accessed.\n   * If undefined or false is returned, `ev.preventDefault()` will be called.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n\n  /**\n   * Callback to override the default row rendering.\n   */\n  onRenderRow?: IRenderFunction<IDetailsRowProps>;\n\n  /**\n   * If provided, will be the \"default\" item column renderer method.\n   * This affects cells within the rows, not the rows themselves.\n   * If a column definition provides its own `onRender` method, that will be used instead of this.\n   */\n  onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => React.ReactNode;\n\n  /**\n   * If provided, will be the \"default\" item column cell value return.\n   * A column's `getValueKey` can override `getCellValueKey`.\n   */\n  getCellValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  /** Map of callback functions related to row drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** Callback for what to render when the item is missing. */\n  onRenderMissingItem?: (index?: number, rowProps?: IDetailsRowProps) => React.ReactNode;\n\n  /** An override to render the details header. */\n  onRenderDetailsHeader?: IRenderFunction<IDetailsHeaderProps>;\n\n  /** An override to render the details footer. */\n  onRenderDetailsFooter?: IRenderFunction<IDetailsFooterProps>;\n\n  /**  If provided, can be used to render a custom checkbox. */\n  onRenderCheckbox?: IRenderFunction<IDetailsListCheckboxProps>;\n\n  /** Viewport info, provided by the `withViewport` decorator. */\n  viewport?: IViewport;\n\n  /**\n   * Callback for when an item in the list becomes active by clicking anywhere inside the row or navigating to it\n   * with the keyboard.\n   */\n  onActiveItemChanged?: (item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void;\n\n  /** Accessible label for the list header. */\n  ariaLabelForListHeader?: string;\n\n  /** Accessible label for the select all checkbox. */\n  ariaLabelForSelectAllCheckbox?: string;\n\n  /** Accessible label for the name of the selection column. */\n  ariaLabelForSelectionColumn?: string;\n\n  /** Callback to get the aria-label string for a given item. */\n  getRowAriaLabel?: (item: any) => string;\n\n  /** Callback to get the aria-describedby IDs (space-separated strings) of elements that describe the item. */\n  getRowAriaDescribedBy?: (item: any) => string;\n\n  /**\n   * Callback to get the item key, to be used in the selection and on render.\n   * Must be provided if sorting or filtering is enabled.\n   */\n  getKey?: (item: any, index?: number) => string;\n\n  /** Accessible label describing or summarizing the list. */\n  ariaLabel?: string;\n\n  /** Accessible label for the row check button, e.g. \"select row\" */\n  checkButtonAriaLabel?: string;\n\n  /** Accessible label for the group header check button, e.g. \"select section\". */\n  checkButtonGroupAriaLabel?: string;\n\n  /** Accessible label for the grid within the list. */\n  ariaLabelForGrid?: string;\n\n  /** An optional margin for proportional columns, to e.g. account for scrollbars when laying out width. */\n  flexMargin?: number;\n\n  /**\n   * Whether the role `application` should be applied to the list.\n   * @defaultvalue false\n   */\n  shouldApplyApplicationRole?: boolean;\n\n  /**\n   * The minimum mouse move distance to interpret the action as drag event.\n   * @defaultvalue 5\n   */\n  minimumPixelsForDrag?: number;\n\n  /**\n   * Whether to render in compact mode.\n   * @defaultvalue false\n   */\n  compact?: boolean;\n\n  /**\n   * Whether to enable render page caching. This is an experimental performance optimization that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Callback to determine whether the list should be rendered in full, or virtualized.\n   *\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance\n   * for smaller lists.\n   *\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Class name to add to the cell of a checkbox. */\n  checkboxCellClassName?: string;\n\n  /** Whether the selection zone should enter modal state on touch. */\n  enterModalSelectionOnTouch?: boolean;\n\n  /** Options for column reordering using drag and drop. */\n  columnReorderOptions?: IColumnReorderOptions;\n\n  /** Callback to override default group height calculation used by list virtualization. */\n  getGroupHeight?: IGroupedListProps['getGroupHeight'];\n\n  /**\n   * Whether to re-render a row only when props changed. Might cause regression when depending on external updates.\n   * @defaultvalue false\n   */\n  useReducedRowRenderer?: boolean;\n\n  /**\n   * Props impacting the render style of cells. Since these have an impact on calculated column widths, they are\n   * handled separately from normal theme styling, but they are passed to the styling system.\n   */\n  cellStyleProps?: ICellStyleProps;\n\n  /** Whether to disable the built-in SelectionZone, so the host component can provide its own. */\n  disableSelectionZone?: boolean;\n\n  /** Whether to animate updates */\n  enableUpdateAnimations?: boolean;\n\n  /**\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\n   * but are still customizable via class names.\n   * @defaultvalue true\n   */\n  useFastIcons?: boolean;\n\n  /** Role for the list. */\n  role?: string;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumn {\n  /** A unique key for identifying the column. */\n  key: string;\n\n  /** Name to render on the column header. */\n  name: string;\n\n  /**\n   * The field to pull the text value from for the column.\n   * Can be unset if a custom `onRender` method is provided.\n   */\n  fieldName?: string;\n\n  /**\n   * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\n   * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\n   * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (3/4) = 75% of the remaining space. Note that\n   * this relies on viewport measures and will not work well with skipViewportMeasures.\n   */\n  flexGrow?: number;\n\n  /** Class name to apply to the column cell within each row. */\n  className?: string;\n\n  /** Custom overrides to the themed or default styles. */\n  styles?: IStyleFunctionOrObject<IDetailsColumnStyleProps, IDetailsColumnStyles>;\n\n  /** Minimum width for the column. */\n  minWidth: number;\n\n  /**\n   * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\n   * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\n   * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (2/4) = 75% of the remaining space. Note that\n   * this relies on viewport measures and will not work well with skipViewportMeasures.\n   */\n  targetWidthProportion?: number;\n\n  /**\n   * Accessible label for the column. The column name will still be used as the primary label,\n   * but this text (if specified) will be read after the column name.\n   */\n  ariaLabel?: string;\n\n  /** Whether the column is a header for the given row. There should be only one column with this set to true. */\n  isRowHeader?: boolean;\n\n  /** Maximum width for the column, if stretching is allowed in justified scenarios. */\n  maxWidth?: number;\n\n  /**\n   * Defines how the column's header should render.\n   * @defaultvalue ColumnActionsMode.clickable\n   */\n  columnActionsMode?: ColumnActionsMode;\n\n  /** Custom icon to use in the column header. */\n  iconName?: string;\n\n  /**\n   * Whether only the icon should be displayed in the column header.\n   * If true, the column name and dropdown chevron will not be displayed.\n   */\n  isIconOnly?: boolean;\n\n  /** Class name for the icon within the header. */\n  iconClassName?: string;\n\n  /**\n   * If true, allow the column to be collapsed when rendered in justified layout.\n   * @deprecated Use `isCollapsible`\n   */\n  isCollapsable?: boolean;\n\n  /** If true, allow the column to be collapsed when rendered in justified layout. */\n  isCollapsible?: boolean;\n\n  /** Determines if the column is currently sorted. Renders a sort arrow in the column header. */\n  isSorted?: boolean;\n\n  /** Determines if the sort arrow is pointed down (descending) or up. */\n  isSortedDescending?: boolean;\n\n  /** Determines if the column can be resized. */\n  isResizable?: boolean;\n\n  /** Determines if the column can render multi-line text. */\n  isMultiline?: boolean;\n\n  /** Custom renderer for cell content, instead of the default text rendering. */\n  onRender?: (item?: any, index?: number, column?: IColumn) => any;\n\n  /** Custom override for the parent list's `getCellValueKey`. */\n  getValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  /** Custom renderer for column header divider. */\n  onRenderDivider?: IRenderFunction<IDetailsColumnProps>;\n\n  /** Custom renderer for filter icon. */\n  onRenderFilterIcon?: IRenderFunction<IDetailsColumnFilterIconProps>;\n\n  /** Custom renderer for column header content, instead of the default text rendering. */\n  onRenderHeader?: IRenderFunction<IDetailsColumnProps>;\n\n  /** Whether the list is filtered by this column. If true, shows a filter icon next to this column's name. */\n  isFiltered?: boolean;\n\n  /** Callback for when the user clicks on the column header. */\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\n\n  /** Callback for when the user opens the column header context menu. */\n  onColumnContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /**\n   * Callback for when the column is resized (`width` is the current width).\n   *\n   * Prefer this over `DetailsList`'s `onColumnResize` if you require the `IColumn` to report its width\n   * after every resize event. Consider debouncing the callback if resize events occur frequently.\n   */\n  onColumnResize?: (width?: number) => void;\n\n  /** Whether the list is grouped by this column. If true, shows a grouped icon next to this column's name. */\n  isGrouped?: boolean;\n\n  /** Arbitrary data passthrough which can be used by the caller. */\n  data?: any;\n\n  /** Internal only value. */\n  calculatedWidth?: number;\n\n  /**\n   * Internal only value.\n   * Remembers the actual width of the column in any case.\n   * `calculatedWidth` is only saved when it's defined by user, not for justified calculations.\n   */\n  currentWidth?: number;\n\n  /** Class name to apply to the column header cell. */\n  headerClassName?: string;\n\n  /** If true, add additional LTR padding-right to column and cells. */\n  isPadded?: boolean;\n\n  /**\n   * Accessible label for indicating that the list is sorted by this column in ascending order.\n   * This will be read after the main column header label.\n   */\n  sortAscendingAriaLabel?: string;\n\n  /**\n   * Accessible label for indicating that the list is sorted by this column in descending order.\n   * This will be read after the main column header label.\n   */\n  sortDescendingAriaLabel?: string;\n\n  /** Accessible label for the status of this column when grouped. */\n  groupAriaLabel?: string;\n\n  /** Accessible label for the status of this column when filtered. */\n  filterAriaLabel?: string;\n\n  /** Whether a dropdown menu is open so that the appropriate ARIA attributes are rendered. */\n  isMenuOpen?: boolean;\n}\n\n/**\n * Enum to describe how a particular column header behaves.\n * This is used to to specify the property `IColumn.columnActionsMode`.\n * If `IColumn.columnActionsMode` is undefined, it's equivalent to `ColumnActionsMode.clickable`.\n * {@docCategory DetailsList}\n */\nexport enum ColumnActionsMode {\n  /** Renders the column header as disabled. */\n  disabled = 0,\n\n  /** Renders the column header as clickable. Default value. */\n  clickable = 1,\n\n  /** Renders the column header as clickable and displays the dropdown chevron. */\n  hasDropdown = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum ConstrainMode {\n  /** Lets the content grow which allows the page to manage scrolling. */\n  unconstrained = 0,\n\n  /** Constrains the list to the given layout space. */\n  horizontalConstrained = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnReorderOptions {\n  /**\n   * Specifies the number fixed columns from left\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromStart?: number;\n\n  /**\n   * Specifies the number fixed columns from right\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromEnd?: number;\n\n  /**\n   * Callback to handle when dragging on this column's DetailsHeader has started.\n   */\n  onColumnDragStart?: (dragStarted: boolean) => void;\n\n  /**\n   * Callback to handle column reordering.\n   * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\n   * @deprecated Use `onColumnDrop` instead.\n   */\n  handleColumnReorder?: (draggedIndex: number, targetIndex: number) => void;\n\n  /**\n   * Callback to handle column reordering.\n   * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\n   */\n  onColumnDrop?: (dragDropDetails: IColumnDragDropDetails) => void;\n\n  /**\n   * Callback to handle when dragging on this column's DetailsHeader has finished.\n   */\n  onDragEnd?: (columnDropLocationDetails: ColumnDragEndLocation) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnDragDropDetails {\n  /**\n   * Specifies the source column index\n   * @defaultvalue -1\n   */\n  draggedIndex: number;\n\n  /**\n   * Specifies the target column index\n   * @defaultvalue -1\n   */\n  targetIndex: number;\n}\n\n/**\n * Enum to describe where the column has been dropped, after starting the drag\n * {@docCategory DetailsList}\n */\nexport enum ColumnDragEndLocation {\n  /** Drag ended outside of current list */\n  outside = 0,\n\n  /** Drag ended within current list */\n  surface = 1,\n\n  /** Drag ended on header */\n  header = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum DetailsListLayoutMode {\n  /**\n   * Lets the user resize columns and makes not attempt to fit them.\n   */\n  fixedColumns = 0,\n\n  /**\n   * Manages which columns are visible, tries to size them according to their min/max rules and drops\n   * off columns that can't fit and have isCollapsible set.\n   */\n  justified = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum CheckboxVisibility {\n  /** Visible on hover. */\n  onHover = 0,\n\n  /** Visible always. */\n  always = 1,\n\n  /** Hide checkboxes. */\n  hidden = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport type IDetailsListStyleProps = Required<Pick<IDetailsListProps, 'theme'>> &\n  Pick<IDetailsListProps, 'className'> & {\n    /** Whether the list is horizontally constrained */\n    isHorizontalConstrained?: boolean;\n\n    /** Whether the list is in compact mode */\n    compact?: boolean;\n\n    /** Whether the list is fixed in size */\n    isFixed?: boolean;\n  };\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListStyles {\n  root: IStyle;\n  focusZone: IStyle;\n  headerWrapper: IStyle;\n  contentWrapper: IStyle;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupRenderProps extends IGroupRenderProps {\n  onRenderFooter?: IRenderFunction<IDetailsGroupDividerProps>;\n  onRenderHeader?: IRenderFunction<IDetailsGroupDividerProps>;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupDividerProps extends IGroupDividerProps, IDetailsItemProps {}\n\nexport interface IDetailsListCheckboxProps extends IDetailsCheckboxProps {}\n","/**\n * {@docCategory Selection}\n */\nexport interface IObjectWithKey {\n  key?: string | number;\n}\n\nexport const SELECTION_CHANGE = 'change';\nexport const SELECTION_ITEMS_CHANGE = 'items-change';\n\n/**\n * {@docCategory Selection}\n */\nexport enum SelectionMode {\n  none = 0,\n  single = 1,\n  multiple = 2,\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelection<TItem = IObjectWithKey> {\n  count: number;\n  mode: SelectionMode;\n\n  canSelectItem: (item: TItem, index?: number) => boolean;\n\n  // Obesrvable methods.\n  setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void;\n\n  // Initialization methods.\n\n  setItems(items: TItem[], shouldClear: boolean): void;\n  getItems(): TItem[];\n\n  // Item utility methods.\n  getItemIndex?(key: string): number;\n\n  // Read selection methods.\n\n  getSelection(): TItem[];\n  getSelectedIndices(): number[];\n  getSelectedCount(): number;\n  isRangeSelected(fromIndex: number, count: number): boolean;\n\n  isAllSelected(): boolean;\n  isKeySelected(key: string): boolean;\n  isIndexSelected(index: number): boolean;\n\n  isModal?(): boolean;\n\n  // Write selection methods.\n\n  setAllSelected(isAllSelected: boolean): void;\n  setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void;\n  setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void;\n\n  setModal?(isModal: boolean): void; // TODO make non-optional on next breaking change\n\n  // Write range selection methods.\n\n  selectToKey(key: string, clearSelection?: boolean): void;\n  selectToIndex(index: number, clearSelection?: boolean): void;\n\n  // Toggle helpers.\n\n  toggleAllSelected(): void;\n  toggleKeySelected(key: string): void;\n  toggleIndexSelected(index: number): void;\n  toggleRangeSelected(fromIndex: number, count: number): void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport enum SelectionDirection {\n  horizontal = 0,\n  vertical = 1,\n}\n","import { IRectangle } from '../IRectangle';\n/**\n * Helper to get bounding client rect. Passing in window will get the window size.\n *\n * @public\n */\nexport function getRect(element: HTMLElement | Window | null): IRectangle | undefined {\n  let rect: IRectangle | undefined;\n  if (element) {\n    if (element === window) {\n      rect = {\n        left: 0,\n        top: 0,\n        width: window.innerWidth,\n        height: window.innerHeight,\n        right: window.innerWidth,\n        bottom: window.innerHeight,\n      };\n    } else if ((element as HTMLElement).getBoundingClientRect) {\n      rect = (element as HTMLElement).getBoundingClientRect();\n    }\n  }\n  return rect;\n}\n","import * as React from 'react';\nimport { Image } from '../../../Image';\nimport { Icon } from '../../../Icon';\nimport {\n  IChoiceGroupOptionProps,\n  IChoiceGroupOptionStyleProps,\n  IChoiceGroupOptionStyles,\n} from './ChoiceGroupOption.types';\nimport { classNamesFunction, getNativeProps, inputProperties, css, initializeComponentRef } from '../../../Utilities';\nimport { IProcessedStyleSet } from '../../../Styling';\nimport { composeRenderFunction } from '@uifabric/utilities';\n\nconst getClassNames = classNamesFunction<IChoiceGroupOptionStyleProps, IChoiceGroupOptionStyles>();\n\nconst LARGE_IMAGE_SIZE = 71;\n\n/**\n * {@docCategory ChoiceGroup}\n */\nexport class ChoiceGroupOptionBase extends React.Component<IChoiceGroupOptionProps, {}> {\n  public static defaultProps: Partial<IChoiceGroupOptionProps> = {\n    // This ensures default imageSize value doesn't mutate. Mutation can cause style re-calcuation.\n    imageSize: { width: 32, height: 32 },\n  };\n\n  private _classNames: IProcessedStyleSet<IChoiceGroupOptionStyles>;\n\n  constructor(props: IChoiceGroupOptionProps) {\n    super(props);\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      ariaLabel,\n      focused,\n      required,\n      theme,\n      iconProps,\n      imageSrc,\n      imageSize,\n      disabled,\n      // eslint-disable-next-line deprecation/deprecation\n      checked,\n      id,\n      styles,\n      name,\n      onRenderField = this._onRenderField,\n      ...rest\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      hasIcon: !!iconProps,\n      hasImage: !!imageSrc,\n      checked,\n      disabled,\n      imageIsLarge: !!imageSrc && (imageSize!.width > LARGE_IMAGE_SIZE || imageSize!.height > LARGE_IMAGE_SIZE),\n      imageSize,\n      focused,\n    });\n\n    const { className, ...nativeProps } = getNativeProps<{ className: string }>(rest, inputProperties);\n\n    return (\n      <div className={this._classNames.root}>\n        <div className={this._classNames.choiceFieldWrapper}>\n          <input\n            aria-label={ariaLabel}\n            id={id}\n            className={css(this._classNames.input, className)}\n            type=\"radio\"\n            name={name}\n            disabled={disabled}\n            checked={checked}\n            required={required}\n            {...nativeProps}\n            onChange={this._onChange}\n            onFocus={this._onFocus}\n            onBlur={this._onBlur}\n          />\n          {onRenderField(this.props, this._onRenderField)}\n        </div>\n      </div>\n    );\n  }\n\n  private _onChange = (evt: React.FormEvent<HTMLInputElement>): void => {\n    const { onChange } = this.props;\n    if (onChange) {\n      onChange(evt, this.props);\n    }\n  };\n\n  private _onBlur = (evt: React.FocusEvent<HTMLElement>) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(evt, this.props);\n    }\n  };\n\n  private _onFocus = (evt: React.FocusEvent<HTMLElement>) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(evt, this.props);\n    }\n  };\n\n  private _onRenderField = (props: IChoiceGroupOptionProps): JSX.Element => {\n    const { id, imageSrc, imageAlt = '', selectedImageSrc, iconProps } = props;\n\n    const imageSize = props.imageSize ? props.imageSize : { width: 32, height: 32 };\n\n    const onRenderLabel = props.onRenderLabel\n      ? composeRenderFunction(props.onRenderLabel, this._onRenderLabel)\n      : this._onRenderLabel;\n\n    const label = onRenderLabel(props);\n\n    return (\n      <label htmlFor={id} className={this._classNames.field}>\n        {imageSrc && (\n          <div className={this._classNames.innerField}>\n            <div className={this._classNames.imageWrapper}>\n              <Image src={imageSrc} alt={imageAlt} width={imageSize.width} height={imageSize.height} />\n            </div>\n            <div className={this._classNames.selectedImageWrapper}>\n              <Image src={selectedImageSrc} alt={imageAlt} width={imageSize.width} height={imageSize.height} />\n            </div>\n          </div>\n        )}\n        {iconProps && (\n          <div className={this._classNames.innerField}>\n            <div className={this._classNames.iconWrapper}>\n              <Icon {...iconProps} />\n            </div>\n          </div>\n        )}\n        {imageSrc || iconProps ? <div className={this._classNames.labelWrapper}>{label}</div> : label}\n      </label>\n    );\n  };\n\n  private _onRenderLabel = (props: IChoiceGroupOptionProps): JSX.Element => {\n    return (\n      <span id={props.labelId} className=\"ms-ChoiceFieldLabel\">\n        {props.text}\n      </span>\n    );\n  };\n}\n","import { HighContrastSelector, IStyle, getGlobalClassNames, getHighContrastNoAdjustStyle } from '../../../Styling';\nimport { IsFocusVisibleClassName } from '../../../Utilities';\nimport { IChoiceGroupOptionStyleProps, IChoiceGroupOptionStyles } from './ChoiceGroupOption.types';\n\nconst GlobalClassNames = {\n  root: 'ms-ChoiceField',\n  choiceFieldWrapper: 'ms-ChoiceField-wrapper',\n  input: 'ms-ChoiceField-input',\n  field: 'ms-ChoiceField-field',\n  innerField: 'ms-ChoiceField-innerField',\n  imageWrapper: 'ms-ChoiceField-imageWrapper',\n  iconWrapper: 'ms-ChoiceField-iconWrapper',\n  labelWrapper: 'ms-ChoiceField-labelWrapper',\n  checked: 'is-checked',\n};\n\nconst labelWrapperLineHeight = 15;\nconst labelWrapperHeight = labelWrapperLineHeight * 2 + 2; // adding 2px height to ensure text doesn't get cutoff\nconst iconSize = 32;\nconst choiceFieldSize = 20;\nconst choiceFieldTransitionDuration = '200ms';\nconst choiceFieldTransitionTiming = 'cubic-bezier(.4, 0, .23, 1)';\nconst radioButtonSpacing = 3;\nconst radioButtonInnerSize = 5;\n\nfunction getChoiceGroupFocusStyle(focusBorderColor: string, hasIconOrImage?: boolean): IStyle {\n  return [\n    'is-inFocus',\n    {\n      selectors: {\n        [`.${IsFocusVisibleClassName} &`]: {\n          position: 'relative',\n          outline: 'transparent',\n          selectors: {\n            '::-moz-focus-inner': {\n              border: 0,\n            },\n            ':after': {\n              content: '\"\"',\n              top: -2,\n              right: -2,\n              bottom: -2,\n              left: -2,\n              pointerEvents: 'none',\n              border: `1px solid ${focusBorderColor}`,\n              position: 'absolute',\n              selectors: {\n                [HighContrastSelector]: {\n                  borderColor: 'WindowText',\n                  borderWidth: hasIconOrImage ? 1 : 2,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  ];\n}\n\nfunction getImageWrapperStyle(isSelectedImageWrapper: boolean, className?: string, checked?: boolean): IStyle {\n  return [\n    className,\n    {\n      paddingBottom: 2,\n      transitionProperty: 'opacity',\n      transitionDuration: choiceFieldTransitionDuration,\n      transitionTimingFunction: 'ease',\n      selectors: {\n        '.ms-Image': {\n          display: 'inline-block',\n          borderStyle: 'none',\n        },\n      },\n    },\n    (checked ? !isSelectedImageWrapper : isSelectedImageWrapper) && [\n      'is-hidden',\n      {\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n        opacity: 0,\n      },\n    ],\n  ];\n}\n\nexport const getStyles = (props: IChoiceGroupOptionStyleProps): IChoiceGroupOptionStyles => {\n  const { theme, hasIcon, hasImage, checked, disabled, imageIsLarge, focused, imageSize } = props;\n  const { palette, semanticColors, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // Tokens\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder\n  const circleBorderColor = palette.neutralPrimary;\n  const circleHoveredBorderColor = semanticColors.inputBorderHovered;\n  const circleCheckedBorderColor = semanticColors.inputBackgroundChecked;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered\n  const circleCheckedHoveredBorderColor = palette.themeDark;\n  const circleDisabledBorderColor = semanticColors.disabledBodySubtext;\n  const circleBackgroundColor = semanticColors.bodyBackground;\n  const dotUncheckedHoveredColor = palette.neutralSecondary;\n  const dotCheckedColor = semanticColors.inputBackgroundChecked;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered\n  const dotCheckedHoveredColor = palette.themeDark;\n  const dotDisabledColor = semanticColors.disabledBodySubtext;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.bodyTextChecked\n  const labelHoverFocusColor = palette.neutralDark;\n  const focusBorderColor = semanticColors.focusBorder;\n  const iconOrImageChoiceBorderUncheckedHoveredColor = semanticColors.inputBorderHovered;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered\n  const iconOrImageChoiceBorderCheckedColor = semanticColors.inputBackgroundChecked;\n  const iconOrImageChoiceBorderCheckedHoveredColor = palette.themeDark;\n  const iconOrImageChoiceBackgroundColor = palette.neutralLighter;\n\n  const fieldHoverOrFocusProperties = {\n    selectors: {\n      '.ms-ChoiceFieldLabel': {\n        color: labelHoverFocusColor,\n      },\n      ':before': {\n        borderColor: checked ? circleCheckedHoveredBorderColor : circleHoveredBorderColor,\n      },\n      ':after': [\n        !hasIcon &&\n          !hasImage &&\n          !checked && {\n            content: '\"\"',\n            transitionProperty: 'background-color',\n            left: 5,\n            top: 5,\n            width: 10,\n            height: 10,\n            backgroundColor: dotUncheckedHoveredColor,\n          },\n        checked && {\n          borderColor: dotCheckedHoveredColor,\n        },\n      ],\n    },\n  };\n\n  const enabledFieldWithImageHoverOrFocusProperties = {\n    borderColor: checked ? iconOrImageChoiceBorderCheckedHoveredColor : iconOrImageChoiceBorderUncheckedHoveredColor,\n    selectors: {\n      ':before': {\n        opacity: 1,\n        borderColor: checked ? circleCheckedHoveredBorderColor : circleHoveredBorderColor,\n      },\n    },\n  };\n\n  const circleAreaProperties: IStyle = [\n    {\n      content: '\"\"',\n      display: 'inline-block',\n      backgroundColor: circleBackgroundColor,\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: circleBorderColor,\n      width: choiceFieldSize,\n      height: choiceFieldSize,\n      fontWeight: 'normal',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      boxSizing: 'border-box',\n      transitionProperty: 'border-color',\n      transitionDuration: choiceFieldTransitionDuration,\n      transitionTimingFunction: choiceFieldTransitionTiming,\n      borderRadius: '50%',\n    },\n    disabled && {\n      borderColor: circleDisabledBorderColor,\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'GrayText',\n          background: 'Window',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n    checked && {\n      borderColor: disabled ? circleDisabledBorderColor : circleCheckedBorderColor,\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'Highlight',\n          background: 'Window',\n          forcedColorAdjust: 'none',\n        },\n      },\n    },\n    (hasIcon || hasImage) && {\n      top: radioButtonSpacing,\n      right: radioButtonSpacing,\n      left: 'auto', // To reset the value of 'left' to its default value, so that 'right' works\n      opacity: checked ? 1 : 0,\n    },\n  ];\n\n  const dotAreaProperties: IStyle = [\n    {\n      content: '\"\"',\n      width: 0,\n      height: 0,\n      borderRadius: '50%',\n      position: 'absolute',\n      left: choiceFieldSize / 2,\n      right: 0,\n      transitionProperty: 'border-width',\n      transitionDuration: choiceFieldTransitionDuration,\n      transitionTimingFunction: choiceFieldTransitionTiming,\n      boxSizing: 'border-box',\n    },\n    checked && {\n      borderWidth: 5,\n      borderStyle: 'solid',\n      borderColor: disabled ? dotDisabledColor : dotCheckedColor,\n      left: 5,\n      top: 5,\n      width: 10,\n      height: 10,\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'Highlight',\n          forcedColorAdjust: 'none',\n        },\n      },\n    },\n    checked &&\n      (hasIcon || hasImage) && {\n        top: radioButtonSpacing + radioButtonInnerSize,\n        right: radioButtonSpacing + radioButtonInnerSize,\n        left: 'auto', // To reset the value of 'left' to its default value, so that 'right' works\n      },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        boxSizing: 'border-box',\n        color: semanticColors.bodyText,\n        minHeight: 26,\n        border: 'none',\n        position: 'relative',\n        marginTop: 8,\n        selectors: {\n          '.ms-ChoiceFieldLabel': {\n            display: 'inline-block',\n          },\n        },\n      },\n      !hasIcon &&\n        !hasImage && {\n          selectors: {\n            '.ms-ChoiceFieldLabel': {\n              paddingLeft: '26px',\n            },\n          },\n        },\n      hasImage && 'ms-ChoiceField--image',\n      hasIcon && 'ms-ChoiceField--icon',\n      (hasIcon || hasImage) && {\n        display: 'inline-flex',\n        fontSize: 0,\n        margin: '0 4px 4px 0',\n        paddingLeft: 0,\n        backgroundColor: iconOrImageChoiceBackgroundColor,\n        height: '100%',\n      },\n    ],\n    choiceFieldWrapper: [\n      classNames.choiceFieldWrapper,\n      focused && getChoiceGroupFocusStyle(focusBorderColor, hasIcon || hasImage),\n    ],\n    // The hidden input\n    input: [\n      classNames.input,\n      {\n        position: 'absolute',\n        opacity: 0,\n        top: 0,\n        right: 0,\n        width: '100%',\n        height: '100%',\n        margin: 0,\n      },\n      disabled && 'is-disabled',\n    ],\n    field: [\n      classNames.field,\n      checked && classNames.checked,\n      {\n        display: 'inline-block',\n        cursor: 'pointer',\n        marginTop: 0,\n        position: 'relative',\n        verticalAlign: 'top',\n        userSelect: 'none',\n        minHeight: 20,\n        selectors: {\n          ':hover': !disabled && fieldHoverOrFocusProperties,\n          ':focus': !disabled && fieldHoverOrFocusProperties,\n\n          // The circle\n          ':before': circleAreaProperties,\n\n          // The dot\n          ':after': dotAreaProperties,\n        },\n      },\n      hasIcon && 'ms-ChoiceField--icon',\n      hasImage && 'ms-ChoiceField-field--image',\n      (hasIcon || hasImage) && {\n        boxSizing: 'content-box',\n        cursor: 'pointer',\n        paddingTop: 22,\n        margin: 0,\n        textAlign: 'center',\n        transitionProperty: 'all',\n        transitionDuration: choiceFieldTransitionDuration,\n        transitionTimingFunction: 'ease',\n        border: '1px solid transparent',\n        justifyContent: 'center',\n        alignItems: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n      },\n      checked && {\n        borderColor: iconOrImageChoiceBorderCheckedColor,\n      },\n      (hasIcon || hasImage) &&\n        !disabled && {\n          selectors: {\n            ':hover': enabledFieldWithImageHoverOrFocusProperties,\n            ':focus': enabledFieldWithImageHoverOrFocusProperties,\n          },\n        },\n      disabled && {\n        cursor: 'default',\n        selectors: {\n          '.ms-ChoiceFieldLabel': {\n            color: semanticColors.disabledBodyText,\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'GrayText',\n                ...getHighContrastNoAdjustStyle(),\n              },\n            },\n          },\n        },\n      },\n      checked &&\n        disabled && {\n          borderColor: iconOrImageChoiceBackgroundColor,\n        },\n    ],\n    innerField: [\n      classNames.innerField,\n      hasImage && {\n        // using non-null assertion because we have a default in `ChoiceGroupOptionBase` class.\n        height: imageSize!.height,\n        width: imageSize!.width,\n      },\n      (hasIcon || hasImage) && {\n        position: 'relative',\n        display: 'inline-block',\n        paddingLeft: 30,\n        paddingRight: 30,\n      },\n      (hasIcon || hasImage) &&\n        imageIsLarge && {\n          paddingLeft: 24,\n          paddingRight: 24,\n        },\n      (hasIcon || hasImage) &&\n        disabled && {\n          opacity: 0.25,\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'GrayText',\n              opacity: 1,\n            },\n          },\n        },\n    ],\n    imageWrapper: getImageWrapperStyle(false, classNames.imageWrapper, checked),\n    selectedImageWrapper: getImageWrapperStyle(true, classNames.imageWrapper, checked),\n    iconWrapper: [\n      classNames.iconWrapper,\n      {\n        fontSize: iconSize,\n        lineHeight: iconSize,\n        height: iconSize,\n      },\n    ],\n    labelWrapper: [\n      classNames.labelWrapper,\n      fonts.medium,\n      (hasIcon || hasImage) && {\n        display: 'block',\n        position: 'relative',\n        margin: '4px 8px 2px 8px',\n        height: labelWrapperHeight,\n        lineHeight: labelWrapperLineHeight,\n        // using non-null assertion because we have a default in `ChoiceGroupOptionBase` class.\n        maxWidth: imageSize!.width * 2,\n        overflow: 'hidden',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../../Utilities';\nimport { ChoiceGroupOptionBase } from './ChoiceGroupOption.base';\nimport {\n  IChoiceGroupOptionProps,\n  IChoiceGroupOptionStyleProps,\n  IChoiceGroupOptionStyles,\n} from './ChoiceGroupOption.types';\nimport { getStyles } from './ChoiceGroupOption.styles';\n\nexport const ChoiceGroupOption: React.FunctionComponent<IChoiceGroupOptionProps> = styled<\n  IChoiceGroupOptionProps,\n  IChoiceGroupOptionStyleProps,\n  IChoiceGroupOptionStyles\n>(ChoiceGroupOptionBase, getStyles, undefined, { scope: 'ChoiceGroupOption' });\n","import * as React from 'react';\n\nimport { Label } from '../../Label';\nimport {\n  initializeComponentRef,\n  warnDeprecations,\n  warnMutuallyExclusive,\n  classNamesFunction,\n  find,\n  getId,\n  isControlled,\n  getNativeProps,\n  divProperties,\n  setFocusVisibility,\n} from '../../Utilities';\nimport {\n  IChoiceGroup,\n  IChoiceGroupOption,\n  IChoiceGroupProps,\n  IChoiceGroupStyleProps,\n  IChoiceGroupStyles,\n} from './ChoiceGroup.types';\nimport { ChoiceGroupOption, IChoiceGroupOptionProps } from './ChoiceGroupOption/index';\n\nconst getClassNames = classNamesFunction<IChoiceGroupStyleProps, IChoiceGroupStyles>();\n\nexport interface IChoiceGroupState {\n  /**\n   * Current selected option, for **internal use only**.\n   * External users should access `IChoiceGroup.checkedOption` instead.\n   */\n  // TODO (Fabric 8?) - once we removed the checked property from individual options,\n  // we can probably store only the uncontrolled value in the state (right now it tracks\n  // the value regardless of controlled/uncontrolled--though if controlled, it only updates\n  // the value in state when the selectedKey prop updates)\n  keyChecked?: string | number;\n\n  /** Is set when the control has focus. */\n  keyFocused?: string | number;\n}\n\n/**\n * {@docCategory ChoiceGroup}\n */\nexport class ChoiceGroupBase extends React.Component<IChoiceGroupProps, IChoiceGroupState> implements IChoiceGroup {\n  private _id: string;\n  private _labelId: string;\n  private _focusCallbacks: { [key: string]: IChoiceGroupOptionProps['onFocus'] } = {};\n  private _changeCallbacks: { [key: string]: IChoiceGroupOptionProps['onBlur'] } = {};\n\n  constructor(props: IChoiceGroupProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('ChoiceGroup', props, { onChanged: 'onChange' });\n      warnMutuallyExclusive('ChoiceGroup', props, {\n        selectedKey: 'defaultSelectedKey',\n      });\n    }\n\n    const { defaultSelectedKey, options = [] } = props;\n    const validDefaultSelectedKey =\n      !_isControlled(props) &&\n      defaultSelectedKey !== undefined &&\n      options.some(option => option.key === defaultSelectedKey);\n\n    this.state = {\n      keyChecked: validDefaultSelectedKey ? defaultSelectedKey : this._getKeyChecked(props),\n    };\n\n    this._id = getId('ChoiceGroup');\n    this._labelId = getId('ChoiceGroupLabel');\n  }\n\n  /**\n   * Gets the current checked option.\n   */\n  public get checkedOption(): IChoiceGroupOption | undefined {\n    const { options = [] } = this.props;\n    return find(options, (value: IChoiceGroupOption) => value.key === this.state.keyChecked);\n  }\n\n  public componentDidUpdate(prevProps: IChoiceGroupProps, prevState: IChoiceGroupState): void {\n    // Only update if a new props object has been passed in (don't care about state updates)\n    if (prevProps !== this.props) {\n      const newKeyChecked = this._getKeyChecked(this.props);\n      const oldKeyChecked = this._getKeyChecked(prevProps);\n\n      if (newKeyChecked !== oldKeyChecked) {\n        this.setState({\n          keyChecked: newKeyChecked,\n        });\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const { className, theme, styles, options = [], label, required, disabled, name } = this.props;\n    const { keyChecked, keyFocused } = this.state;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, [\n      'onChange',\n      'className',\n      'required',\n    ]);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      optionsContainIconOrImage: options.some(option => !!(option.iconProps || option.imageSrc)),\n    });\n\n    const labelId = this._id + '-label';\n    const ariaLabelledBy = this.props.ariaLabelledBy || (label ? labelId : this.props['aria-labelledby']);\n\n    // TODO (Fabric 8?) - if possible, move `root` class to the actual root and eliminate\n    // `applicationRole` class (but the div structure will stay the same by necessity)\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div className={classNames.applicationRole} {...divProps}>\n        <div\n          className={classNames.root}\n          role=\"radiogroup\"\n          {...(ariaLabelledBy && { 'aria-labelledby': ariaLabelledBy })}\n        >\n          {label && (\n            <Label className={classNames.label} required={required} id={labelId} disabled={disabled}>\n              {label}\n            </Label>\n          )}\n          <div className={classNames.flexContainer}>\n            {options.map((option: IChoiceGroupOption) => {\n              const innerOptionProps = {\n                ...option,\n                focused: option.key === keyFocused,\n                checked: option.key === keyChecked,\n                disabled: option.disabled || disabled,\n                id: this._getOptionId(option),\n                labelId: this._getOptionLabelId(option),\n                name: name || this._id,\n                required,\n              };\n\n              return (\n                <ChoiceGroupOption\n                  key={option.key}\n                  onBlur={this._onBlur}\n                  onFocus={this._onFocus(option.key)}\n                  onChange={this._onChange(option.key)}\n                  {...innerOptionProps}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  public focus() {\n    const { options = [] } = this.props;\n    const optionToFocus = this.checkedOption || options.filter(option => !option.disabled)[0];\n    const elementToFocus = optionToFocus && document.getElementById(this._getOptionId(optionToFocus));\n    if (elementToFocus) {\n      elementToFocus.focus();\n      setFocusVisibility(true, elementToFocus as Element);\n    }\n  }\n\n  private _onFocus(key: string) {\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._focusCallbacks[key]) {\n      this._focusCallbacks[key] = (\n        ev: React.FocusEvent<HTMLElement | HTMLInputElement>,\n        option: IChoiceGroupOption,\n      ) => {\n        this.setState({\n          keyFocused: key,\n        });\n      };\n    }\n    return this._focusCallbacks[key];\n  }\n\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>, option: IChoiceGroupOption) => {\n    this.setState({\n      keyFocused: undefined,\n    });\n  };\n\n  private _onChange(key: string) {\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._changeCallbacks[key]) {\n      this._changeCallbacks[key] = (\n        evt: React.FormEvent<HTMLElement | HTMLInputElement>,\n        option: IChoiceGroupOption,\n      ) => {\n        // eslint-disable-next-line deprecation/deprecation\n        const { onChanged, onChange } = this.props;\n\n        // Only manage state in uncontrolled scenarios.\n        if (!_isControlled(this.props)) {\n          this.setState({\n            keyChecked: key,\n          });\n        }\n\n        // Get the original option without the `key` prop removed\n        const originalOption = find(this.props.options || [], (value: IChoiceGroupOption) => value.key === key);\n\n        // TODO: onChanged deprecated, remove else if after 07/17/2017 when onChanged has been removed.\n        if (onChange) {\n          onChange(evt, originalOption);\n        } else if (onChanged) {\n          onChanged(originalOption!, evt);\n        }\n      };\n    }\n    return this._changeCallbacks[key];\n  }\n\n  /**\n   * Returns `selectedKey` if provided, or the key of the first option with the `checked` prop set.\n   */\n  private _getKeyChecked(props: IChoiceGroupProps): string | number | undefined {\n    if (props.selectedKey !== undefined) {\n      return props.selectedKey;\n    }\n\n    const { options = [] } = props;\n    // eslint-disable-next-line deprecation/deprecation\n    const optionsChecked = options.filter((option: IChoiceGroupOption) => option.checked);\n    return optionsChecked[0] && optionsChecked[0].key;\n  }\n\n  private _getOptionId(option: IChoiceGroupOption): string {\n    return option.id || `${this._id}-${option.key}`;\n  }\n\n  private _getOptionLabelId(option: IChoiceGroupOption): string {\n    return option.labelId || `${this._labelId}-${option.key}`;\n  }\n}\n\nfunction _isControlled(props: IChoiceGroupProps): boolean {\n  return isControlled(props, 'selectedKey');\n}\n","import { IChoiceGroupStyleProps, IChoiceGroupStyles } from './ChoiceGroup.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-ChoiceFieldGroup',\n  flexContainer: 'ms-ChoiceFieldGroup-flexContainer',\n};\n\nexport const getStyles = (props: IChoiceGroupStyleProps): IChoiceGroupStyles => {\n  const { className, optionsContainIconOrImage, theme } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    // TODO (Fabric 8?) - merge className back into `root` and apply root style to\n    // the actual root role=application element\n    applicationRole: className,\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        display: 'block',\n      },\n    ],\n    flexContainer: [\n      classNames.flexContainer,\n      optionsContainIconOrImage && {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ChoiceGroupBase } from './ChoiceGroup.base';\nimport { IChoiceGroupProps, IChoiceGroupStyles, IChoiceGroupStyleProps } from './ChoiceGroup.types';\nimport { getStyles } from './ChoiceGroup.styles';\n\nexport const ChoiceGroup: React.FunctionComponent<IChoiceGroupProps> = styled<\n  IChoiceGroupProps,\n  IChoiceGroupStyleProps,\n  IChoiceGroupStyles\n>(ChoiceGroupBase, getStyles, undefined, { scope: 'ChoiceGroup' });\n","import * as React from 'react';\nimport {\n  initializeComponentRef,\n  classNamesFunction,\n  getId,\n  inputProperties,\n  getNativeProps,\n  warnDeprecations,\n  warnMutuallyExclusive,\n  FocusRects,\n} from '../../Utilities';\nimport { IToggleProps, IToggle, IToggleStyleProps, IToggleStyles } from './Toggle.types';\nimport { Label } from '../../Label';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface IToggleState {\n  checked: boolean;\n}\n\nconst getClassNames = classNamesFunction<IToggleStyleProps, IToggleStyles>();\nconst COMPONENT_NAME = 'Toggle';\n\nexport class ToggleBase extends React.Component<IToggleProps, IToggleState> implements IToggle {\n  private _id: string;\n  private _toggleButton = React.createRef<HTMLButtonElement>();\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<IToggleProps>,\n    prevState: Readonly<IToggleState>,\n  ): Partial<IToggleState> | null {\n    if (nextProps.checked === undefined) {\n      return null;\n    }\n\n    return {\n      checked: !!nextProps.checked,\n    };\n  }\n\n  constructor(props: IToggleProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      checked: 'defaultChecked',\n    });\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      onAriaLabel: 'ariaLabel',\n      offAriaLabel: undefined,\n      onChanged: 'onChange',\n    });\n\n    this.state = {\n      checked: !!(props.checked || props.defaultChecked),\n    };\n    this._id = getId('Toggle');\n  }\n\n  /**\n   * Gets the current checked state of the toggle.\n   */\n  public get checked(): boolean {\n    return this.state.checked;\n  }\n\n  public render(): JSX.Element {\n    const {\n      as: RootType = 'div',\n      className,\n      theme,\n      disabled,\n      keytipProps,\n      id,\n      label,\n      ariaLabel,\n      /* eslint-disable deprecation/deprecation */\n      onAriaLabel,\n      offAriaLabel,\n      /* eslint-enable deprecation/deprecation */\n      offText,\n      onText,\n      styles,\n      inlineLabel,\n    } = this.props;\n    const { checked } = this.state;\n    const stateText = checked ? onText : offText;\n    const badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    const toggleNativeProps = getNativeProps(this.props, inputProperties, ['defaultChecked']);\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      checked,\n      inlineLabel,\n      onOffMissing: !onText && !offText,\n    });\n\n    const toggleId = id || this._id;\n    const labelId = `${toggleId}-label`;\n    const stateTextId = `${toggleId}-stateText`;\n\n    // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label AND stateText, if existent\n\n    let labelledById: string | undefined = undefined;\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      }\n      if (stateText) {\n        labelledById = labelledById ? `${labelledById} ${stateTextId}` : stateTextId;\n      }\n    }\n\n    const ariaRole = this.props.role ? this.props.role : 'switch';\n\n    const renderPill = (keytipAttributes: any = {}) => (\n      <button\n        {...toggleNativeProps}\n        {...keytipAttributes}\n        className={classNames.pill}\n        disabled={disabled}\n        id={toggleId}\n        type=\"button\"\n        role={ariaRole}\n        ref={this._toggleButton}\n        aria-disabled={disabled}\n        aria-checked={checked}\n        aria-label={ariaLabel ? ariaLabel : badAriaLabel}\n        data-is-focusable={true}\n        onChange={this._noop}\n        onClick={this._onClick}\n        aria-labelledby={labelledById}\n      >\n        <span className={classNames.thumb} />\n      </button>\n    );\n\n    const pillContent = keytipProps ? (\n      <KeytipData\n        keytipProps={keytipProps}\n        ariaDescribedBy={(toggleNativeProps as any)['aria-describedby']}\n        disabled={disabled}\n      >\n        {(keytipAttributes: any): JSX.Element => renderPill(keytipAttributes)}\n      </KeytipData>\n    ) : (\n      renderPill()\n    );\n\n    return (\n      <RootType className={classNames.root} hidden={(toggleNativeProps as any).hidden}>\n        {label && (\n          <Label htmlFor={toggleId} className={classNames.label} id={labelId}>\n            {label}\n          </Label>\n        )}\n\n        <div className={classNames.container}>\n          {pillContent}\n          {stateText && (\n            // This second \"htmlFor\" property is needed to allow the\n            // toggle's stateText to also trigger a state change when clicked.\n            <Label htmlFor={toggleId} className={classNames.text} id={stateTextId}>\n              {stateText}\n            </Label>\n          )}\n        </div>\n        <FocusRects />\n      </RootType>\n    );\n  }\n\n  public focus() {\n    if (this._toggleButton.current) {\n      this._toggleButton.current.focus();\n    }\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { disabled, checked: checkedProp, onChange, onChanged, onClick } = this.props;\n    const { checked } = this.state;\n\n    if (!disabled) {\n      // Only update the state if the user hasn't provided it.\n      if (checkedProp === undefined) {\n        this.setState({\n          checked: !checked,\n        });\n      }\n\n      if (onChange) {\n        onChange(ev, !checked);\n      }\n\n      if (onChanged) {\n        onChanged(!checked);\n      }\n\n      if (onClick) {\n        onClick(ev);\n      }\n    }\n  };\n\n  private _noop(): void {\n    /* no-op */\n  }\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ToggleBase } from './Toggle.base';\nimport { getStyles } from './Toggle.styles';\nimport { IToggleProps, IToggleStyleProps, IToggleStyles } from './Toggle.types';\n\nexport const Toggle: React.FunctionComponent<IToggleProps> = styled<IToggleProps, IToggleStyleProps, IToggleStyles>(\n  ToggleBase,\n  getStyles,\n  undefined,\n  { scope: 'Toggle' },\n);\n","import { HighContrastSelector, getFocusStyle, FontWeights, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { IToggleStyleProps, IToggleStyles } from './Toggle.types';\n\nconst DEFAULT_PILL_WIDTH = 40;\nconst DEFAULT_PILL_HEIGHT = 20;\nconst DEFAULT_THUMB_SIZE = 12;\n\nexport const getStyles = (props: IToggleStyleProps): IToggleStyles => {\n  const { theme, className, disabled, checked, inlineLabel, onOffMissing } = props;\n  const { semanticColors, palette } = theme;\n\n  // Tokens\n  const pillUncheckedBackground = semanticColors.bodyBackground;\n  const pillCheckedBackground = semanticColors.inputBackgroundChecked;\n  const pillCheckedHoveredBackground = semanticColors.inputBackgroundCheckedHovered;\n  const thumbUncheckedHoveredBackground = palette.neutralDark;\n  const pillCheckedDisabledBackground = semanticColors.disabledBodySubtext;\n  const thumbBackground = semanticColors.smallInputBorder;\n  const thumbCheckedBackground = semanticColors.inputForegroundChecked;\n  const thumbDisabledBackground = semanticColors.disabledBodySubtext;\n  const thumbCheckedDisabledBackground = semanticColors.disabledBackground;\n  const pillBorderColor = semanticColors.smallInputBorder;\n  const pillBorderHoveredColor = semanticColors.inputBorderHovered;\n  const pillBorderDisabledColor = semanticColors.disabledBodySubtext;\n  const textDisabledColor = semanticColors.disabledText;\n\n  return {\n    root: [\n      'ms-Toggle',\n      checked && 'is-checked',\n      !disabled && 'is-enabled',\n      disabled && 'is-disabled',\n      theme.fonts.medium,\n      {\n        marginBottom: '8px',\n      },\n      inlineLabel && {\n        display: 'flex',\n        alignItems: 'center',\n      },\n      className,\n    ],\n\n    label: [\n      'ms-Toggle-label',\n      { display: 'inline-block' },\n      disabled && {\n        color: textDisabledColor,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n          },\n        },\n      },\n      inlineLabel &&\n        !onOffMissing && {\n          marginRight: 16,\n        },\n      onOffMissing &&\n        inlineLabel && {\n          order: 1,\n          marginLeft: 16,\n        },\n      inlineLabel && { wordBreak: 'break-all' },\n    ],\n\n    container: [\n      'ms-Toggle-innerContainer',\n      {\n        display: 'flex',\n        position: 'relative',\n      },\n    ],\n\n    pill: [\n      'ms-Toggle-background',\n      getFocusStyle(theme, { inset: -3 }),\n      {\n        fontSize: '20px',\n        boxSizing: 'border-box',\n        width: DEFAULT_PILL_WIDTH,\n        height: DEFAULT_PILL_HEIGHT,\n        borderRadius: DEFAULT_PILL_HEIGHT / 2,\n        transition: 'all 0.1s ease',\n        border: `1px solid ${pillBorderColor}`,\n        background: pillUncheckedBackground,\n        cursor: 'pointer',\n        display: 'flex',\n        alignItems: 'center',\n        padding: '0 3px',\n      },\n      !disabled && [\n        !checked && {\n          selectors: {\n            ':hover': [\n              {\n                borderColor: pillBorderHoveredColor,\n              },\n            ],\n            ':hover .ms-Toggle-thumb': [\n              {\n                backgroundColor: thumbUncheckedHoveredBackground,\n                selectors: {\n                  [HighContrastSelector]: {\n                    borderColor: 'Highlight',\n                  },\n                },\n              },\n            ],\n          },\n        },\n        checked && [\n          {\n            background: pillCheckedBackground,\n            borderColor: 'transparent',\n            justifyContent: 'flex-end',\n          },\n          {\n            selectors: {\n              ':hover': [\n                {\n                  backgroundColor: pillCheckedHoveredBackground,\n                  borderColor: 'transparent',\n                  selectors: {\n                    [HighContrastSelector]: {\n                      backgroundColor: 'Highlight',\n                    },\n                  },\n                },\n              ],\n              [HighContrastSelector]: {\n                backgroundColor: 'Highlight',\n                ...getHighContrastNoAdjustStyle(),\n              },\n            },\n          },\n        ],\n      ],\n      disabled && [\n        {\n          cursor: 'default',\n        },\n        !checked && [\n          {\n            borderColor: pillBorderDisabledColor,\n          },\n        ],\n        checked && [\n          {\n            backgroundColor: pillCheckedDisabledBackground,\n            borderColor: 'transparent',\n            justifyContent: 'flex-end',\n          },\n        ],\n      ],\n      !disabled && {\n        selectors: {\n          '&:hover': {\n            selectors: {\n              [HighContrastSelector]: {\n                borderColor: 'Highlight',\n              },\n            },\n          },\n        },\n      },\n    ],\n\n    thumb: [\n      'ms-Toggle-thumb',\n      {\n        display: 'block',\n        width: DEFAULT_THUMB_SIZE,\n        height: DEFAULT_THUMB_SIZE,\n        borderRadius: '50%',\n        transition: 'all 0.1s ease',\n        backgroundColor: thumbBackground,\n        /* Border is added to handle high contrast mode for Firefox */\n        borderColor: 'transparent',\n        borderWidth: DEFAULT_THUMB_SIZE / 2,\n        borderStyle: 'solid',\n        boxSizing: 'border-box',\n      },\n      !disabled &&\n        checked && [\n          {\n            backgroundColor: thumbCheckedBackground,\n            selectors: {\n              [HighContrastSelector]: {\n                backgroundColor: 'Window',\n                borderColor: 'Window',\n              },\n            },\n          },\n        ],\n      disabled && [\n        !checked && [\n          {\n            backgroundColor: thumbDisabledBackground,\n          },\n        ],\n        checked && [\n          {\n            backgroundColor: thumbCheckedDisabledBackground,\n          },\n        ],\n      ],\n    ],\n\n    text: [\n      'ms-Toggle-stateText',\n      {\n        selectors: {\n          // Workaround: make rules more specific than Label rules.\n          '&&': {\n            padding: '0',\n            margin: '0 8px',\n            userSelect: 'none',\n            fontWeight: FontWeights.regular,\n          },\n        },\n      },\n      disabled && {\n        selectors: {\n          '&&': {\n            color: textDisabledColor,\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'GrayText',\n              },\n            },\n          },\n        },\n      },\n    ],\n  };\n};\n","import { IObjectWithKey, ISelection, SELECTION_CHANGE, SELECTION_ITEMS_CHANGE, SelectionMode } from './Selection.types';\nimport { EventGroup } from '../EventGroup';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionOptions<TItem = IObjectWithKey> {\n  onSelectionChanged?: () => void;\n  onItemsChanged?: () => void;\n  /** Custom logic to generate item keys. Required if `TItem` does not have a `key` property. */\n  getKey?: (item: TItem, index?: number) => string | number;\n  canSelectItem?: (item: TItem, index?: number) => boolean;\n  selectionMode?: SelectionMode;\n  items?: TItem[];\n}\n\n/**\n * Selection options with required `getKey` property.\n * {@docCategory Selection}\n */\nexport type ISelectionOptionsWithRequiredGetKey<TItem> = ISelectionOptions<TItem> &\n  Required<Pick<ISelectionOptions<TItem>, 'getKey'>>;\n\n/**\n * {@docCategory Selection}\n */\nexport class Selection<TItem = IObjectWithKey> implements ISelection<TItem> {\n  /** Number of items selected. Do not modify. */\n  public count: number;\n  public readonly mode: SelectionMode;\n\n  private _getKey: (item: TItem, index?: number) => string | number;\n  private _canSelectItem: (item: TItem, index?: number) => boolean;\n\n  private _changeEventSuppressionCount: number;\n  private _items: TItem[];\n  private _selectedItems: TItem[] | null;\n  private _selectedIndices: number[] | undefined;\n  private _isAllSelected: boolean;\n  private _exemptedIndices: { [index: string]: boolean };\n  private _exemptedCount: number;\n  private _keyToIndexMap: { [key: string]: number };\n  private _anchoredIndex: number;\n  private _onSelectionChanged: (() => void) | undefined;\n  private _onItemsChanged: (() => void) | undefined;\n  private _hasChanged!: boolean;\n  private _unselectableIndices!: { [index: string]: boolean };\n  private _unselectableCount: number;\n  private _isModal: boolean;\n\n  /**\n   * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options\n   * object with a `getKey` implementation. Providing options is optional otherwise.\n   * (At most one `options` object is accepted.)\n   */\n  constructor(\n    ...options: TItem extends IObjectWithKey // If the item type has a built-in key...\n      ? [] | [ISelectionOptions<TItem>] // Then the arguments can be empty or have the options without `getKey`\n      : [ISelectionOptionsWithRequiredGetKey<TItem>] // Otherwise, arguments require options with `getKey`.\n  ) {\n    const {\n      onSelectionChanged,\n      onItemsChanged,\n      getKey,\n      canSelectItem = () => true,\n      items,\n      selectionMode = SelectionMode.multiple,\n    } = options[0] || ({} as ISelectionOptions<TItem>);\n\n    this.mode = selectionMode;\n\n    this._getKey = getKey || defaultGetKey;\n\n    this._changeEventSuppressionCount = 0;\n    this._exemptedCount = 0;\n    this._anchoredIndex = 0;\n    this._unselectableCount = 0;\n\n    this._onSelectionChanged = onSelectionChanged;\n    this._onItemsChanged = onItemsChanged;\n    this._canSelectItem = canSelectItem;\n    this._keyToIndexMap = {};\n\n    this._isModal = false;\n\n    this.setItems(items || [], true);\n\n    this.count = this.getSelectedCount();\n  }\n\n  public canSelectItem(item: TItem, index?: number): boolean {\n    if (typeof index === 'number' && index < 0) {\n      return false;\n    }\n\n    return this._canSelectItem(item, index);\n  }\n\n  public getKey(item: TItem, index?: number): string {\n    const key = this._getKey(item, index);\n\n    return typeof key === 'number' || key ? `${key}` : '';\n  }\n\n  public setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void {\n    this._changeEventSuppressionCount += isEnabled ? -1 : 1;\n\n    if (this._changeEventSuppressionCount === 0 && this._hasChanged) {\n      this._hasChanged = false;\n\n      if (!suppressChange) {\n        this._change();\n      }\n    }\n  }\n\n  public isModal(): boolean {\n    return this._isModal;\n  }\n\n  public setModal(isModal: boolean): void {\n    if (this._isModal !== isModal) {\n      this.setChangeEvents(false);\n\n      this._isModal = isModal;\n\n      if (!isModal) {\n        this.setAllSelected(false);\n      }\n\n      this._change();\n\n      this.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * Selection needs the items, call this method to set them. If the set\n   * of items is the same, this will re-evaluate selection and index maps.\n   * Otherwise, shouldClear should be set to true, so that selection is\n   * cleared.\n   */\n  public setItems(items: TItem[], shouldClear: boolean = true): void {\n    const newKeyToIndexMap: { [key: string]: number } = {};\n    const newUnselectableIndices: { [key: string]: boolean } = {};\n    let hasSelectionChanged = false;\n\n    this.setChangeEvents(false);\n\n    // Reset the unselectable count.\n    this._unselectableCount = 0;\n\n    let haveItemsChanged = false;\n\n    // Build lookup table for quick selection evaluation.\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n\n      if (item) {\n        const key = this.getKey(item, i);\n\n        if (key) {\n          if (!haveItemsChanged && (!(key in this._keyToIndexMap) || this._keyToIndexMap[key] !== i)) {\n            haveItemsChanged = true;\n          }\n\n          newKeyToIndexMap[key] = i;\n        }\n      }\n\n      newUnselectableIndices[i] = item && !this.canSelectItem(item);\n      if (newUnselectableIndices[i]) {\n        this._unselectableCount++;\n      }\n    }\n\n    if (shouldClear || items.length === 0) {\n      this._setAllSelected(false, true);\n    }\n\n    // Check the exemption list for discrepencies.\n    const newExemptedIndicies: { [key: string]: boolean } = {};\n    let newExemptedCount = 0;\n\n    for (const indexProperty in this._exemptedIndices) {\n      if (this._exemptedIndices.hasOwnProperty(indexProperty)) {\n        const index = Number(indexProperty);\n        const item = this._items[index];\n        const exemptKey = item ? this.getKey(item, Number(index)) : undefined;\n        const newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;\n\n        if (newIndex === undefined) {\n          // The item has likely been replaced or removed.\n          hasSelectionChanged = true;\n        } else {\n          // We know the new index of the item. update the existing exemption table.\n          newExemptedIndicies[newIndex] = true;\n          newExemptedCount++;\n          hasSelectionChanged = hasSelectionChanged || newIndex !== index;\n        }\n      }\n    }\n\n    if (this._items && this._exemptedCount === 0 && items.length !== this._items.length && this._isAllSelected) {\n      // If everything was selected but the number of items has changed, selection has changed.\n      hasSelectionChanged = true;\n    }\n\n    if (!haveItemsChanged) {\n      for (const key of Object.keys(this._keyToIndexMap)) {\n        if (!(key in newKeyToIndexMap)) {\n          haveItemsChanged = true;\n          break;\n        }\n      }\n    }\n\n    this._exemptedIndices = newExemptedIndicies;\n    this._exemptedCount = newExemptedCount;\n    this._keyToIndexMap = newKeyToIndexMap;\n    this._unselectableIndices = newUnselectableIndices;\n    this._items = items;\n    this._selectedItems = null;\n\n    if (hasSelectionChanged) {\n      this._updateCount();\n    }\n\n    if (haveItemsChanged) {\n      EventGroup.raise(this, SELECTION_ITEMS_CHANGE);\n\n      if (this._onItemsChanged) {\n        this._onItemsChanged();\n      }\n    }\n\n    if (hasSelectionChanged) {\n      this._change();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public getItems(): TItem[] {\n    return this._items;\n  }\n\n  public getSelection(): TItem[] {\n    if (!this._selectedItems) {\n      this._selectedItems = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedItems.push(items[i]);\n          }\n        }\n      }\n    }\n\n    return this._selectedItems;\n  }\n\n  public getSelectedCount(): number {\n    return this._isAllSelected\n      ? this._items.length - this._exemptedCount - this._unselectableCount\n      : this._exemptedCount;\n  }\n\n  public getSelectedIndices(): number[] {\n    if (!this._selectedIndices) {\n      this._selectedIndices = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedIndices.push(i);\n          }\n        }\n      }\n    }\n\n    return this._selectedIndices;\n  }\n\n  public getItemIndex(key: string): number {\n    const index = this._keyToIndexMap[key];\n\n    return index ?? -1;\n  }\n\n  public isRangeSelected(fromIndex: number, count: number): boolean {\n    if (count === 0) {\n      return false;\n    }\n\n    const endIndex = fromIndex + count;\n\n    for (let i = fromIndex; i < endIndex; i++) {\n      if (!this.isIndexSelected(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isAllSelected(): boolean {\n    let selectableCount = this._items.length - this._unselectableCount;\n\n    // In single mode, we can only have a max of 1 item.\n    if (this.mode === SelectionMode.single) {\n      selectableCount = Math.min(selectableCount, 1);\n    }\n\n    return (\n      (this.count > 0 && this._isAllSelected && this._exemptedCount === 0) ||\n      (!this._isAllSelected && this._exemptedCount === selectableCount && selectableCount > 0)\n    );\n  }\n\n  public isKeySelected(key: string): boolean {\n    const index = this._keyToIndexMap[key];\n\n    return this.isIndexSelected(index);\n  }\n\n  public isIndexSelected(index: number): boolean {\n    return !!(\n      (this.count > 0 && this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index]) ||\n      (!this._isAllSelected && this._exemptedIndices[index])\n    );\n  }\n\n  public setAllSelected(isAllSelected: boolean): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void {\n    const index = this._keyToIndexMap[key];\n\n    if (index >= 0) {\n      this.setIndexSelected(index, isSelected, shouldAnchor);\n    }\n  }\n\n  public setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    // Clamp the index.\n    index = Math.min(Math.max(0, index), this._items.length - 1);\n\n    // No-op on out of bounds selections.\n    if (index < 0 || index >= this._items.length) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n\n    const isExempt = this._exemptedIndices[index];\n    const canSelect = !this._unselectableIndices[index];\n\n    if (canSelect) {\n      if (isSelected && this.mode === SelectionMode.single) {\n        // If this is single-select, the previous selection should be removed.\n        this._setAllSelected(false, true);\n      }\n\n      // Determine if we need to remove the exemption.\n      if (isExempt && ((isSelected && this._isAllSelected) || (!isSelected && !this._isAllSelected))) {\n        delete this._exemptedIndices[index];\n        this._exemptedCount--;\n      }\n\n      // Determine if we need to add the exemption.\n      if (!isExempt && ((isSelected && !this._isAllSelected) || (!isSelected && this._isAllSelected))) {\n        this._exemptedIndices[index] = true;\n        this._exemptedCount++;\n      }\n\n      if (shouldAnchor) {\n        this._anchoredIndex = index;\n      }\n    }\n\n    this._updateCount();\n\n    this.setChangeEvents(true);\n  }\n\n  public selectToKey(key: string, clearSelection?: boolean): void {\n    this.selectToIndex(this._keyToIndexMap[key], clearSelection);\n  }\n\n  public selectToIndex(index: number, clearSelection?: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    if (this.mode === SelectionMode.single) {\n      this.setIndexSelected(index, true, true);\n      return;\n    }\n\n    const anchorIndex = this._anchoredIndex || 0;\n    let startIndex = Math.min(index, anchorIndex);\n    const endIndex = Math.max(index, anchorIndex);\n\n    this.setChangeEvents(false);\n\n    if (clearSelection) {\n      this._setAllSelected(false, true);\n    }\n\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, true, false);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public toggleAllSelected(): void {\n    this.setAllSelected(!this.isAllSelected());\n  }\n\n  public toggleKeySelected(key: string): void {\n    this.setKeySelected(key, !this.isKeySelected(key), true);\n  }\n\n  public toggleIndexSelected(index: number): void {\n    this.setIndexSelected(index, !this.isIndexSelected(index), true);\n  }\n\n  public toggleRangeSelected(fromIndex: number, count: number): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    const isRangeSelected = this.isRangeSelected(fromIndex, count);\n    const endIndex = fromIndex + count;\n\n    if (this.mode === SelectionMode.single && count > 1) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n    for (let i = fromIndex; i < endIndex; i++) {\n      this.setIndexSelected(i, !isRangeSelected, false);\n    }\n    this.setChangeEvents(true);\n  }\n\n  private _updateCount(preserveModalState: boolean = false): void {\n    const count = this.getSelectedCount();\n\n    if (count !== this.count) {\n      this.count = count;\n      this._change();\n    }\n\n    if (!this.count && !preserveModalState) {\n      this.setModal(false);\n    }\n  }\n\n  private _setAllSelected(isAllSelected: boolean, preserveModalState: boolean = false): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount(preserveModalState);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  private _change(): void {\n    if (this._changeEventSuppressionCount === 0) {\n      this._selectedItems = null;\n      this._selectedIndices = undefined;\n\n      EventGroup.raise(this, SELECTION_CHANGE);\n\n      if (this._onSelectionChanged) {\n        this._onSelectionChanged();\n      }\n    } else {\n      this._hasChanged = true;\n    }\n  }\n}\n\nfunction defaultGetKey<TItem = IObjectWithKey>(item: TItem, index?: number): string | number {\n  // 0 may be used as a key\n  const { key = `${index}` } = (item || {}) as IObjectWithKey;\n  return key;\n}\n","import * as React from 'react';\nimport { GroupedListBase } from './GroupedList.base';\nimport { IList, IListProps } from '../../List';\nimport { IFocusZoneProps } from '../../FocusZone';\nimport { IRefObject, IRenderFunction } from '../../Utilities';\nimport { IDragDropContext, IDragDropEvents, IDragDropHelper } from '../../utilities/dragdrop/index';\nimport { ISelection, SelectionMode } from '../../utilities/selection/index';\nimport { IViewport } from '../../utilities/decorators/withViewport';\nimport { ITheme, IStyle } from '../../Styling';\nimport { IStyleFunctionOrObject } from '../../Utilities';\nimport { IGroupHeaderProps } from './GroupHeader.types';\nimport { IGroupShowAllProps } from './GroupShowAll.types';\nimport { IGroupFooterProps } from './GroupFooter.types';\n\n/**\n * {@docCategory GroupedList}\n */\nexport enum CollapseAllVisibility {\n  hidden = 0,\n  visible = 1,\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list props don't change, but the list still\n   * needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change, you can\n   * call this to force a re-evaluation. Be aware that this can be an expensive operation and should be done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Toggles the collapsed state of all the groups in the list.\n   */\n  toggleCollapseAll: (allCollapsed: boolean) => void;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListProps extends React.ClassAttributes<GroupedListBase> {\n  /**\n   * Theme that is passed in from Higher Order Component\n   */\n  theme?: ITheme;\n\n  /**\n   * Style function to be passed in to override the themed or default styles\n   */\n  styles?: IStyleFunctionOrObject<IGroupedListStyleProps, IGroupedListStyles>;\n\n  /**\n   * Optional callback to access the IGroupedList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IGroupedList>;\n\n  /** Optional class name to add to the root element. */\n  className?: string;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to groups and rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Optional grouping instructions. */\n  groups?: IGroup[];\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional properties to pass through to the FocusZone. */\n  focusZoneProps?: IFocusZoneProps;\n\n  /** Optional properties to pass through to the list components being rendered. */\n  listProps?: IListProps;\n\n  /** Optional properties to pass through to the root list component being rendered. */\n  rootListProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Override the default role for GroupedList.  */\n  role?: string;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Optional callback when the group expand state changes between all collapsed and at least one group is expanded. */\n  onGroupExpandStateChanged?: (isSomeGroupExpanded: boolean) => void;\n\n  /**\n   * boolean to control if pages containing unchanged items should be cached, this is a perf optimization\n   * The same property in List.Props\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /**\n   * Optional function to override default group height calculation used by list virtualization.\n   */\n  getGroupHeight?: (group: IGroup, groupIndex: number) => number;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroup {\n  /**\n   * Unique identifier for the group.\n   */\n  key: string;\n\n  /**\n   * Display name for the group, rendered on the header.\n   */\n  name: string;\n\n  /**\n   * Start index for the group within the given items.\n   */\n  startIndex: number;\n\n  /**\n   * How many items should be rendered within the group.\n   */\n  count: number;\n\n  /**\n   * Nested groups, if any.\n   */\n  children?: IGroup[];\n\n  /**\n   * Number indicating the level of nested groups.\n   */\n  level?: number;\n\n  /**\n   * Deprecated at 1.0.0, selection state will be controled by the selection store only.\n   * @deprecated At 1.0.0, selection state wil be controlled by the selection store only.\n   */\n  isSelected?: boolean;\n\n  /**\n   * If all the items in the group are collapsed.\n   */\n  isCollapsed?: boolean;\n\n  /**\n   * If the items within the group are summarized or showing all.\n   */\n  isShowingAll?: boolean;\n\n  /**\n   * If drag/drop is enabled for the group header.\n   */\n  isDropEnabled?: boolean;\n\n  /**\n   * Arbitrary data required to be preserved by the caller.\n   */\n  data?: any;\n\n  /**\n   * Optional accessibility label (aria-label) attribute that will be stamped on to the element.\n   * If none is specified, the arai-label attribute will contain the group name\n   */\n  ariaLabel?: string;\n\n  /**\n   * Optional flag to indicate the group has more data to load than the current group count indicated.\n   * This can be used to indicate that a plus should be rendered next to the group count in the header.\n   */\n  hasMoreData?: boolean;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupRenderProps {\n  /** Boolean indicating if all groups are in collapsed state. */\n  isAllGroupsCollapsed?: boolean;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Callback for when all groups are expanded or collapsed. */\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** Information to pass in to the group Show all footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /**\n   * Override which allows the caller to provide a custom header.\n   */\n  onRenderHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /**\n   * Override which allows the caller to provide a custom Show All link.\n   */\n  onRenderShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /**\n   * Override which allows the caller to provide a custom footer.\n   */\n  onRenderFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Flag to indicate whether to ignore the collapsing icon on header.\n   * @defaultvalue CollapseAllVisibility.visible\n   */\n  collapseAllVisibility?: CollapseAllVisibility;\n\n  /**\n   * Boolean indicating if empty groups are shown\n   * @defaultvalue false\n   */\n  showEmptyGroups?: boolean;\n\n  /**\n   * Override which allows the caller to provide a custom aria role\n   */\n  role?: string;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupDividerProps {\n  componentRef?: IRefObject<{}>;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Callback to determine if a group has missing items and needs to load them from the server. */\n  isGroupLoading?: (group: IGroup) => boolean;\n\n  /** Text shown on group headers to indicate the group is being loaded. */\n  loadingText?: string;\n\n  /** The group to be rendered by the header. */\n  group?: IGroup;\n\n  /** The index of the group. */\n  groupIndex?: number;\n\n  /** The indent level of the group. */\n  groupLevel?: number;\n\n  /** Defines the number of columns a group header needs to span in the case of a grid or treegrid */\n  ariaColSpan?: number;\n\n  /** Defines the number of items in the current set of listitems or treeitems */\n  ariaSetSize?: number;\n\n  /** Defines an element's number or position in the current set of listitems or treeitems */\n  ariaPosInSet?: number;\n\n  /** Defines the number of items in the current set of grid items */\n  ariaRowCount?: number;\n\n  /** Defines an element's number or position in the current set of grid items */\n  ariaRowIndex?: number;\n\n  /**\n   * Width corresponding to a single level.\n   * This is multiplied by the groupLevel to get the full spacer width for the group.\n   */\n  indentWidth?: number;\n\n  /** If all items in the group are selected. */\n  selected?: boolean;\n\n  /**\n   * Deprecated at v.65.1 and will be removed by v 1.0. Use `selected` instead.\n   * @deprecated Use `selected` instead.\n   */\n  isSelected?: boolean;\n\n  /** A reference to the viewport in which the header is rendered. */\n  viewport?: IViewport;\n\n  /** The selection mode of the list the group lives within. */\n  selectionMode?: SelectionMode;\n\n  /** Text to display for the group footer. */\n  footerText?: string;\n\n  /** Text to display for the group \"Show All\" link. */\n  showAllLinkText?: string;\n\n  /** Callback for when the group \"Show All\" link is clicked */\n  onToggleSummarize?: (group: IGroup) => void;\n\n  /** Callback for when the group header is clicked. */\n  onGroupHeaderClick?: (group: IGroup) => void;\n\n  /** Callback for when the \"keyup\" event is fired on the group header . */\n  onGroupHeaderKeyUp?: (ev: React.KeyboardEvent<HTMLElement>, group: IGroup) => void;\n\n  /** Callback for when the group is expanded or collapsed. */\n  onToggleCollapse?: (group: IGroup) => void;\n\n  /** Callback for when the group is selected. */\n  onToggleSelectGroup?: (group: IGroup) => void;\n\n  /** Determines if the group selection check box is shown for collapsed groups. */\n  isCollapsedGroupSelectVisible?: boolean;\n\n  /** Override which allows the caller to provider a custom renderer for the GroupHeader title. */\n  onRenderTitle?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Props for expand/collapse button\n   * @deprecated Use {@link IGroupHeaderProps.expandButtonProps} instead.\n   */\n  expandButtonProps?: React.HTMLAttributes<HTMLButtonElement>;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n\n  /** Custom className */\n  className?: string;\n\n  /** Theme provided by the Higher Order Component */\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport type IGroupedListStyleProps = Required<Pick<IGroupedListProps, 'theme'>> &\n  Pick<IGroupedListProps, 'className'> & {\n    /** whether or not the group is collapsed */\n    isCollapsed?: boolean;\n\n    /** Whether the group is in compact mode or not */\n    compact?: boolean;\n  };\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListStyles {\n  root: IStyle;\n  group: IStyle;\n  groupIsDropping: IStyle;\n}\n","import * as React from 'react';\nimport { IGroupSpacerProps } from './GroupSpacer.types';\n\nexport const SPACER_WIDTH = 36;\n\nexport const GroupSpacer: React.FunctionComponent<IGroupSpacerProps> = props => {\n  const { count, indentWidth = SPACER_WIDTH, role = 'presentation' } = props;\n  const width = count * indentWidth;\n\n  return count > 0 ? (\n    <span className={'ms-GroupSpacer'} style={{ display: 'inline-block', width }} role={role} />\n  ) : null;\n};\n","import {\n  labelProperties,\n  audioProperties,\n  videoProperties,\n  olProperties,\n  liProperties,\n  anchorProperties,\n  buttonProperties,\n  inputProperties,\n  textAreaProperties,\n  selectProperties,\n  optionProperties,\n  tableProperties,\n  trProperties,\n  thProperties,\n  tdProperties,\n  colGroupProperties,\n  colProperties,\n  formProperties,\n  iframeProperties,\n  imgProperties,\n  htmlElementProperties,\n  getNativeProps,\n} from './properties';\nimport * as React from 'react';\n\nconst nativeElementMap: Record<string, Record<string, number>> = {\n  label: labelProperties,\n  audio: audioProperties,\n  video: videoProperties,\n  ol: olProperties,\n  li: liProperties,\n  a: anchorProperties,\n  button: buttonProperties,\n  input: inputProperties,\n  textarea: textAreaProperties,\n  select: selectProperties,\n  option: optionProperties,\n  table: tableProperties,\n  tr: trProperties,\n  th: thProperties,\n  td: tdProperties,\n  colGroup: colGroupProperties,\n  col: colProperties,\n  form: formProperties,\n  iframe: iframeProperties,\n  img: imgProperties,\n};\n\n/**\n * Given an element tagname and user props, filters the props to only allowed props for the given\n * element type.\n * @param tagName - Tag name (e.g. \"div\")\n * @param props - Props object\n * @param excludedPropNames - List of props to disallow\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getNativeElementProps<TAttributes extends React.HTMLAttributes<any>>(\n  tagName: string,\n  props: {},\n  excludedPropNames?: string[],\n): TAttributes {\n  const allowedPropNames = (tagName && nativeElementMap[tagName]) || htmlElementProperties;\n\n  return getNativeProps(props, allowedPropNames, excludedPropNames);\n}\n","import * as React from 'react';\nimport { ICheckProps } from './Check.types';\nimport { Icon, FontIcon } from '../../Icon';\nimport { classNamesFunction } from '../../Utilities';\nimport { ICheckStyleProps, ICheckStyles } from './Check.types';\n\nconst getClassNames = classNamesFunction<ICheckStyleProps, ICheckStyles>();\n\nexport const CheckBase: React.FunctionComponent<ICheckProps> = props => {\n  const { checked = false, className, theme, styles, useFastIcons = true } = props;\n\n  const classNames = getClassNames(styles!, { theme: theme!, className, checked });\n  const IconComponent = useFastIcons ? FontIcon : Icon;\n\n  return (\n    <div className={classNames.root}>\n      <IconComponent iconName=\"CircleRing\" className={classNames.circle} />\n      <IconComponent iconName=\"StatusCircleCheckmark\" className={classNames.check} />\n    </div>\n  );\n};\nCheckBase.displayName = 'CheckBase';\n","import { ICheckStyleProps, ICheckStyles } from './Check.types';\nimport {\n  HighContrastSelector,\n  IStyle,\n  getGlobalClassNames,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL } from '../../Utilities';\n\nexport const CheckGlobalClassNames = {\n  root: 'ms-Check',\n  circle: 'ms-Check-circle',\n  check: 'ms-Check-check',\n  /** Must be manually applied to the parent element of the check. */\n  checkHost: 'ms-Check-checkHost',\n};\n\nexport const getStyles = (props: ICheckStyleProps): ICheckStyles => {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height = props.checkBoxHeight || '18px', checked, className, theme } = props;\n\n  const { palette, semanticColors, fonts } = theme;\n  const isRTL = getRTL(theme);\n\n  const classNames = getGlobalClassNames(CheckGlobalClassNames, theme);\n\n  const sharedCircleCheck: IStyle = {\n    fontSize: height,\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    width: height,\n    height: height,\n    textAlign: 'center',\n    verticalAlign: 'middle',\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      {\n        // lineHeight currently needs to be a string to output without 'px'\n        lineHeight: '1',\n        width: height,\n        height: height,\n        verticalAlign: 'top',\n        position: 'relative',\n        userSelect: 'none',\n\n        selectors: {\n          ':before': {\n            content: '\"\"',\n            position: 'absolute',\n            top: '1px',\n            right: '1px',\n            bottom: '1px',\n            left: '1px',\n            borderRadius: '50%',\n            opacity: 1,\n            background: semanticColors.bodyBackground,\n          },\n\n          [`.${classNames.checkHost}:hover &, .${classNames.checkHost}:focus &, &:hover, &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n\n      checked && [\n        'is-checked',\n        {\n          selectors: {\n            ':before': {\n              background: palette.themePrimary,\n              opacity: 1,\n              selectors: {\n                [HighContrastSelector]: {\n                  background: 'Window',\n                },\n              },\n            },\n          },\n        },\n      ],\n      className,\n    ],\n\n    circle: [\n      classNames.circle,\n      sharedCircleCheck,\n\n      {\n        color: palette.neutralSecondary,\n\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'WindowText',\n          },\n        },\n      },\n\n      checked && {\n        color: palette.white,\n      },\n    ],\n\n    check: [\n      classNames.check,\n      sharedCircleCheck,\n\n      {\n        opacity: 0,\n        color: palette.neutralSecondary,\n        fontSize: IconFontSizes.medium,\n        left: isRTL ? '-0.5px' : '.5px', // for centering the check icon inside the circle.\n\n        selectors: {\n          ':hover': {\n            opacity: 1,\n          },\n\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      checked && {\n        opacity: 1,\n        color: palette.white,\n        fontWeight: 900,\n\n        selectors: {\n          [HighContrastSelector]: {\n            border: 'none',\n            color: 'WindowText',\n          },\n        },\n      },\n    ],\n\n    checkHost: classNames.checkHost,\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ICheckProps, ICheckStyleProps, ICheckStyles } from './Check.types';\nimport { CheckBase } from './Check.base';\nimport { getStyles } from './Check.styles';\n\nexport const Check: React.FunctionComponent<ICheckProps> = styled<ICheckProps, ICheckStyleProps, ICheckStyles>(\n  CheckBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Check',\n  },\n  true,\n);\n","import { IDetailsRowStyleProps, IDetailsRowStyles, ICellStyleProps } from './DetailsRow.types';\nimport {\n  AnimationClassNames,\n  AnimationStyles,\n  HighContrastSelector,\n  IStyle,\n  getFocusStyle,\n  getGlobalClassNames,\n  FontWeights,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\n\nexport const DetailsRowGlobalClassNames = {\n  root: 'ms-DetailsRow',\n  // TODO: in Fabric 7.0 lowercase the 'Compact' for consistency across other components.\n  compact: 'ms-DetailsList--Compact',\n  cell: 'ms-DetailsRow-cell',\n  cellAnimation: 'ms-DetailsRow-cellAnimation',\n  cellCheck: 'ms-DetailsRow-cellCheck',\n  check: 'ms-DetailsRow-check',\n  cellMeasurer: 'ms-DetailsRow-cellMeasurer',\n  listCellFirstChild: 'ms-List-cell:first-child',\n  isContentUnselectable: 'is-contentUnselectable',\n  isSelected: 'is-selected',\n  isCheckVisible: 'is-check-visible',\n  isRowHeader: 'is-row-header',\n  fields: 'ms-DetailsRow-fields',\n};\nconst IsFocusableSelector = \"[data-is-focusable='true']\";\n\nexport const DEFAULT_CELL_STYLE_PROPS: ICellStyleProps = {\n  cellLeftPadding: 12,\n  cellRightPadding: 8,\n  cellExtraRightPadding: 24,\n};\n\n// Source of default row heights to share.\nexport const DEFAULT_ROW_HEIGHTS = {\n  rowHeight: 42,\n  compactRowHeight: 32,\n};\n\n// Constant values\nconst values = {\n  ...DEFAULT_ROW_HEIGHTS,\n  rowVerticalPadding: 11,\n  compactRowVerticalPadding: 6,\n};\n\nexport const getDetailsRowStyles = (props: IDetailsRowStyleProps): IDetailsRowStyles => {\n  const {\n    theme,\n    isSelected,\n    canSelect,\n    droppingClassName,\n    anySelected,\n    isCheckVisible,\n    checkboxCellClassName,\n    compact,\n    className,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    enableUpdateAnimations,\n    disabled,\n  } = props;\n\n  const { palette, fonts } = theme;\n  const {\n    neutralPrimary,\n    white,\n    neutralSecondary,\n    neutralLighter,\n    neutralLight,\n    neutralDark,\n    neutralQuaternaryAlt,\n  } = palette;\n  const { focusBorder } = theme.semanticColors;\n\n  const classNames = getGlobalClassNames(DetailsRowGlobalClassNames, theme);\n\n  const colors = {\n    // Default\n    defaultHeaderText: neutralPrimary,\n    defaultMetaText: neutralSecondary,\n    defaultBackground: white,\n\n    // Default Hover\n    defaultHoverHeaderText: neutralDark,\n    defaultHoverMetaText: neutralPrimary,\n    defaultHoverBackground: neutralLighter,\n\n    // Selected\n    selectedHeaderText: neutralDark,\n    selectedMetaText: neutralPrimary,\n    selectedBackground: neutralLight,\n\n    // Selected Hover\n    selectedHoverHeaderText: neutralDark,\n    selectedHoverMetaText: neutralPrimary,\n    selectedHoverBackground: neutralQuaternaryAlt,\n\n    // Focus\n    focusHeaderText: neutralDark,\n    focusMetaText: neutralPrimary,\n    focusBackground: neutralLight,\n    focusHoverBackground: neutralQuaternaryAlt,\n  };\n\n  const rowHighContrastFocus = {\n    top: 2,\n    right: 2,\n    bottom: 2,\n    left: 2,\n  };\n\n  // Selected row styles\n  const selectedStyles: IStyle = [\n    getFocusStyle(theme, {\n      inset: -1,\n      borderColor: focusBorder,\n      outlineColor: white,\n      highContrastStyle: rowHighContrastFocus,\n    }),\n    classNames.isSelected,\n    {\n      color: colors.selectedMetaText,\n      background: colors.selectedBackground,\n      borderBottom: `1px solid ${white}`,\n      selectors: {\n        '&:before': {\n          position: 'absolute',\n          display: 'block',\n          top: -1,\n          height: 1,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          content: '',\n          borderTop: `1px solid ${white}`,\n        },\n\n        // Selected State hover\n        '&:hover': {\n          background: colors.selectedHoverBackground,\n          color: colors.selectedHoverMetaText,\n          selectors: {\n            // Selected State hover meta cell\n            [`.${classNames.cell} ${HighContrastSelector}`]: {\n              color: 'HighlightText',\n              selectors: {\n                '> a': {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Selected State hover Header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.selectedHoverHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Ensure high-contrast mode overrides default hover background\n            [HighContrastSelector]: {\n              background: 'Highlight',\n            },\n          },\n        },\n\n        // Focus state\n        '&:focus': {\n          background: colors.focusBackground,\n          selectors: {\n            // Selected State hover meta cell\n            [`.${classNames.cell}`]: {\n              color: colors.focusMetaText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                  selectors: {\n                    '> a': {\n                      color: 'HighlightText',\n                    },\n                  },\n                },\n              },\n            },\n\n            // Row header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.focusHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Ensure high-contrast mode overrides default focus background\n            [HighContrastSelector]: {\n              background: 'Highlight',\n            },\n          },\n        },\n\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n          selectors: {\n            a: {\n              color: 'HighlightText',\n            },\n          },\n        },\n\n        // Focus and hover state\n        '&:focus:hover': {\n          background: colors.focusHoverBackground,\n        },\n      },\n    },\n  ];\n\n  const cannotSelectStyles: IStyle = [\n    classNames.isContentUnselectable,\n    {\n      userSelect: 'none',\n      cursor: 'default',\n    },\n  ];\n\n  const rootCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    border: 0,\n  };\n\n  const cellCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    paddingTop: values.compactRowVerticalPadding,\n    paddingBottom: values.compactRowVerticalPadding,\n    paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n  };\n\n  const defaultCellStyles: IStyle = [\n    getFocusStyle(theme, { inset: -1 }),\n    classNames.cell,\n    {\n      display: 'inline-block',\n      position: 'relative',\n      boxSizing: 'border-box',\n      minHeight: values.rowHeight,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      paddingTop: values.rowVerticalPadding,\n      paddingBottom: values.rowVerticalPadding,\n      paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n      selectors: {\n        '& > button': {\n          maxWidth: '100%',\n        },\n\n        [IsFocusableSelector]: getFocusStyle(theme, { inset: -1, borderColor: neutralSecondary, outlineColor: white }),\n      },\n    },\n\n    isSelected && {\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n          selectors: {\n            a: {\n              color: 'HighlightText',\n            },\n          },\n        },\n      },\n    },\n\n    compact && cellCompactStyles,\n    disabled && { opacity: 0.5 },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      AnimationClassNames.fadeIn400,\n      droppingClassName,\n      theme.fonts.small,\n      isCheckVisible && classNames.isCheckVisible,\n      getFocusStyle(theme, { borderColor: focusBorder, outlineColor: white }),\n      {\n        borderBottom: `1px solid ${neutralLighter}`,\n        background: colors.defaultBackground,\n        color: colors.defaultMetaText,\n        // This ensures that the row always tries to consume is minimum width and does not compress.\n        display: 'inline-flex',\n        minWidth: '100%',\n        minHeight: values.rowHeight,\n        whiteSpace: 'nowrap',\n        padding: 0,\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        textAlign: 'left',\n        selectors: {\n          [`.${classNames.listCellFirstChild} &:before`]: {\n            display: 'none',\n          },\n\n          '&:hover': {\n            background: colors.defaultHoverBackground,\n            color: colors.defaultHoverMetaText,\n            selectors: {\n              [`.${classNames.isRowHeader}`]: {\n                color: colors.defaultHoverHeaderText,\n              },\n            },\n          },\n\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n        },\n      },\n      isSelected && selectedStyles,\n      !canSelect && cannotSelectStyles,\n      compact && rootCompactStyles,\n      className,\n    ],\n\n    cellUnpadded: {\n      paddingRight: `${cellStyleProps.cellRightPadding}px`,\n    },\n\n    cellPadded: {\n      paddingRight: `${cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding}px`,\n      selectors: {\n        [`&.${classNames.cellCheck}`]: {\n          paddingRight: 0,\n        },\n      },\n    },\n\n    cell: defaultCellStyles,\n    cellAnimation: enableUpdateAnimations && AnimationStyles.slideLeftIn40,\n    cellMeasurer: [\n      classNames.cellMeasurer,\n      {\n        overflow: 'visible',\n        whiteSpace: 'nowrap',\n      },\n    ],\n    checkCell: [\n      defaultCellStyles,\n      classNames.cellCheck,\n      checkboxCellClassName,\n      {\n        padding: 0,\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        flexShrink: 0,\n      },\n    ],\n    checkCover: {\n      position: 'absolute',\n      top: -1,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      display: anySelected ? 'block' : 'none',\n    },\n    fields: [\n      classNames.fields,\n      {\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n    isRowHeader: [\n      classNames.isRowHeader,\n      {\n        color: colors.defaultHeaderText,\n        fontSize: fonts.medium.fontSize,\n      },\n      isSelected && {\n        color: colors.selectedHeaderText,\n        fontWeight: FontWeights.semibold,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'HighlightText',\n          },\n        },\n      },\n    ],\n    isMultiline: [\n      defaultCellStyles,\n      {\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n        textOverflow: 'clip',\n      },\n    ],\n    check: [classNames.check],\n  };\n};\n","import { IDetailsHeaderStyleProps, IDetailsHeaderStyles } from './DetailsHeader.types';\nimport {\n  getFocusStyle,\n  focusClear,\n  IStyle,\n  getGlobalClassNames,\n  HighContrastSelector,\n  hiddenContentStyle,\n  ITheme,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL, IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { ICellStyleProps } from './DetailsRow.types';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPANDER_WIDTH } from '../GroupedList/GroupSpacer';\n\nconst GlobalClassNames = {\n  tooltipHost: 'ms-TooltipHost',\n  root: 'ms-DetailsHeader',\n  cell: 'ms-DetailsHeader-cell',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintCaretStyle: 'ms-DetailsHeader-dropHintCaretStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVertical: 'ms-DetailsColumn-gripperBarVertical',\n  checkTooltip: 'ms-DetailsHeader-checkTooltip',\n  check: 'ms-DetailsHeader-check',\n};\n\nexport const HEADER_HEIGHT = 42;\n\nexport const getCellStyles = (props: { theme: ITheme; cellStyleProps?: ICellStyleProps }): IStyle => {\n  const { theme, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return [\n    classNames.cell,\n    getFocusStyle(theme),\n    {\n      color: semanticColors.bodyText,\n      position: 'relative',\n      display: 'inline-block',\n      boxSizing: 'border-box',\n      padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n      lineHeight: 'inherit',\n      margin: '0',\n      height: HEADER_HEIGHT,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      textAlign: 'left',\n    },\n  ];\n};\n\nexport const getStyles = (props: IDetailsHeaderStyleProps): IDetailsHeaderStyles => {\n  const {\n    theme,\n    className,\n    isAllSelected,\n    isResizingColumn,\n    isSizing,\n    isAllCollapsed,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const cellSizerFadeInStyles: IStyle = {\n    opacity: 1,\n    transition: 'opacity 0.3s linear',\n  };\n\n  const cellStyles = getCellStyles(props);\n\n  return {\n    root: [\n      classNames.root,\n      fonts.small,\n      {\n        display: 'inline-block',\n        background: colors.headerBackgroundColor,\n        position: 'relative',\n        minWidth: '100%',\n        verticalAlign: 'top',\n        height: HEADER_HEIGHT,\n        lineHeight: HEADER_HEIGHT,\n        whiteSpace: 'nowrap',\n        boxSizing: 'content-box',\n        paddingBottom: '1px',\n        paddingTop: '16px',\n        borderBottom: `1px solid ${semanticColors.bodyDivider}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`& .${classNames.tooltipHost} .${classNames.checkTooltip}`]: {\n            display: 'block',\n          },\n        },\n      },\n      isAllSelected && classNames.isAllSelected,\n      isResizingColumn && classNames.isResizingColumn,\n      className,\n    ],\n\n    check: [\n      classNames.check,\n      {\n        height: HEADER_HEIGHT,\n      },\n      {\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n\n    cellWrapperPadded: {\n      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n    },\n\n    cellIsCheck: [\n      cellStyles,\n      classNames.cellIsCheck,\n      {\n        position: 'relative',\n        padding: 0,\n        margin: 0,\n        display: 'inline-flex',\n        alignItems: 'center',\n        border: 'none',\n      },\n      isAllSelected && {\n        opacity: 1,\n      },\n    ],\n\n    cellIsGroupExpander: [\n      cellStyles,\n      {\n        display: 'inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        padding: 0,\n        border: 'none',\n        width: GROUP_EXPANDER_WIDTH, // align with GroupedList's first expandIcon cell width.\n        color: palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: palette.neutralLighter,\n          },\n          ':active': {\n            backgroundColor: palette.neutralLight,\n          },\n        },\n      },\n    ],\n\n    cellIsActionable: {\n      selectors: {\n        ':hover': {\n          color: semanticColors.bodyText,\n          background: semanticColors.listHeaderBackgroundHovered,\n        },\n        ':active': {\n          background: semanticColors.listHeaderBackgroundPressed,\n        },\n      },\n    },\n    cellIsEmpty: {\n      textOverflow: 'clip',\n    },\n\n    cellSizer: [\n      classNames.cellSizer,\n      focusClear(),\n      {\n        display: 'inline-block',\n        position: 'relative',\n        cursor: 'ew-resize',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 'inherit',\n        background: 'transparent',\n        zIndex: 1,\n        width: 16,\n        selectors: {\n          ':after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            width: 1,\n            background: colors.resizerColor,\n            opacity: 0,\n            left: '50%',\n          },\n          ':focus:after': cellSizerFadeInStyles,\n          ':hover:after': cellSizerFadeInStyles,\n          [`&.${classNames.isResizing}:after`]: [\n            cellSizerFadeInStyles,\n            {\n              boxShadow: '0 0 5px 0 rgba(0, 0, 0, 0.4)',\n            },\n          ],\n        },\n      },\n    ],\n\n    cellIsResizing: classNames.isResizing,\n\n    cellSizerStart: {\n      margin: '0 -8px',\n    },\n\n    cellSizerEnd: {\n      margin: 0,\n      marginLeft: -16,\n    },\n\n    collapseButton: [\n      classNames.collapseButton,\n      {\n        transformOrigin: '50% 50%',\n        transition: 'transform .1s linear',\n      },\n      isAllCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n            },\n          ]\n        : {\n            transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n          },\n    ],\n\n    checkTooltip: classNames.checkTooltip,\n\n    sizingOverlay: isSizing && {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      cursor: 'ew-resize',\n      background: 'rgba(255, 255, 255, 0)',\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'transparent',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    dropHintCircleStyle: [\n      classNames.dropHintCircleStyle,\n      {\n        display: 'inline-block',\n        visibility: 'hidden',\n        position: 'absolute',\n        bottom: 0,\n        height: 9,\n        width: 9,\n        borderRadius: '50%',\n        marginLeft: -5,\n        top: 34,\n        overflow: 'visible',\n        zIndex: 10,\n        border: `1px solid ${palette.themePrimary}`,\n        background: palette.white,\n      },\n    ],\n\n    dropHintCaretStyle: [\n      classNames.dropHintCaretStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        top: -28,\n        left: -6.5,\n        fontSize: fonts.medium.fontSize,\n        color: palette.themePrimary,\n        overflow: 'visible',\n        zIndex: 10,\n      },\n    ],\n\n    dropHintLineStyle: [\n      classNames.dropHintLineStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 42,\n        width: 1,\n        background: palette.themePrimary,\n        zIndex: 10,\n      },\n    ],\n\n    dropHintStyle: {\n      display: 'inline-block',\n      position: 'absolute',\n    },\n  };\n};\n","import { getGlobalClassNames, getFocusStyle } from '../../Styling';\nimport { IDetailsRowCheckStyleProps, IDetailsRowCheckStyles } from './DetailsRowCheck.types';\nimport { DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\nimport { HEADER_HEIGHT } from './DetailsHeader.styles';\nimport { CheckGlobalClassNames } from '../Check/Check.styles';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsRow-check',\n  isDisabled: 'ms-DetailsRow-check--isDisabled',\n  isHeader: 'ms-DetailsRow-check--isHeader',\n};\n\nexport const CHECK_CELL_WIDTH = 48;\n\nexport const getStyles = (props: IDetailsRowCheckStyleProps): IDetailsRowCheckStyles => {\n  const { theme, className, isHeader, selected, anySelected, canSelect, compact, isVisible } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n  const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\n\n  const height = isHeader ? HEADER_HEIGHT : compact ? compactRowHeight : rowHeight;\n\n  const isCheckVisible = isVisible || selected || anySelected;\n\n  return {\n    root: [classNames.root, className],\n\n    check: [\n      !canSelect && classNames.isDisabled,\n      isHeader && classNames.isHeader,\n      getFocusStyle(theme),\n      theme.fonts.small,\n      CheckGlobalClassNames.checkHost,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: 'default',\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        opacity: isCheckVisible ? 1 : 0,\n        height: height,\n        width: CHECK_CELL_WIDTH,\n        padding: 0,\n        margin: 0,\n      },\n    ],\n\n    isDisabled: [],\n  };\n};\n","import * as React from 'react';\nimport {\n  IDetailsRowCheckProps,\n  IDetailsCheckboxProps,\n  IDetailsRowCheckStyleProps,\n  IDetailsRowCheckStyles,\n} from './DetailsRowCheck.types';\nimport { css, styled, classNamesFunction, getNativeElementProps } from '../../Utilities';\nimport { Check } from '../../Check';\nimport { getStyles } from './DetailsRowCheck.styles';\nimport { composeRenderFunction } from '@uifabric/utilities';\nimport { ITheme } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>();\n\nconst DetailsRowCheckBase: React.FunctionComponent<IDetailsRowCheckProps> = props => {\n  const {\n    isVisible = false,\n    canSelect = false,\n    anySelected = false,\n    selected = false,\n    isHeader = false,\n    className,\n    checkClassName,\n    styles,\n    theme,\n    compact,\n    onRenderDetailsCheckbox,\n    useFastIcons = true, // must be removed from buttonProps\n    ...buttonProps\n  } = props;\n  const defaultCheckboxRender = useFastIcons ? _fastDefaultCheckboxRender : _defaultCheckboxRender;\n\n  const onRenderCheckbox = onRenderDetailsCheckbox\n    ? composeRenderFunction(onRenderDetailsCheckbox, defaultCheckboxRender)\n    : defaultCheckboxRender;\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    canSelect,\n    selected,\n    anySelected,\n    className,\n    isHeader,\n    isVisible,\n    compact,\n  });\n\n  const detailsCheckboxProps: IDetailsCheckboxProps = {\n    checked: selected,\n    theme,\n  };\n\n  const divProps = getNativeElementProps('div', buttonProps, ['aria-label', 'aria-labelledby', 'aria-describedby']);\n\n  return canSelect ? (\n    <div\n      {...buttonProps}\n      role=\"checkbox\"\n      // eslint-disable-next-line deprecation/deprecation\n      className={css(classNames.root, classNames.check)}\n      aria-checked={selected}\n      data-selection-toggle={true}\n      data-automationid=\"DetailsRowCheck\"\n      tabIndex={-1}\n    >\n      {onRenderCheckbox(detailsCheckboxProps)}\n    </div>\n  ) : (\n    // eslint-disable-next-line deprecation/deprecation\n    <div {...divProps} className={css(classNames.root, classNames.check)} />\n  );\n};\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n\nfunction _defaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <Check checked={checkboxProps.checked} />;\n}\n\nfunction _fastDefaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n}\n\nexport const DetailsRowCheck = styled<IDetailsRowCheckProps, IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>(\n  DetailsRowCheckBase,\n  getStyles,\n  undefined,\n  { scope: 'DetailsRowCheck' },\n  true,\n);\n","import * as React from 'react';\r\nimport { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { CollapseAllVisibility } from '../../GroupedList';\r\nimport { ITheme, IStyle } from '../../Styling';\r\nimport { DetailsHeaderBase } from './DetailsHeader.base';\r\nimport { IColumn, DetailsListLayoutMode, IColumnReorderOptions, ColumnDragEndLocation } from './DetailsList.types';\r\nimport { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\r\nimport { ISelection, SelectionMode } from '../../utilities/selection/index';\r\nimport { IDetailsCheckboxProps } from './DetailsRowCheck.types';\r\nimport { IDetailsColumnRenderTooltipProps } from './DetailsColumn.types';\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDetailsHeader {\r\n  /** sets focus into the header */\r\n  focus: () => boolean;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDetailsHeaderBaseProps extends React.ClassAttributes<DetailsHeaderBase>, IDetailsItemProps {\r\n  /** Theme from the Higher Order Component */\r\n  theme?: ITheme;\r\n\r\n  /** Call to provide customized styling that will layer on top of the variant rules. */\r\n  styles?: IStyleFunctionOrObject<IDetailsHeaderStyleProps, IDetailsHeaderStyles>;\r\n\r\n  /** Ref to the component itself */\r\n  componentRef?: IRefObject<IDetailsHeader>;\r\n\r\n  /** Layout mode - fixedColumns or justified */\r\n  layoutMode: DetailsListLayoutMode;\r\n\r\n  /** Callback for when column sizing has changed */\r\n  onColumnIsSizingChanged?: (column: IColumn, isSizing: boolean) => void;\r\n\r\n  /** Callback for when column is resized */\r\n  onColumnResized?: (column: IColumn, newWidth: number, columnIndex: number) => void;\r\n\r\n  /** Callback for when column is automatically resized */\r\n  onColumnAutoResized?: (column: IColumn, columnIndex: number) => void;\r\n\r\n  /** Callback for when the column is clicked */\r\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\r\n\r\n  /** Callback for when the column needs to show a context menu */\r\n  onColumnContextMenu?: (column: IColumn, ev: React.MouseEvent<HTMLElement>) => void;\r\n\r\n  /** Callback to render a tooltip for the column header */\r\n  onRenderColumnHeaderTooltip?: IRenderFunction<IDetailsColumnRenderTooltipProps>;\r\n\r\n  /** Whether to collapse for all visibility */\r\n  collapseAllVisibility?: CollapseAllVisibility;\r\n\r\n  /** Whether or not all is collapsed */\r\n  isAllCollapsed?: boolean;\r\n\r\n  /** Callback for when collapse all is toggled */\r\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\r\n\r\n  /** ariaLabel for the entire header */\r\n  ariaLabel?: string;\r\n\r\n  /** ariaLabel for expand/collapse group button */\r\n  ariaLabelForToggleAllGroupsButton?: string;\r\n\r\n  /** ariaLabel for the header checkbox that selects or deselects everything */\r\n  ariaLabelForSelectAllCheckbox?: string;\r\n\r\n  /** ariaLabel for the selection column */\r\n  ariaLabelForSelectionColumn?: string;\r\n\r\n  /** Select all button visibility */\r\n  selectAllVisibility?: SelectAllVisibility;\r\n\r\n  /** Column reordering options */\r\n  columnReorderOptions?: IColumnReorderOptions;\r\n\r\n  /** Column reordering options */\r\n  columnReorderProps?: IColumnReorderHeaderProps;\r\n\r\n  /** Minimum pixels to be moved before dragging is registered */\r\n  minimumPixelsForDrag?: number;\r\n\r\n  /** Overriding class name */\r\n  className?: string;\r\n\r\n  /** If provided, can be used to render a custom checkbox */\r\n  onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;\r\n\r\n  /**\r\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\r\n   * but are still customizable via class names.\r\n   * @defaultvalue true\r\n   */\r\n  useFastIcons?: boolean;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDetailsHeaderProps extends IDetailsHeaderBaseProps {\r\n  /**\r\n   * Column metadata\r\n   */\r\n  columns: IColumn[];\r\n\r\n  /**\r\n   * Selection from utilities\r\n   */\r\n  selection: ISelection;\r\n\r\n  /**\r\n   * Selection mode\r\n   */\r\n  selectionMode: SelectionMode;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport enum SelectAllVisibility {\r\n  none = 0,\r\n  hidden = 1,\r\n  visible = 2,\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDetailsHeaderState {\r\n  columnResizeDetails?: IColumnResizeDetails;\r\n  isAllSelected?: boolean;\r\n  isSizing?: boolean;\r\n  isAllCollapsed?: boolean;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IColumnResizeDetails {\r\n  columnIndex: number;\r\n  originX?: number;\r\n  columnMinWidth: number;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IColumnReorderHeaderProps extends IColumnReorderOptions {\r\n  /** Callback to notify the column dragEnd event to List\r\n   * Need this to check whether the dragEnd has happened on\r\n   * corresponding list or outside of the list\r\n   */\r\n  onColumnDragEnd?: (props: { dropLocation?: ColumnDragEndLocation }, event: MouseEvent) => void;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDropHintDetails {\r\n  originX: number; // X index of dropHint Element relative to header\r\n  startX: number; // start index of the range for the current drophint\r\n  endX: number; // end index of the range for the current drophint\r\n  dropHintElementRef: HTMLElement; // Reference for drophint to change the style when needed\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport type IDetailsHeaderStyleProps = Required<Pick<IDetailsHeaderProps, 'theme'>> &\r\n  Pick<IDetailsHeaderProps, 'className'> & {\r\n    /** Whether to hide select all checkbox */\r\n    isSelectAllHidden?: boolean;\r\n\r\n    /** Whether the \"select all\" checkbox is checked */\r\n    isAllSelected?: boolean;\r\n\r\n    /** Is column being resized */\r\n    isResizingColumn?: boolean;\r\n\r\n    /** Are all columns collapsed */\r\n    isAllCollapsed?: boolean;\r\n\r\n    /** Whether the header is sizing */\r\n    isSizing?: boolean;\r\n\r\n    /** Whether checkbox is hidden  */\r\n    isCheckboxHidden?: boolean;\r\n\r\n    cellStyleProps?: ICellStyleProps;\r\n  };\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDetailsHeaderStyles {\r\n  root: IStyle;\r\n  check: IStyle;\r\n\r\n  /**\r\n   * @deprecated Not used\r\n   */\r\n  cellWrapperPadded: IStyle;\r\n  cellIsCheck: IStyle;\r\n\r\n  /**\r\n   * @deprecated Not used\r\n   */\r\n  cellIsActionable: IStyle;\r\n\r\n  /**\r\n   * @deprecated Not used\r\n   */\r\n  cellIsEmpty: IStyle;\r\n  cellSizer: IStyle;\r\n  cellSizerStart: IStyle;\r\n  cellSizerEnd: IStyle;\r\n  cellIsResizing: IStyle;\r\n  cellIsGroupExpander: IStyle;\r\n  collapseButton: IStyle;\r\n  checkTooltip: IStyle;\r\n  sizingOverlay: IStyle;\r\n  dropHintCircleStyle: IStyle;\r\n  dropHintCaretStyle: IStyle;\r\n  dropHintLineStyle: IStyle;\r\n  dropHintStyle: IStyle;\r\n  accessibleLabel: IStyle;\r\n}\r\n","import { EventGroup, getDocument } from '../../Utilities';\nimport { IDragDropHelper, IDragDropTarget, IDragDropOptions, IDragDropEvent, IDragDropContext } from './interfaces';\nimport { ISelection } from '../../utilities/selection/interfaces';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nexport interface IDragDropHelperParams {\n  selection: ISelection;\n  minimumPixelsForDrag?: number;\n}\n\nexport class DragDropHelper implements IDragDropHelper {\n  private _dragEnterCounts: { [key: string]: number };\n  private _isDragging: boolean;\n  private _dragData: {\n    eventTarget: EventTarget | null;\n    clientX: number;\n    clientY: number;\n    dataTransfer?: DataTransfer;\n    dropTarget?: IDragDropTarget;\n    dragTarget?: IDragDropTarget;\n  } | null;\n  private _selection: ISelection;\n  private _activeTargets: {\n    [key: string]: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n  };\n  private _events: EventGroup;\n  private _lastId: number;\n  private _initialized: boolean;\n\n  constructor(params: IDragDropHelperParams) {\n    this._selection = params.selection;\n    this._dragEnterCounts = {};\n    this._activeTargets = {};\n    this._lastId = 0;\n    // To make this class cheap to create, which allows simplifying some logic elsewhere,\n    // only initialize the event group and global event handlers as needed.\n    this._initialized = false;\n  }\n\n  public dispose(): void {\n    if (this._events) {\n      this._events.dispose();\n    }\n  }\n\n  public subscribe(\n    root: HTMLElement,\n    events: EventGroup,\n    dragDropOptions: IDragDropOptions,\n  ): {\n    key: string;\n    dispose(): void;\n  } {\n    if (!this._initialized) {\n      this._events = new EventGroup(this);\n\n      const doc = getDocument();\n\n      // clear drag data when mouse up, use capture event to ensure it will be run\n      if (doc) {\n        this._events.on(doc.body, 'mouseup', this._onMouseUp.bind(this), true);\n        this._events.on(doc, 'mouseup', this._onDocumentMouseUp.bind(this), true);\n      }\n\n      this._initialized = true;\n    }\n\n    const { key = `${++this._lastId}` } = dragDropOptions;\n\n    const handlers: {\n      callback: (context: IDragDropContext, event?: any) => void;\n      eventName: string;\n    }[] = [];\n\n    let onDragStart: (event: DragEvent) => void;\n    let onDragLeave: (event: DragEvent) => void;\n    let onDragEnter: (event: DragEvent) => void;\n    let onDragEnd: (event: DragEvent) => void;\n    let onDrop: (event: DragEvent) => void;\n    let onDragOver: (event: DragEvent) => void;\n    let onMouseDown: (event: MouseEvent) => void;\n\n    let isDraggable: boolean;\n    let isDroppable: boolean;\n\n    let activeTarget: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n\n    if (dragDropOptions && root) {\n      const { eventMap, context, updateDropState } = dragDropOptions;\n\n      const dragDropTarget: IDragDropTarget = {\n        root: root,\n        options: dragDropOptions,\n        key: key,\n      };\n\n      isDraggable = this._isDraggable(dragDropTarget);\n      isDroppable = this._isDroppable(dragDropTarget);\n\n      if (isDraggable || isDroppable) {\n        if (eventMap) {\n          for (const event of eventMap) {\n            const handler = {\n              callback: event.callback.bind(null, context),\n              eventName: event.eventName,\n            };\n\n            handlers.push(handler);\n\n            this._events.on(root, handler.eventName, handler.callback);\n          }\n        }\n      }\n\n      if (isDroppable) {\n        // If the target is droppable, wire up global event listeners to track drop-related events.\n        onDragLeave = (event: DragEvent) => {\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]--;\n            if (this._dragEnterCounts[key] === 0) {\n              updateDropState(false /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnter = (event: DragEvent) => {\n          event.preventDefault(); // needed for IE\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]++;\n            if (this._dragEnterCounts[key] === 1) {\n              updateDropState(true /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnd = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n        };\n\n        onDrop = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n\n          if (dragDropOptions.onDrop) {\n            dragDropOptions.onDrop(dragDropOptions.context.data, event);\n          }\n        };\n\n        onDragOver = (event: DragEvent) => {\n          event.preventDefault();\n          if (dragDropOptions.onDragOver) {\n            dragDropOptions.onDragOver(dragDropOptions.context.data, event);\n          }\n        };\n\n        this._dragEnterCounts[key] = 0;\n\n        // dragenter and dragleave will be fired when hover to the child element\n        // but we only want to change state when enter or leave the current element\n        // use the count to ensure it.\n        events.on(root, 'dragenter', onDragEnter);\n        events.on(root, 'dragleave', onDragLeave);\n        events.on(root, 'dragend', onDragEnd);\n        events.on(root, 'drop', onDrop);\n        events.on(root, 'dragover', onDragOver);\n      }\n\n      if (isDraggable) {\n        // If the target is draggable, wire up local event listeners for mouse events.\n        onMouseDown = this._onMouseDown.bind(this, dragDropTarget);\n        onDragEnd = this._onDragEnd.bind(this, dragDropTarget);\n\n        // We need to add in data so that on Firefox we show the ghost element when dragging\n        onDragStart = (event: DragEvent) => {\n          const options = dragDropOptions;\n          if (options && options.onDragStart) {\n            options.onDragStart(options.context.data, options.context.index, this._selection.getSelection(), event);\n          }\n          this._isDragging = true;\n          if (event.dataTransfer) {\n            event.dataTransfer.setData('id', root.id);\n          }\n        };\n\n        events.on(root, 'dragstart', onDragStart);\n        events.on(root, 'mousedown', onMouseDown);\n        events.on(root, 'dragend', onDragEnd);\n      }\n\n      activeTarget = {\n        target: dragDropTarget,\n        dispose: () => {\n          if (this._activeTargets[key] === activeTarget) {\n            delete this._activeTargets[key];\n          }\n\n          if (root) {\n            for (const handler of handlers) {\n              this._events.off(root, handler.eventName, handler.callback);\n            }\n\n            if (isDroppable) {\n              events.off(root, 'dragenter', onDragEnter);\n              events.off(root, 'dragleave', onDragLeave);\n              events.off(root, 'dragend', onDragEnd);\n              events.off(root, 'dragover', onDragOver);\n              events.off(root, 'drop', onDrop);\n            }\n\n            if (isDraggable) {\n              events.off(root, 'dragstart', onDragStart);\n              events.off(root, 'mousedown', onMouseDown);\n              events.off(root, 'dragend', onDragEnd);\n            }\n          }\n        },\n      };\n\n      this._activeTargets[key] = activeTarget;\n    }\n\n    return {\n      key: key,\n      dispose: () => {\n        if (activeTarget) {\n          activeTarget.dispose();\n        }\n      },\n    };\n  }\n\n  public unsubscribe(root: HTMLElement, key: string): void {\n    const activeTarget = this._activeTargets[key];\n\n    if (activeTarget) {\n      activeTarget.dispose();\n    }\n  }\n\n  private _onDragEnd(target: IDragDropTarget, event: DragEvent): void {\n    const { options } = target;\n    if (options.onDragEnd) {\n      options.onDragEnd(options.context.data, event);\n    }\n  }\n\n  /**\n   * clear drag data when mouse up on body\n   */\n  private _onMouseUp(event: MouseEvent): void {\n    this._isDragging = false;\n    if (this._dragData) {\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n\n        if (activeTarget.target.root) {\n          this._events.off(activeTarget.target.root, 'mousemove');\n          this._events.off(activeTarget.target.root, 'mouseleave');\n        }\n      }\n\n      if (this._dragData.dropTarget) {\n        // raise dragleave event to let dropTarget know it need to remove dropping style\n        EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n        EventGroup.raise(this._dragData.dropTarget.root, 'drop');\n      }\n    }\n    this._dragData = null;\n  }\n\n  /**\n   * clear drag data when mouse up outside of the document\n   */\n  private _onDocumentMouseUp(event: MouseEvent): void {\n    const doc = getDocument();\n\n    if (doc && event.target === doc.documentElement) {\n      this._onMouseUp(event);\n    }\n  }\n\n  /**\n   * when mouse move over a new drop target while dragging some items,\n   * fire dragleave on the old target and fire dragenter to the new target\n   * The target will handle style change on dragenter and dragleave events.\n   */\n  private _onMouseMove(target: IDragDropTarget, event: MouseEvent): void {\n    const {\n      // use buttons property here since ev.button in some edge case is not updating well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = MOUSEMOVE_PRIMARY_BUTTON,\n    } = event;\n\n    if (this._dragData && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onMouseUp(event);\n      return;\n    }\n\n    const { root, key } = target;\n    if (this._isDragging) {\n      if (this._isDroppable(target)) {\n        // we can have nested drop targets in the DOM, like a folder inside a group. In that case, when we drag into\n        // the inner target (folder), we first set dropTarget to the inner element. But the same event is bubbled to the\n        // outer target too, and we need to prevent the outer one from taking over.\n        // So, check if the last dropTarget is not a child of the current.\n\n        if (this._dragData) {\n          if (\n            this._dragData.dropTarget &&\n            this._dragData.dropTarget.key !== key &&\n            !this._isChild(root, this._dragData.dropTarget.root)\n          ) {\n            if (this._dragEnterCounts[this._dragData.dropTarget.key] > 0) {\n              EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n              EventGroup.raise(root, 'dragenter');\n              this._dragData.dropTarget = target;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * when mouse leave a target while dragging some items, fire dragleave to the target\n   */\n  private _onMouseLeave(target: IDragDropTarget, event: MouseEvent): void {\n    if (this._isDragging) {\n      if (this._dragData && this._dragData.dropTarget && this._dragData.dropTarget.key === target.key) {\n        EventGroup.raise(target.root, 'dragleave');\n        this._dragData.dropTarget = undefined;\n      }\n    }\n  }\n\n  /**\n   * when mouse down on a draggable item, we start to track dragdata.\n   */\n  private _onMouseDown(target: IDragDropTarget, event: MouseEvent): void {\n    if (event.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    if (this._isDraggable(target)) {\n      this._dragData = {\n        clientX: event.clientX,\n        clientY: event.clientY,\n        eventTarget: event.target,\n        dragTarget: target,\n      };\n\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n        if (activeTarget.target.root) {\n          this._events.on(activeTarget.target.root, 'mousemove', this._onMouseMove.bind(this, activeTarget.target));\n          this._events.on(activeTarget.target.root, 'mouseleave', this._onMouseLeave.bind(this, activeTarget.target));\n        }\n      }\n    } else {\n      this._dragData = null;\n    }\n  }\n\n  /**\n   * determine whether the child target is a descendant of the parent\n   */\n  private _isChild(parentElement: HTMLElement, childElement: HTMLElement): boolean {\n    while (childElement && childElement.parentElement) {\n      if (childElement.parentElement === parentElement) {\n        return true;\n      }\n      childElement = childElement.parentElement;\n    }\n    return false;\n  }\n\n  private _isDraggable(target: IDragDropTarget): boolean {\n    const { options } = target;\n    return !!(options.canDrag && options.canDrag(options.context.data));\n  }\n\n  private _isDroppable(target: IDragDropTarget): boolean {\n    // TODO: take the drag item into consideration to prevent dragging an item into the same group\n    const { options } = target;\n    const dragContext =\n      this._dragData && this._dragData.dragTarget ? this._dragData.dragTarget.options.context : undefined;\n    return !!(options.canDrop && options.canDrop(options.context, dragContext));\n  }\n}\n","import * as React from 'react';\nimport { Icon, FontIcon } from '../../Icon';\nimport { IProcessedStyleSet } from '../../Styling';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  Async,\n  IDisposable,\n  classNamesFunction,\n  composeRenderFunction,\n} from '../../Utilities';\nimport { ColumnActionsMode } from './DetailsList.types';\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnRenderTooltipProps,\n  IDetailsColumnFilterIconProps,\n} from './DetailsColumn.types';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nconst getClassNames = classNamesFunction<IDetailsColumnStyleProps, IDetailsColumnStyles>();\nconst TRANSITION_DURATION_DRAG = 200; // ms\nconst TRANSITION_DURATION_DROP = 1500; // ms\nconst CLASSNAME_ADD_INTERVAL = 20; // ms\n\nconst defaultOnRenderHeader = (classNames: IProcessedStyleSet<IDetailsColumnStyles>) => (\n  props?: IDetailsColumnProps,\n): JSX.Element | null => {\n  if (!props) {\n    return null;\n  }\n\n  if (props.column.isIconOnly) {\n    return <span className={classNames.accessibleLabel}>{props.column.name}</span>;\n  }\n\n  return <>{props.column.name}</>;\n};\n\n/**\n * Component for rendering columns in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport class DetailsColumnBase extends React.Component<IDetailsColumnProps> {\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _dragDropSubscription: IDisposable;\n  private _classNames: IProcessedStyleSet<IDetailsColumnStyles>;\n\n  constructor(props: IDetailsColumnProps) {\n    super(props);\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      column,\n      columnIndex,\n      parentId,\n      isDraggable,\n      styles,\n      theme,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      useFastIcons = true,\n    } = this.props;\n    const { onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip } = this.props;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      headerClassName: column.headerClassName,\n      iconClassName: column.iconClassName,\n      isActionable: column.columnActionsMode !== ColumnActionsMode.disabled,\n      isEmpty: !column.name,\n      isIconVisible: column.isSorted || column.isGrouped || column.isFiltered,\n      isPadded: column.isPadded,\n      isIconOnly: column.isIconOnly,\n      cellStyleProps,\n      transitionDurationDrag: TRANSITION_DURATION_DRAG,\n      transitionDurationDrop: TRANSITION_DURATION_DROP,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    const onRenderFilterIcon = column.onRenderFilterIcon\n      ? composeRenderFunction(column.onRenderFilterIcon, this._onRenderFilterIcon(this._classNames))\n      : this._onRenderFilterIcon(this._classNames);\n\n    const onRenderHeader = column.onRenderHeader\n      ? composeRenderFunction(column.onRenderHeader, defaultOnRenderHeader(this._classNames))\n      : defaultOnRenderHeader(this._classNames);\n\n    return (\n      <>\n        <div\n          key={column.key}\n          ref={this._root}\n          role={'columnheader'}\n          aria-sort={column.isSorted ? (column.isSortedDescending ? 'descending' : 'ascending') : 'none'}\n          aria-colindex={columnIndex}\n          className={classNames.root}\n          data-is-draggable={isDraggable}\n          draggable={isDraggable}\n          style={{\n            width:\n              column.calculatedWidth! +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          }}\n          data-automationid={'ColumnsHeaderColumn'}\n          data-item-key={column.key}\n        >\n          {isDraggable && (\n            <IconComponent iconName=\"GripperBarVertical\" className={classNames.gripperBarVerticalStyle} />\n          )}\n          {onRenderColumnHeaderTooltip(\n            {\n              hostClassName: classNames.cellTooltip,\n              id: `${parentId}-${column.key}-tooltip`,\n              setAriaDescribedBy: false,\n              column,\n              content: column.columnActionsMode !== ColumnActionsMode.disabled ? column.ariaLabel : '',\n              children: (\n                <span\n                  id={`${parentId}-${column.key}`}\n                  aria-label={column.isIconOnly ? column.name : undefined}\n                  aria-labelledby={column.isIconOnly ? undefined : `${parentId}-${column.key}-name`}\n                  className={classNames.cellTitle}\n                  data-is-focusable={column.columnActionsMode !== ColumnActionsMode.disabled}\n                  role={\n                    column.columnActionsMode !== ColumnActionsMode.disabled &&\n                    (column.onColumnClick !== undefined || this.props.onColumnClick !== undefined)\n                      ? 'button'\n                      : undefined\n                  }\n                  aria-describedby={\n                    !this.props.onRenderColumnHeaderTooltip && this._hasAccessibleLabel()\n                      ? `${parentId}-${column.key}-tooltip`\n                      : undefined\n                  }\n                  onContextMenu={this._onColumnContextMenu}\n                  onClick={this._onColumnClick}\n                  aria-haspopup={column.columnActionsMode === ColumnActionsMode.hasDropdown}\n                  aria-expanded={\n                    column.columnActionsMode === ColumnActionsMode.hasDropdown ? !!column.isMenuOpen : undefined\n                  }\n                >\n                  <span id={`${parentId}-${column.key}-name`} className={classNames.cellName}>\n                    {(column.iconName || column.iconClassName) && (\n                      <IconComponent className={classNames.iconClassName} iconName={column.iconName} />\n                    )}\n\n                    {onRenderHeader(this.props)}\n                  </span>\n\n                  {column.isFiltered && <IconComponent className={classNames.nearIcon} iconName=\"Filter\" />}\n\n                  {column.isSorted && (\n                    <IconComponent\n                      className={classNames.sortIcon}\n                      iconName={column.isSortedDescending ? 'SortDown' : 'SortUp'}\n                    />\n                  )}\n\n                  {column.isGrouped && <IconComponent className={classNames.nearIcon} iconName=\"GroupedDescending\" />}\n\n                  {column.columnActionsMode === ColumnActionsMode.hasDropdown &&\n                    !column.isIconOnly &&\n                    onRenderFilterIcon({\n                      'aria-hidden': true,\n                      columnProps: this.props,\n                      className: classNames.filterChevron,\n                      iconName: 'ChevronDown',\n                    })}\n                </span>\n              ),\n            },\n            this._onRenderColumnHeaderTooltip,\n          )}\n        </div>\n        {!this.props.onRenderColumnHeaderTooltip ? this._renderAccessibleLabel() : null}\n      </>\n    );\n  }\n\n  public componentDidMount(): void {\n    if (this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    const classNames = this._classNames;\n\n    if (this.props.isDropped) {\n      if (this._root.current) {\n        this._root.current.classList.add(classNames.borderAfterDropping);\n\n        this._async.setTimeout(() => {\n          if (this._root.current) {\n            this._root.current.classList.add(classNames.noBorderAfterDropping);\n          }\n        }, CLASSNAME_ADD_INTERVAL);\n      }\n\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.remove(classNames.borderAfterDropping);\n          this._root.current.classList.remove(classNames.noBorderAfterDropping);\n        }\n      }, TRANSITION_DURATION_DROP + CLASSNAME_ADD_INTERVAL);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public componentDidUpdate(): void {\n    if (!this._dragDropSubscription && this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    if (this._dragDropSubscription && !this.props.isDraggable) {\n      this._dragDropSubscription.dispose();\n      this._events.off(this._root.current, 'mousedown');\n      delete this._dragDropSubscription;\n    }\n  }\n\n  private _onRenderFilterIcon = (classNames: IProcessedStyleSet<IDetailsColumnStyles>) => (\n    props: IDetailsColumnFilterIconProps,\n  ): JSX.Element => {\n    const { columnProps, ...iconProps } = props;\n    const IconComponent = columnProps?.useFastIcons ? FontIcon : Icon;\n\n    return <IconComponent {...iconProps} />;\n  };\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: IDetailsColumnRenderTooltipProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  private _onColumnClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnClick, column } = this.props;\n\n    if (column.columnActionsMode === ColumnActionsMode.disabled) {\n      return;\n    }\n\n    if (column.onColumnClick) {\n      column.onColumnClick(ev, column);\n    }\n\n    if (onColumnClick) {\n      onColumnClick(ev, column);\n    }\n  };\n\n  private _getColumnDragDropOptions(): IDragDropOptions {\n    const { columnIndex } = this.props;\n    const options = {\n      selectionIndex: columnIndex,\n      context: { data: columnIndex, index: columnIndex },\n      canDrag: () => this.props.isDraggable!,\n      canDrop: () => false,\n      onDragStart: this._onDragStart,\n      updateDropState: () => undefined,\n      onDrop: () => undefined,\n      onDragEnd: this._onDragEnd,\n    };\n    return options;\n  }\n\n  private _hasAccessibleLabel(): boolean {\n    const { column } = this.props;\n\n    return !!(\n      column.ariaLabel ||\n      column.filterAriaLabel ||\n      column.sortAscendingAriaLabel ||\n      column.sortDescendingAriaLabel ||\n      column.groupAriaLabel\n    );\n  }\n\n  private _renderAccessibleLabel(): JSX.Element | null {\n    const { column, parentId } = this.props;\n    const classNames = this._classNames;\n\n    return this._hasAccessibleLabel() && !this.props.onRenderColumnHeaderTooltip ? (\n      <label\n        key={`${column.key}_label`}\n        id={`${parentId}-${column.key}-tooltip`}\n        className={classNames.accessibleLabel}\n      >\n        {column.ariaLabel}\n        {(column.isFiltered && column.filterAriaLabel) || null}\n        {(column.isSorted &&\n          (column.isSortedDescending ? column.sortDescendingAriaLabel : column.sortAscendingAriaLabel)) ||\n          null}\n        {(column.isGrouped && column.groupAriaLabel) || null}\n      </label>\n    ) : null;\n  }\n\n  private _onDragStart = (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (itemIndex) {\n      this._updateHeaderDragInfo(itemIndex);\n      this._root.current!.classList.add(classNames.borderWhileDragging);\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.add(classNames.noBorderWhileDragging);\n        }\n      }, CLASSNAME_ADD_INTERVAL);\n    }\n  };\n\n  private _onDragEnd = (item?: any, event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (event) {\n      this._updateHeaderDragInfo(-1, event);\n    }\n    this._root.current!.classList.remove(classNames.borderWhileDragging);\n    this._root.current!.classList.remove(classNames.noBorderWhileDragging);\n  };\n\n  private _updateHeaderDragInfo = (itemIndex: number, event?: MouseEvent) => {\n    /* eslint-disable deprecation/deprecation */\n    if (this.props.setDraggedItemIndex) {\n      this.props.setDraggedItemIndex(itemIndex);\n    }\n    /* eslint-enable deprecation/deprecation */\n    if (this.props.updateDragInfo) {\n      this.props.updateDragInfo({ itemIndex }, event);\n    }\n  };\n\n  private _onColumnContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnContextMenu, column } = this.props;\n    if (column.onColumnContextMenu) {\n      column.onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n    if (onColumnContextMenu) {\n      onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const { isDraggable } = this.props;\n    // Ignore anything except the primary button.\n    if (isDraggable && ev.button === MOUSEDOWN_PRIMARY_BUTTON) {\n      ev.stopPropagation();\n    }\n  };\n\n  private _addDragDropHandling() {\n    this._dragDropSubscription = this.props.dragDropHelper!.subscribe(\n      this._root.current!,\n      this._events,\n      this._getColumnDragDropOptions(),\n    );\n\n    // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n    this._events.on(this._root.current, 'mousedown', this._onRootMouseDown);\n  }\n}\n","import { IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\nimport { getFocusStyle, getGlobalClassNames, hiddenContentStyle, IStyle, FontWeights } from '../../Styling';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { getCellStyles } from './DetailsHeader.styles';\n\nconst GlobalClassNames = {\n  isActionable: 'is-actionable',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  isEmpty: 'is-empty',\n  isIconVisible: 'is-icon-visible',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVerticalStyle: 'ms-DetailsColumn-gripperBar',\n  nearIcon: 'ms-DetailsColumn-nearIcon',\n};\n\nexport const getStyles = (props: IDetailsColumnStyleProps): IDetailsColumnStyles => {\n  const {\n    theme,\n    headerClassName,\n    iconClassName,\n    isActionable,\n    isEmpty,\n    isIconVisible,\n    isPadded,\n    isIconOnly,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    transitionDurationDrag,\n    transitionDurationDrop,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    dropdownChevronForegroundColor: palette.neutralSecondary,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const nearIconStyle: IStyle = {\n    color: colors.iconForegroundColor,\n    opacity: 1,\n    paddingLeft: 8,\n  };\n\n  const borderWhileDragging: IStyle = {\n    outline: `1px solid ${palette.themePrimary}`,\n  };\n\n  const borderAfterDragOrDrop: IStyle = {\n    outlineColor: 'transparent',\n  };\n\n  return {\n    root: [\n      getCellStyles(props),\n      fonts.small,\n      isActionable && [\n        classNames.isActionable,\n        {\n          selectors: {\n            ':hover': {\n              color: semanticColors.bodyText,\n              background: semanticColors.listHeaderBackgroundHovered,\n            },\n            ':active': {\n              background: semanticColors.listHeaderBackgroundPressed,\n            },\n          },\n        },\n      ],\n      isEmpty && [\n        classNames.isEmpty,\n        {\n          textOverflow: 'clip',\n        },\n      ],\n      isIconVisible && classNames.isIconVisible,\n      isPadded && {\n        paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n      },\n      {\n        selectors: {\n          ':hover i[data-icon-name=\"GripperBarVertical\"]': {\n            display: 'block',\n          },\n        },\n      },\n      headerClassName,\n    ],\n\n    gripperBarVerticalStyle: {\n      display: 'none',\n      position: 'absolute',\n      textAlign: 'left',\n      color: palette.neutralTertiary,\n      left: 1,\n    },\n\n    nearIcon: [classNames.nearIcon, nearIconStyle],\n\n    sortIcon: [\n      nearIconStyle,\n      {\n        paddingLeft: 4,\n        position: 'relative',\n        top: 1,\n      },\n    ],\n\n    iconClassName: [\n      {\n        color: colors.iconForegroundColor,\n        opacity: 1,\n      },\n      iconClassName,\n    ],\n\n    filterChevron: [\n      classNames.filterChevron,\n      {\n        color: colors.dropdownChevronForegroundColor,\n        paddingLeft: 6,\n        verticalAlign: 'middle',\n        fontSize: fonts.small.fontSize,\n      },\n    ],\n\n    cellTitle: [\n      classNames.cellTitle,\n      getFocusStyle(theme),\n      {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'stretch',\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n        padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n        ...(isIconOnly\n          ? {\n              alignContent: 'flex-end',\n              maxHeight: '100%',\n              flexWrap: 'wrap-reverse',\n            }\n          : {}),\n      },\n    ],\n\n    cellName: [\n      classNames.cellName,\n      {\n        flex: '0 1 auto',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontWeight: FontWeights.semibold,\n        fontSize: fonts.medium.fontSize,\n      },\n      isIconOnly && {\n        selectors: {\n          [`.${classNames.nearIcon}`]: {\n            paddingLeft: 0,\n          },\n        },\n      },\n    ],\n\n    cellTooltip: {\n      display: 'block',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    borderWhileDragging: borderWhileDragging,\n\n    noBorderWhileDragging: [borderAfterDragOrDrop, { transition: `outline ${transitionDurationDrag}ms ease` }],\n\n    borderAfterDropping: borderWhileDragging,\n\n    noBorderAfterDropping: [borderAfterDragOrDrop, { transition: `outline  ${transitionDurationDrop}ms ease` }],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IDetailsColumnProps, IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\nimport { DetailsColumnBase } from './DetailsColumn.base';\nimport { getStyles } from './DetailsColumn.styles';\n\nexport { IDetailsColumnProps };\n\nexport const DetailsColumn: React.FunctionComponent<IDetailsColumnProps> = styled<\n  IDetailsColumnProps,\n  IDetailsColumnStyleProps,\n  IDetailsColumnStyles\n>(DetailsColumnBase, getStyles, undefined, { scope: 'DetailsColumn' });\n","import * as React from 'react';\r\nimport { IProcessedStyleSet } from '../../Styling';\r\nimport {\r\n  initializeComponentRef,\r\n  EventGroup,\r\n  IDisposable,\r\n  css,\r\n  getRTL,\r\n  getId,\r\n  KeyCodes,\r\n  classNamesFunction,\r\n} from '../../Utilities';\r\nimport {\r\n  IColumn,\r\n  IDetailsHeaderBaseProps,\r\n  IColumnDragDropDetails,\r\n  ColumnDragEndLocation,\r\n  CheckboxVisibility,\r\n} from './DetailsList.types';\r\nimport { IFocusZone, FocusZone, FocusZoneDirection } from '../../FocusZone';\r\nimport { Icon, FontIcon } from '../../Icon';\r\nimport { Layer } from '../../Layer';\r\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\r\nimport { CollapseAllVisibility } from '../../GroupedList';\r\nimport { DetailsRowCheck } from './DetailsRowCheck';\r\nimport { ITooltipHostProps } from '../../Tooltip';\r\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\r\nimport { IDragDropOptions, DragDropHelper } from '../../utilities/dragdrop/index';\r\nimport { DetailsColumn, IDetailsColumnProps } from '../../components/DetailsList/DetailsColumn';\r\nimport {\r\n  SelectAllVisibility,\r\n  IDropHintDetails,\r\n  IColumnReorderHeaderProps,\r\n  IDetailsHeaderState,\r\n} from './DetailsHeader.types';\r\nimport { IDetailsHeaderStyleProps, IDetailsHeaderStyles, IDetailsHeader } from './DetailsHeader.types';\r\n\r\nconst getClassNames = classNamesFunction<IDetailsHeaderStyleProps, IDetailsHeaderStyles>();\r\n\r\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\r\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\r\n\r\nconst NO_COLUMNS: IColumn[] = [];\r\n\r\nexport class DetailsHeaderBase extends React.Component<IDetailsHeaderBaseProps, IDetailsHeaderState>\r\n  implements IDetailsHeader {\r\n  public static defaultProps = {\r\n    selectAllVisibility: SelectAllVisibility.visible,\r\n    collapseAllVisibility: CollapseAllVisibility.visible,\r\n    useFastIcons: true,\r\n  };\r\n\r\n  private _classNames: IProcessedStyleSet<IDetailsHeaderStyles>;\r\n  private _rootElement = React.createRef<HTMLElement>();\r\n  private _events: EventGroup;\r\n  private _rootComponent = React.createRef<IFocusZone>();\r\n  private _id: string;\r\n  private _draggedColumnIndex = -1;\r\n  private _dropHintDetails: { [key: number]: IDropHintDetails } = {};\r\n  private _dragDropHelper: DragDropHelper;\r\n  private _currentDropHintIndex: number;\r\n  private _subscriptionObject: IDisposable;\r\n  private _onDropIndexInfo: {\r\n    sourceIndex: number;\r\n    targetIndex: number;\r\n  };\r\n\r\n  constructor(props: IDetailsHeaderBaseProps) {\r\n    super(props);\r\n\r\n    initializeComponentRef(this);\r\n    this._events = new EventGroup(this);\r\n\r\n    this.state = {\r\n      columnResizeDetails: undefined,\r\n      isAllCollapsed: this.props.isAllCollapsed,\r\n      isAllSelected: !!this.props.selection && this.props.selection.isAllSelected(),\r\n    };\r\n\r\n    this._onDropIndexInfo = {\r\n      sourceIndex: -1,\r\n      targetIndex: -1,\r\n    };\r\n    this._id = getId('header');\r\n    this._currentDropHintIndex = -1;\r\n\r\n    // The drag drop handler won't do any work until subscribe() is called,\r\n    // so always set it up for convenience\r\n    this._dragDropHelper = new DragDropHelper({\r\n      selection: {\r\n        getSelection: () => {\r\n          return;\r\n        },\r\n      } as ISelection,\r\n      minimumPixelsForDrag: this.props.minimumPixelsForDrag,\r\n    });\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    const { selection } = this.props;\r\n\r\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\r\n\r\n    // this._rootElement.current will be null in tests using react-test-renderer\r\n    if (this._rootElement.current) {\r\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\r\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\r\n\r\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\r\n\r\n      if (this._getColumnReorderProps()) {\r\n        this._subscriptionObject = this._dragDropHelper.subscribe(\r\n          this._rootElement.current,\r\n          this._events,\r\n          this._getHeaderDragDropOptions(),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void {\r\n    if (this._getColumnReorderProps()) {\r\n      if (!this._subscriptionObject && this._rootElement.current) {\r\n        this._subscriptionObject = this._dragDropHelper.subscribe(\r\n          this._rootElement.current,\r\n          this._events,\r\n          this._getHeaderDragDropOptions(),\r\n        );\r\n      }\r\n    } else if (this._subscriptionObject) {\r\n      this._subscriptionObject.dispose();\r\n      delete this._subscriptionObject;\r\n    }\r\n\r\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\r\n      const { columns: previousColumns = NO_COLUMNS } = prevProps;\r\n      const { columns = NO_COLUMNS } = this.props;\r\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\r\n        this._onDropIndexInfo = {\r\n          sourceIndex: -1,\r\n          targetIndex: -1,\r\n        };\r\n      }\r\n    }\r\n\r\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\r\n      this.setState({ isAllCollapsed: this.props.isAllCollapsed });\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    if (this._subscriptionObject) {\r\n      this._subscriptionObject.dispose();\r\n      delete this._subscriptionObject;\r\n    }\r\n\r\n    this._dragDropHelper.dispose();\r\n\r\n    this._events.dispose();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      columns = NO_COLUMNS,\r\n      ariaLabel,\r\n      ariaLabelForToggleAllGroupsButton,\r\n      ariaLabelForSelectAllCheckbox,\r\n      selectAllVisibility,\r\n      ariaLabelForSelectionColumn,\r\n      indentWidth,\r\n      onColumnClick,\r\n      onColumnContextMenu,\r\n      onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip,\r\n      styles,\r\n      selectionMode,\r\n      theme,\r\n      onRenderDetailsCheckbox,\r\n      groupNestingDepth,\r\n      useFastIcons,\r\n      checkboxVisibility,\r\n      className,\r\n    } = this.props;\r\n    const { isAllSelected, columnResizeDetails, isSizing, isAllCollapsed } = this.state;\r\n    const showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\r\n    const isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\r\n    const isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\r\n\r\n    const columnReorderProps = this._getColumnReorderProps();\r\n    const frozenColumnCountFromStart =\r\n      columnReorderProps && columnReorderProps.frozenColumnCountFromStart\r\n        ? columnReorderProps.frozenColumnCountFromStart\r\n        : 0;\r\n    const frozenColumnCountFromEnd =\r\n      columnReorderProps && columnReorderProps.frozenColumnCountFromEnd\r\n        ? columnReorderProps.frozenColumnCountFromEnd\r\n        : 0;\r\n\r\n    this._classNames = getClassNames(styles, {\r\n      theme: theme!,\r\n      isAllSelected,\r\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\r\n      isResizingColumn: !!columnResizeDetails && isSizing,\r\n      isSizing,\r\n      isAllCollapsed,\r\n      isCheckboxHidden,\r\n      className,\r\n    });\r\n\r\n    const classNames = this._classNames;\r\n    const IconComponent = useFastIcons ? FontIcon : Icon;\r\n\r\n    const isRTL = getRTL(theme);\r\n    return (\r\n      <FocusZone\r\n        role=\"row\"\r\n        aria-label={ariaLabel}\r\n        className={classNames.root}\r\n        componentRef={this._rootComponent}\r\n        elementRef={this._rootElement}\r\n        onMouseMove={this._onRootMouseMove}\r\n        data-automationid=\"DetailsHeader\"\r\n        direction={FocusZoneDirection.horizontal}\r\n      >\r\n        {showCheckbox\r\n          ? [\r\n              <div\r\n                key=\"__checkbox\"\r\n                className={classNames.cellIsCheck}\r\n                aria-labelledby={`${this._id}-check`}\r\n                onClick={!isCheckboxHidden ? this._onSelectAllClicked : undefined}\r\n                aria-colindex={1}\r\n                role={'columnheader'}\r\n              >\r\n                {onRenderColumnHeaderTooltip(\r\n                  {\r\n                    hostClassName: classNames.checkTooltip,\r\n                    id: `${this._id}-checkTooltip`,\r\n                    setAriaDescribedBy: false,\r\n                    content: ariaLabelForSelectAllCheckbox,\r\n                    children: (\r\n                      <DetailsRowCheck\r\n                        id={`${this._id}-check`}\r\n                        aria-label={\r\n                          selectionMode === SelectionMode.multiple\r\n                            ? ariaLabelForSelectAllCheckbox\r\n                            : ariaLabelForSelectionColumn\r\n                        }\r\n                        data-is-focusable={!isCheckboxHidden || undefined}\r\n                        isHeader={true}\r\n                        selected={isAllSelected}\r\n                        anySelected={false}\r\n                        canSelect={!isCheckboxHidden}\r\n                        className={classNames.check}\r\n                        onRenderDetailsCheckbox={onRenderDetailsCheckbox}\r\n                        useFastIcons={useFastIcons}\r\n                        isVisible={isCheckboxAlwaysVisible}\r\n                      />\r\n                    ),\r\n                  },\r\n                  this._onRenderColumnHeaderTooltip,\r\n                )}\r\n              </div>,\r\n              !this.props.onRenderColumnHeaderTooltip ? (\r\n                ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (\r\n                  <label\r\n                    key=\"__checkboxLabel\"\r\n                    id={`${this._id}-checkTooltip`}\r\n                    className={classNames.accessibleLabel}\r\n                    aria-hidden={true}\r\n                  >\r\n                    {ariaLabelForSelectAllCheckbox}\r\n                  </label>\r\n                ) : ariaLabelForSelectionColumn && isCheckboxHidden ? (\r\n                  <label\r\n                    key=\"__checkboxLabel\"\r\n                    id={`${this._id}-checkTooltip`}\r\n                    className={classNames.accessibleLabel}\r\n                    aria-hidden={true}\r\n                  >\r\n                    {ariaLabelForSelectionColumn}\r\n                  </label>\r\n                ) : null\r\n              ) : null,\r\n            ]\r\n          : null}\r\n        {groupNestingDepth! > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible ? (\r\n          <div\r\n            className={classNames.cellIsGroupExpander}\r\n            onClick={this._onToggleCollapseAll}\r\n            data-is-focusable={true}\r\n            aria-label={ariaLabelForToggleAllGroupsButton}\r\n            aria-expanded={!isAllCollapsed}\r\n            role=\"columnheader\"\r\n          >\r\n            <IconComponent\r\n              className={classNames.collapseButton}\r\n              iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'}\r\n            />\r\n          </div>\r\n        ) : null}\r\n        <GroupSpacer indentWidth={indentWidth} role=\"gridcell\" count={groupNestingDepth! - 1} />\r\n        {columns.map((column: IColumn, columnIndex: number) => {\r\n          const _isDraggable = columnReorderProps\r\n            ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd\r\n            : false;\r\n          return [\r\n            columnReorderProps &&\r\n              (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&\r\n              this._renderDropHint(columnIndex),\r\n            <DetailsColumn\r\n              column={column}\r\n              styles={column.styles}\r\n              key={column.key}\r\n              columnIndex={(showCheckbox ? 2 : 1) + columnIndex}\r\n              parentId={this._id}\r\n              isDraggable={_isDraggable}\r\n              updateDragInfo={this._updateDragInfo}\r\n              dragDropHelper={this._dragDropHelper}\r\n              onColumnClick={onColumnClick}\r\n              onColumnContextMenu={onColumnContextMenu}\r\n              // Do not render tooltips by default, but allow for override via props.\r\n              onRenderColumnHeaderTooltip={this.props.onRenderColumnHeaderTooltip}\r\n              isDropped={this._onDropIndexInfo.targetIndex === columnIndex}\r\n              cellStyleProps={this.props.cellStyleProps}\r\n              useFastIcons={useFastIcons}\r\n            />,\r\n            this._renderColumnDivider(columnIndex),\r\n          ];\r\n        })}\r\n        {columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length)}\r\n        {isSizing && (\r\n          <Layer>\r\n            <div\r\n              className={classNames.sizingOverlay}\r\n              onMouseMove={this._onSizerMouseMove}\r\n              onMouseUp={this._onSizerMouseUp}\r\n            />\r\n          </Layer>\r\n        )}\r\n      </FocusZone>\r\n    );\r\n  }\r\n\r\n  /** Set focus to the active thing in the focus area. */\r\n  public focus(): boolean {\r\n    return !!this._rootComponent.current?.focus();\r\n  }\r\n\r\n  /**\r\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\r\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\r\n   * (because drag/drop handling will only be set up if reorder props are given).\r\n   */\r\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\r\n    const { columnReorderOptions, columnReorderProps } = this.props;\r\n    return columnReorderProps || (columnReorderOptions && { ...columnReorderOptions, onColumnDragEnd: undefined });\r\n  }\r\n\r\n  private _getHeaderDragDropOptions(): IDragDropOptions {\r\n    const options = {\r\n      selectionIndex: 1,\r\n      context: { data: this, index: 0 },\r\n      canDrag: () => false,\r\n      canDrop: () => true,\r\n      onDragStart: () => undefined,\r\n      updateDropState: this._updateDroppingState,\r\n      onDrop: this._onDrop,\r\n      onDragEnd: () => undefined,\r\n      onDragOver: this._onDragOver,\r\n    };\r\n    return options;\r\n  }\r\n\r\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\r\n    if (this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\r\n      this._resetDropHints();\r\n    }\r\n  };\r\n\r\n  private _isValidCurrentDropHintIndex() {\r\n    return this._currentDropHintIndex >= 0;\r\n  }\r\n\r\n  private _onDragOver = (item: any, event: DragEvent): void => {\r\n    if (this._draggedColumnIndex >= 0) {\r\n      event.stopPropagation();\r\n      this._computeDropHintToBeShown(event.clientX);\r\n    }\r\n  };\r\n\r\n  private _onDrop = (item?: any, event?: DragEvent): void => {\r\n    // Safe to assume this is defined since we're handling a drop event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n\r\n    // Target index will not get changed if draggeditem is after target item.\r\n    if (this._draggedColumnIndex >= 0 && event) {\r\n      const targetIndex =\r\n        this._draggedColumnIndex > this._currentDropHintIndex\r\n          ? this._currentDropHintIndex\r\n          : this._currentDropHintIndex - 1;\r\n      const isValidDrop = this._isValidCurrentDropHintIndex();\r\n      event.stopPropagation();\r\n      if (isValidDrop) {\r\n        this._onDropIndexInfo.sourceIndex = this._draggedColumnIndex;\r\n        this._onDropIndexInfo.targetIndex = targetIndex;\r\n\r\n        if (columnReorderProps.onColumnDrop) {\r\n          const dragDropDetails: IColumnDragDropDetails = {\r\n            draggedIndex: this._draggedColumnIndex,\r\n            targetIndex: targetIndex,\r\n          };\r\n          columnReorderProps.onColumnDrop(dragDropDetails);\r\n          /* eslint-disable deprecation/deprecation */\r\n        } else if (columnReorderProps.handleColumnReorder) {\r\n          columnReorderProps.handleColumnReorder(this._draggedColumnIndex, targetIndex);\r\n          /* eslint-enable deprecation/deprecation */\r\n        }\r\n      }\r\n    }\r\n\r\n    this._resetDropHints();\r\n    this._dropHintDetails = {};\r\n    this._draggedColumnIndex = -1;\r\n  };\r\n\r\n  /**\r\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\r\n   */\r\n  private _isCheckboxColumnHidden(): boolean {\r\n    const { selectionMode, checkboxVisibility } = this.props;\r\n\r\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\r\n  }\r\n\r\n  private _updateDragInfo = (props: { itemIndex: number }, event?: MouseEvent) => {\r\n    // Safe to assume this is defined since we're handling a drag event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n    const itemIndex = props.itemIndex;\r\n    if (itemIndex >= 0) {\r\n      // Column index is set based on the checkbox\r\n      this._draggedColumnIndex = this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\r\n      this._getDropHintPositions();\r\n      if (columnReorderProps.onColumnDragStart) {\r\n        columnReorderProps.onColumnDragStart(true);\r\n      }\r\n    } else if (event && this._draggedColumnIndex >= 0) {\r\n      this._resetDropHints();\r\n      this._draggedColumnIndex = -1;\r\n      this._dropHintDetails = {};\r\n      if (columnReorderProps.onColumnDragEnd) {\r\n        const columnDragEndLocation = this._isEventOnHeader(event);\r\n        columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);\r\n      }\r\n    }\r\n  };\r\n\r\n  private _resetDropHints(): void {\r\n    if (this._currentDropHintIndex >= 0) {\r\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\r\n      this._currentDropHintIndex = -1;\r\n    }\r\n  }\r\n\r\n  private _updateDropHintElement(element: HTMLElement, displayProperty: string) {\r\n    (element.childNodes[1] as HTMLElement).style.display = displayProperty;\r\n    (element.childNodes[0] as HTMLElement).style.display = displayProperty;\r\n  }\r\n\r\n  private _getDropHintPositions = (): void => {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    // Safe to assume this is defined since we're handling a drag/drop event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n    let prevX = 0;\r\n    let prevMid = 0;\r\n    let prevRef: HTMLElement;\r\n    const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\r\n    const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\r\n\r\n    for (let i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\r\n      if (this._rootElement.current) {\r\n        const dropHintElement = this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0] as HTMLElement;\r\n        if (dropHintElement) {\r\n          if (i === frozenColumnCountFromStart) {\r\n            prevX = dropHintElement.offsetLeft;\r\n            prevMid = dropHintElement.offsetLeft;\r\n            prevRef = dropHintElement;\r\n          } else {\r\n            const newMid = (dropHintElement.offsetLeft + prevX!) / 2;\r\n            this._dropHintDetails[i - 1] = {\r\n              originX: prevX,\r\n              startX: prevMid!,\r\n              endX: newMid,\r\n              dropHintElementRef: prevRef!,\r\n            };\r\n            prevMid = newMid;\r\n            prevRef = dropHintElement;\r\n            prevX = dropHintElement.offsetLeft;\r\n            if (i === columns.length - frozenColumnCountFromEnd) {\r\n              this._dropHintDetails[i] = {\r\n                originX: prevX,\r\n                startX: prevMid!,\r\n                endX: dropHintElement.offsetLeft,\r\n                dropHintElementRef: prevRef,\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\r\n   */\r\n  private _computeDropHintToBeShown = (clientX: number): void => {\r\n    const isRtl = getRTL(this.props.theme);\r\n    if (this._rootElement.current) {\r\n      const clientRect = this._rootElement.current.getBoundingClientRect();\r\n      const headerOriginX = clientRect.left;\r\n      const eventXRelativePosition = clientX - headerOriginX;\r\n      const currentDropHintIndex = this._currentDropHintIndex;\r\n      if (this._isValidCurrentDropHintIndex()) {\r\n        if (\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex!].startX,\r\n            this._dropHintDetails[currentDropHintIndex!].endX,\r\n          )\r\n        ) {\r\n          return;\r\n        }\r\n      }\r\n      const { columns = NO_COLUMNS } = this.props;\r\n      // Safe to assume this is defined since we're handling a drag/drop event\r\n      const columnReorderProps = this._getColumnReorderProps()!;\r\n      const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\r\n      const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\r\n\r\n      const currentIndex: number = frozenColumnCountFromStart;\r\n      const lastValidColumn = columns.length - frozenColumnCountFromEnd;\r\n      let indexToUpdate = -1;\r\n      if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[currentIndex].endX)) {\r\n        indexToUpdate = currentIndex;\r\n      } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[lastValidColumn].startX)) {\r\n        indexToUpdate = lastValidColumn;\r\n      } else if (this._isValidCurrentDropHintIndex()) {\r\n        if (\r\n          this._dropHintDetails[currentDropHintIndex! + 1] &&\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex! + 1].startX,\r\n            this._dropHintDetails[currentDropHintIndex! + 1].endX,\r\n          )\r\n        ) {\r\n          indexToUpdate = currentDropHintIndex! + 1;\r\n        } else if (\r\n          this._dropHintDetails[currentDropHintIndex! - 1] &&\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex! - 1].startX,\r\n            this._dropHintDetails[currentDropHintIndex! - 1].endX,\r\n          )\r\n        ) {\r\n          indexToUpdate = currentDropHintIndex! - 1;\r\n        }\r\n      }\r\n      if (indexToUpdate === -1) {\r\n        let startIndex = frozenColumnCountFromStart;\r\n        let endIndex = lastValidColumn;\r\n        while (startIndex < endIndex) {\r\n          const middleIndex = Math.ceil((endIndex + startIndex!) / 2);\r\n          if (\r\n            _liesBetween(\r\n              isRtl,\r\n              eventXRelativePosition,\r\n              this._dropHintDetails[middleIndex].startX,\r\n              this._dropHintDetails[middleIndex].endX,\r\n            )\r\n          ) {\r\n            indexToUpdate = middleIndex;\r\n            break;\r\n          } else if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\r\n            endIndex = middleIndex;\r\n          } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\r\n            startIndex = middleIndex;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (indexToUpdate === this._draggedColumnIndex || indexToUpdate === this._draggedColumnIndex + 1) {\r\n        if (this._isValidCurrentDropHintIndex()) {\r\n          this._resetDropHints();\r\n        }\r\n      } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\r\n        this._resetDropHints();\r\n        this._updateDropHintElement(this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\r\n        this._currentDropHintIndex = indexToUpdate;\r\n      }\r\n    }\r\n  };\r\n\r\n  private _isEventOnHeader(event: MouseEvent): ColumnDragEndLocation | undefined {\r\n    if (this._rootElement.current) {\r\n      const clientRect = this._rootElement.current.getBoundingClientRect();\r\n      if (\r\n        event.clientX > clientRect.left &&\r\n        event.clientX < clientRect.right &&\r\n        event.clientY > clientRect.top &&\r\n        event.clientY < clientRect.bottom\r\n      ) {\r\n        return ColumnDragEndLocation.header;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _renderColumnSizer = ({ columnIndex }: IDetailsColumnProps): JSX.Element | null => {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    const column = columns[columnIndex];\r\n    const { columnResizeDetails } = this.state;\r\n    const classNames = this._classNames;\r\n\r\n    return column.isResizable ? (\r\n      <div\r\n        key={`${column.key}_sizer`}\r\n        aria-hidden={true}\r\n        role=\"button\"\r\n        data-is-focusable={false}\r\n        onClick={_stopPropagation}\r\n        data-sizer-index={columnIndex}\r\n        onBlur={this._onSizerBlur}\r\n        className={css(\r\n          classNames.cellSizer,\r\n          columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd,\r\n          {\r\n            [classNames.cellIsResizing]: columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,\r\n          },\r\n        )}\r\n        onDoubleClick={this._onSizerDoubleClick.bind(this, columnIndex)}\r\n      />\r\n    ) : null;\r\n  };\r\n\r\n  private _renderColumnDivider(columnIndex: number): JSX.Element | null {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    const column = columns[columnIndex];\r\n    const { onRenderDivider } = column;\r\n    return onRenderDivider\r\n      ? onRenderDivider({ column, columnIndex }, this._renderColumnSizer)\r\n      : this._renderColumnSizer({ column, columnIndex });\r\n  }\r\n\r\n  private _renderDropHint(dropHintIndex: number): JSX.Element {\r\n    const classNames = this._classNames;\r\n    const IconComponent = this.props.useFastIcons ? FontIcon : Icon;\r\n    return (\r\n      <div key={'dropHintKey'} className={classNames.dropHintStyle} id={`columnDropHint_${dropHintIndex}`}>\r\n        <div\r\n          role=\"presentation\"\r\n          key={`dropHintCircleKey`}\r\n          className={classNames.dropHintCaretStyle}\r\n          data-is-focusable={false}\r\n          data-sizer-index={dropHintIndex}\r\n          aria-hidden={true}\r\n        >\r\n          <IconComponent iconName={'CircleShapeSolid'} />\r\n        </div>\r\n        <div\r\n          key={`dropHintLineKey`}\r\n          aria-hidden={true}\r\n          data-is-focusable={false}\r\n          data-sizer-index={dropHintIndex}\r\n          className={classNames.dropHintLineStyle}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: ITooltipHostProps): JSX.Element => {\r\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\r\n  };\r\n\r\n  /**\r\n   * double click on the column sizer will auto ajust column width\r\n   * to fit the longest content among current rendered rows.\r\n   *\r\n   * @param columnIndex - index of the column user double clicked\r\n   * @param ev - mouse double click event\r\n   */\r\n  private _onSizerDoubleClick(columnIndex: number, ev: React.MouseEvent<HTMLElement>): void {\r\n    const { onColumnAutoResized, columns = NO_COLUMNS } = this.props;\r\n    if (onColumnAutoResized) {\r\n      onColumnAutoResized(columns[columnIndex], columnIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the select all toggle is clicked.\r\n   */\r\n  private _onSelectAllClicked = (): void => {\r\n    const { selection } = this.props;\r\n\r\n    if (selection) {\r\n      selection.toggleAllSelected();\r\n    }\r\n  };\r\n\r\n  private _onRootMouseDown = (ev: MouseEvent): void => {\r\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\r\n    const columnIndex = Number(columnIndexAttr);\r\n    const { columns = NO_COLUMNS } = this.props;\r\n\r\n    if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\r\n      // Ignore anything except the primary button.\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      columnResizeDetails: {\r\n        columnIndex: columnIndex,\r\n        columnMinWidth: columns[columnIndex].calculatedWidth!,\r\n        originX: ev.clientX,\r\n      },\r\n    });\r\n\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  };\r\n\r\n  private _onRootMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const { columnResizeDetails, isSizing } = this.state;\r\n\r\n    if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\r\n      this.setState({ isSizing: true });\r\n    }\r\n  };\r\n\r\n  private _onRootKeyDown = (ev: KeyboardEvent): void => {\r\n    const { columnResizeDetails, isSizing } = this.state;\r\n    const { columns = NO_COLUMNS, onColumnResized } = this.props;\r\n\r\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\r\n\r\n    if (!columnIndexAttr || isSizing) {\r\n      return;\r\n    }\r\n\r\n    const columnIndex = Number(columnIndexAttr);\r\n\r\n    if (!columnResizeDetails) {\r\n      // eslint-disable-next-line deprecation/deprecation\r\n      if (ev.which === KeyCodes.enter) {\r\n        this.setState({\r\n          columnResizeDetails: {\r\n            columnIndex: columnIndex,\r\n            columnMinWidth: columns[columnIndex].calculatedWidth!,\r\n          },\r\n        });\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n      }\r\n    } else {\r\n      let increment: number | undefined;\r\n\r\n      // eslint-disable-next-line deprecation/deprecation\r\n      if (ev.which === KeyCodes.enter) {\r\n        this.setState({\r\n          columnResizeDetails: undefined,\r\n        });\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n        // eslint-disable-next-line deprecation/deprecation\r\n      } else if (ev.which === KeyCodes.left) {\r\n        increment = getRTL(this.props.theme) ? 1 : -1;\r\n        // eslint-disable-next-line deprecation/deprecation\r\n      } else if (ev.which === KeyCodes.right) {\r\n        increment = getRTL(this.props.theme) ? -1 : 1;\r\n      }\r\n\r\n      if (increment) {\r\n        if (!ev.shiftKey) {\r\n          increment *= 10;\r\n        }\r\n\r\n        this.setState({\r\n          columnResizeDetails: {\r\n            ...columnResizeDetails,\r\n            columnMinWidth: columnResizeDetails.columnMinWidth + increment,\r\n          },\r\n        });\r\n\r\n        if (onColumnResized) {\r\n          onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\r\n        }\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * mouse move event handler in the header\r\n   * it will set isSizing state to true when user clicked on the sizer and move the mouse.\r\n   *\r\n   * @param ev - mouse move event\r\n   */\r\n  private _onSizerMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const {\r\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\r\n      // but firefox doesn't support it, so we set the default value when it is not defined.\r\n      buttons,\r\n    } = ev;\r\n    const { onColumnIsSizingChanged, onColumnResized, columns = NO_COLUMNS } = this.props;\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\r\n      // cancel mouse down event and return early when the primary button is not pressed\r\n      this._onSizerMouseUp(ev);\r\n      return;\r\n    }\r\n\r\n    if (ev.clientX !== columnResizeDetails!.originX) {\r\n      if (onColumnIsSizingChanged) {\r\n        onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], true);\r\n      }\r\n    }\r\n\r\n    if (onColumnResized) {\r\n      let movement = ev.clientX - columnResizeDetails!.originX!;\r\n\r\n      if (getRTL(this.props.theme)) {\r\n        movement = -movement;\r\n      }\r\n\r\n      onColumnResized(\r\n        columns[columnResizeDetails!.columnIndex],\r\n        columnResizeDetails!.columnMinWidth + movement,\r\n        columnResizeDetails!.columnIndex,\r\n      );\r\n    }\r\n  };\r\n\r\n  private _onSizerBlur = (ev: React.FocusEvent<HTMLElement>): void => {\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    if (columnResizeDetails) {\r\n      this.setState({\r\n        columnResizeDetails: undefined,\r\n        isSizing: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * mouse up event handler in the header\r\n   * clear the resize related state.\r\n   * This is to ensure we can catch double click event\r\n   *\r\n   * @param ev - mouse up event\r\n   */\r\n  private _onSizerMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const { columns = NO_COLUMNS, onColumnIsSizingChanged } = this.props;\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    this.setState({\r\n      columnResizeDetails: undefined,\r\n      isSizing: false,\r\n    });\r\n\r\n    if (onColumnIsSizingChanged) {\r\n      onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], false);\r\n    }\r\n  };\r\n\r\n  private _onSelectionChanged(): void {\r\n    const isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\r\n\r\n    if (this.state.isAllSelected !== isAllSelected) {\r\n      this.setState({\r\n        isAllSelected: isAllSelected,\r\n      });\r\n    }\r\n  }\r\n\r\n  private _onToggleCollapseAll = (): void => {\r\n    const { onToggleCollapseAll } = this.props;\r\n    const newCollapsed = !this.state.isAllCollapsed;\r\n    this.setState({\r\n      isAllCollapsed: newCollapsed,\r\n    });\r\n    if (onToggleCollapseAll) {\r\n      onToggleCollapseAll(newCollapsed);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _liesBetween(rtl: boolean, target: number, left: number, right: number): boolean {\r\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\r\n}\r\nfunction _isBefore(rtl: boolean, a: number, b: number): boolean {\r\n  return rtl ? a >= b : a <= b;\r\n}\r\nfunction _isAfter(rtl: boolean, a: number, b: number): boolean {\r\n  return rtl ? a <= b : a >= b;\r\n}\r\n\r\nfunction _stopPropagation(ev: React.MouseEvent<HTMLElement>): void {\r\n  ev.stopPropagation();\r\n}\r\n","import * as React from 'react';\r\nimport { styled } from '../../Utilities';\r\nimport {\r\n  IDetailsHeaderProps,\r\n  IDetailsHeaderBaseProps,\r\n  IDetailsHeaderStyleProps,\r\n  IDetailsHeaderStyles,\r\n} from './DetailsHeader.types';\r\nimport { DetailsHeaderBase } from './DetailsHeader.base';\r\nimport { getStyles } from './DetailsHeader.styles';\r\n\r\nexport { IDetailsHeaderProps, IDetailsHeaderBaseProps };\r\n\r\nexport const DetailsHeader: React.FunctionComponent<IDetailsHeaderBaseProps> = styled<\r\n  IDetailsHeaderBaseProps,\r\n  IDetailsHeaderStyleProps,\r\n  IDetailsHeaderStyles\r\n>(DetailsHeaderBase, getStyles, undefined, { scope: 'DetailsHeader' });\r\n","import * as React from 'react';\nimport { IColumn } from './DetailsList.types';\nimport { css } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps> = props => {\n  const {\n    columns,\n    columnStartIndex,\n    rowClassNames,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    item,\n    itemIndex,\n    onRenderItemColumn,\n    getCellValueKey,\n    cellsByColumn,\n    enableUpdateAnimations,\n    rowHeaderId,\n  } = props;\n\n  const cellValueKeysRef = React.useRef<{\n    [columnKey: string]: string | undefined;\n  }>();\n\n  const cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n\n  return (\n    <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n      {columns.map((column, columnIndex) => {\n        const width: string | number =\n          typeof column.calculatedWidth === 'undefined'\n            ? 'auto'\n            : column.calculatedWidth +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n        const { onRender = onRenderItemColumn, getValueKey = getCellValueKey } = column;\n        const cellContentsRender =\n          cellsByColumn && column.key in cellsByColumn\n            ? cellsByColumn[column.key]\n            : onRender\n            ? onRender(item, itemIndex, column)\n            : getCellText(item, column);\n\n        const previousValueKey = cellValueKeys[column.key];\n\n        const cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n\n        let showAnimation = false;\n\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n          showAnimation = true;\n        }\n\n        cellValueKeys[column.key] = cellValueKey;\n\n        // generate a key that auto-dirties when content changes, to force the container to re-render,\n        // to trigger animation\n        const key = `${column.key}${cellValueKey !== undefined ? `-${cellValueKey}` : ''}`;\n        return (\n          <div\n            key={key}\n            id={column.isRowHeader ? rowHeaderId : undefined}\n            role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n            aria-readonly\n            aria-colindex={columnIndex + columnStartIndex + 1}\n            className={css(\n              column.className,\n              column.isMultiline && rowClassNames.isMultiline,\n              column.isRowHeader && rowClassNames.isRowHeader,\n              rowClassNames.cell,\n              column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n              showAnimation && rowClassNames.cellAnimation,\n            )}\n            style={{ width }}\n            data-automationid=\"DetailsRowCell\"\n            data-automation-key={column.key}\n          >\n            {cellContentsRender}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import * as React from 'react';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  IDisposable,\n  css,\n  shallowCompare,\n  getNativeProps,\n  divProperties,\n} from '../../Utilities';\nimport { IColumn, CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection, IFocusZone } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\nimport { IDetailsRowBaseProps } from './DetailsRow.types';\nimport { IDetailsRowCheckProps } from './DetailsRowCheck.types';\nimport { IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport { classNamesFunction, getId } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { IProcessedStyleSet } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowStyleProps, IDetailsRowStyles>();\n\nexport interface IDetailsRowSelectionState {\n  isSelected: boolean;\n  isSelectionModal: boolean;\n}\n\nexport interface IDetailsRowState {\n  selectionState: IDetailsRowSelectionState;\n  columnMeasureInfo?: {\n    index: number;\n    column: IColumn;\n    onMeasureDone: (measuredWidth: number) => void;\n  };\n  isDropping?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsRowBase extends React.Component<IDetailsRowBaseProps, IDetailsRowState> {\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLElement>();\n  private _cellMeasurer = React.createRef<HTMLSpanElement>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _droppingClassNames: string;\n  /** Whether this.props.onDidMount has been called */\n  private _onDidMountCalled: boolean;\n  private _dragDropSubscription: IDisposable;\n\n  private _classNames: IProcessedStyleSet<IDetailsRowStyles>;\n  private _rowClassNames: IDetailsRowFieldsProps['rowClassNames'];\n  private _ariaRowDescriptionId: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsRowBaseProps,\n    previousState: IDetailsRowState,\n  ): IDetailsRowState {\n    return {\n      ...previousState,\n      selectionState: getSelectionState(nextProps),\n    };\n  }\n\n  constructor(props: IDetailsRowBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false,\n    };\n\n    this._droppingClassNames = '';\n  }\n  public componentDidMount(): void {\n    const { dragDropHelper, selection, item, onDidMount } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getRowDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IDetailsRowBaseProps) {\n    const state = this.state;\n    const { item, onDidMount } = this.props;\n    const { columnMeasureInfo } = state;\n\n    if (\n      this.props.itemIndex !== previousProps.itemIndex ||\n      this.props.item !== previousProps.item ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getRowDragDropOptions(),\n        );\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      const newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n\n      this.setState({\n        columnMeasureInfo: undefined,\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { item, onWillUnmount } = this.props;\n\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  }\n\n  public shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean {\n    if (this.props.useReducedRowRenderer) {\n      const newSelectionState = getSelectionState(nextProps);\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      columns = NO_COLUMNS,\n      dragDropEvents,\n      item,\n      itemIndex,\n      flatIndexOffset = 2,\n      id,\n      onRenderCheck = this._onRenderCheck,\n      onRenderDetailsCheckbox,\n      onRenderItemColumn,\n      getCellValueKey,\n      selectionMode,\n      rowWidth = 0,\n      checkboxVisibility,\n      getRowAriaLabel,\n      getRowAriaDescription,\n      getRowAriaDescribedBy,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      rowFieldsAs: RowFields = DetailsRowFields,\n      selection,\n      indentWidth,\n      enableUpdateAnimations,\n      compact,\n      theme,\n      styles,\n      cellsByColumn,\n      groupNestingDepth,\n      useFastIcons = true,\n      cellStyleProps,\n      disabled = false,\n    } = this.props;\n    const { columnMeasureInfo, isDropping } = this.state;\n    const { isSelected = false, isSelectionModal = false } = this.state.selectionState;\n    const isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    const droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    const ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    const ariaRowDescription = getRowAriaDescription ? getRowAriaDescription(item) : undefined;\n    const ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    const canSelect = !!selection && selection.canSelectItem(item, itemIndex) && !disabled;\n    const isContentUnselectable = selectionMode === SelectionMode.multiple;\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    const ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n\n    this._classNames = {\n      ...this._classNames,\n      ...getClassNames(styles, {\n        theme: theme!,\n        isSelected,\n        canSelect: !isContentUnselectable,\n        anySelected: isSelectionModal,\n        checkboxCellClassName,\n        droppingClassName,\n        className,\n        compact,\n        enableUpdateAnimations,\n        cellStyleProps,\n        disabled,\n      }),\n    };\n\n    const rowClassNames: IDetailsRowFieldsProps['rowClassNames'] = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields,\n    };\n\n    // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    const rowFields = (\n      <RowFields\n        rowClassNames={this._rowClassNames}\n        rowHeaderId={`${id}-header`}\n        cellsByColumn={cellsByColumn}\n        columns={columns}\n        item={item}\n        itemIndex={itemIndex}\n        columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0)}\n        onRenderItemColumn={onRenderItemColumn}\n        getCellValueKey={getCellValueKey}\n        enableUpdateAnimations={enableUpdateAnimations}\n        cellStyleProps={cellStyleProps}\n      />\n    );\n\n    const defaultRole = 'row';\n    const role = this.props.role ? this.props.role : defaultRole;\n    this._ariaRowDescriptionId = getId('DetailsRow-description');\n\n    return (\n      <FocusZone\n        data-is-focusable={true}\n        {...getNativeProps(this.props, divProperties)}\n        {...(typeof isDraggable === 'boolean'\n          ? {\n              'data-is-draggable': isDraggable, // This data attribute is used by some host applications.\n              draggable: isDraggable,\n            }\n          : {})}\n        direction={FocusZoneDirection.horizontal}\n        elementRef={this._root}\n        componentRef={this._focusZone}\n        role={role}\n        aria-label={ariaLabel}\n        aria-disabled={disabled || undefined}\n        aria-describedby={ariaRowDescription ? this._ariaRowDescriptionId : ariaDescribedBy}\n        className={this._classNames.root}\n        data-selection-index={itemIndex}\n        data-selection-touch-invoke={true}\n        data-selection-disabled={disabled || undefined}\n        data-item-index={itemIndex}\n        aria-rowindex={groupNestingDepth ? undefined : itemIndex + flatIndexOffset}\n        aria-level={(groupNestingDepth && groupNestingDepth + 1) || undefined}\n        data-automationid=\"DetailsRow\"\n        style={{ minWidth: rowWidth }}\n        aria-selected={ariaSelected}\n        allowFocusRoot={true}\n      >\n        {ariaRowDescription ? (\n          <span key=\"description\" role=\"presentation\" hidden={true} id={this._ariaRowDescriptionId}>\n            {ariaRowDescription}\n          </span>\n        ) : null}\n        {showCheckbox && (\n          <div role=\"gridcell\" aria-colindex={1} data-selection-toggle={true} className={this._classNames.checkCell}>\n            {onRenderCheck({\n              id: id ? `${id}-checkbox` : undefined,\n              selected: isSelected,\n              anySelected: isSelectionModal,\n              'aria-label': checkButtonAriaLabel,\n              'aria-labelledby': id ? `${id}-checkbox ${id}-header` : undefined,\n              canSelect,\n              compact,\n              className: this._classNames.check,\n              theme,\n              isVisible: checkboxVisibility === CheckboxVisibility.always,\n              onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n              useFastIcons,\n            })}\n          </div>\n        )}\n\n        <GroupSpacer\n          indentWidth={indentWidth}\n          role=\"gridcell\"\n          count={groupNestingDepth! - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0)}\n        />\n\n        {item && rowFields}\n        {columnMeasureInfo && (\n          <span\n            role=\"presentation\"\n            className={css(this._classNames.cellMeasurer, this._classNames.cell)}\n            ref={this._cellMeasurer}\n          >\n            <RowFields\n              rowClassNames={this._rowClassNames}\n              rowHeaderId={`${id}-header`}\n              columns={[columnMeasureInfo.column]}\n              item={item}\n              itemIndex={itemIndex}\n              columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length}\n              onRenderItemColumn={onRenderItemColumn}\n              getCellValueKey={getCellValueKey}\n            />\n          </span>\n        )}\n\n        <span\n          role=\"checkbox\"\n          className={this._classNames.checkCover}\n          aria-checked={isSelected}\n          data-selection-toggle={true}\n        />\n      </FocusZone>\n    );\n  }\n\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n  public measureCell(index: number, onMeasureDone: (width: number) => void): void {\n    const { columns = NO_COLUMNS } = this.props;\n    const column: IColumn = { ...columns[index] };\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n\n    delete column.calculatedWidth;\n\n    this.setState({\n      columnMeasureInfo: {\n        index,\n        column,\n        onMeasureDone,\n      },\n    });\n  }\n\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    return !!this._focusZone.current?.focus(forceIntoFirstElement);\n  }\n\n  protected _onRenderCheck(props: IDetailsRowCheckProps) {\n    return <DetailsRowCheck {...props} />;\n  }\n\n  private _onSelectionChanged = (): void => {\n    const selectionState = getSelectionState(this.props);\n\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\n      this.setState({\n        selectionState: selectionState,\n      });\n    }\n  };\n\n  private _getRowDragDropOptions(): IDragDropOptions {\n    const { item, itemIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: { data: item, index: itemIndex },\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents!.onDrop,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n\n    return options;\n  }\n\n  /**\n   * update isDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * when change to true, that means drag enter. we will add default dropping class name\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n   *\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\n   *\n   * @param newValue - New isDropping state value\n   * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, item } = this.props;\n\n    if (!newValue) {\n      if (dragDropEvents!.onDragLeave) {\n        dragDropEvents!.onDragLeave(item, event);\n      }\n    } else if (dragDropEvents!.onDragEnter) {\n      this._droppingClassNames = dragDropEvents!.onDragEnter(item, event);\n    }\n\n    if (isDropping !== newValue) {\n      this.setState({ isDropping: newValue });\n    }\n  };\n}\n\nfunction getSelectionState(props: IDetailsRowBaseProps): IDetailsRowSelectionState {\n  const { itemIndex, selection } = props;\n\n  return {\n    isSelected: !!selection?.isIndexSelected(itemIndex),\n    isSelectionModal: !!selection?.isModal?.(),\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IDetailsRowProps, IDetailsRowBaseProps, IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport { DetailsRowBase } from './DetailsRow.base';\nimport { getDetailsRowStyles } from './DetailsRow.styles';\n\nexport { IDetailsRowProps, IDetailsRowBaseProps };\n\nexport const DetailsRow: React.FunctionComponent<IDetailsRowBaseProps> = styled<\n  IDetailsRowBaseProps,\n  IDetailsRowStyleProps,\n  IDetailsRowStyles\n>(DetailsRowBase, getDetailsRowStyles, undefined, {\n  scope: 'DetailsRow',\n});\n","import * as React from 'react';\nimport { ITheme, IStyle } from '../../Styling';\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Spinner}\n */\nexport interface ISpinner {}\n\n/**\n * Spinner component props.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the ISpinner interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ISpinner>;\n\n  /**\n   * Deprecated and will be removed at \\>= 2.0.0. Use `SpinnerSize` instead.\n   * @deprecated Use `SpinnerSize` instead.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  type?: SpinnerType;\n\n  /**\n   * The size of Spinner to render. \\{ extraSmall, small, medium, large \\}\n   * @defaultvalue SpinnerType.medium\n   */\n  size?: SpinnerSize;\n\n  /**\n   * The label to show next to the Spinner. Label updates will be announced to the screen readers.\n   * Use ariaLive to control politeness level.\n   */\n  label?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the Spinner.\n   */\n  className?: string;\n\n  /**\n   * Politeness setting for label update announcement.\n   * @defaultvalue polite\n   */\n  ariaLive?: 'assertive' | 'polite' | 'off';\n\n  /**\n   * Alternative status label for screen reader\n   */\n  ariaLabel?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>;\n\n  /**\n   * The position of the label in regards of the spinner animation.\n   * @defaultvalue SpinnerLabelPosition.bottom\n   */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Possible variations of the spinner circle size.\n * {@docCategory Spinner}\n */\nexport enum SpinnerSize {\n  /**\n   * 12px Spinner diameter\n   */\n  xSmall = 0,\n\n  /**\n   * 16px Spinner diameter\n   */\n  small = 1,\n\n  /**\n   * 20px Spinner diameter\n   */\n  medium = 2,\n\n  /**\n   * 28px Spinner diameter\n   */\n  large = 3,\n}\n\n/**\n * Possible locations of the label in regards to the spinner\n * @defaultvalue bottom\n * {@docCategory Spinner}\n */\nexport type SpinnerLabelPosition = 'top' | 'right' | 'bottom' | 'left';\n\n/**\n * Deprecated at v2.0.0, use `SpinnerSize` instead.\n * @deprecated Use `SpinnerSize` instead.\n * {@docCategory Spinner}\n */\nexport enum SpinnerType {\n  /**\n   * Deprecated and will be removed at \\>= 2.0.0. Use `SpinnerSize.medium` instead.\n   * @deprecated Use `SpinnerSize.medium` instead.\n   */\n  normal = 0,\n\n  /**\n   * Deprecated and will be removed at \\>= 2.0.0. Use `SpinnerSize.large` instead.\n   * @deprecated Use `SpinnerSize.large` instead.\n   */\n  large = 1,\n}\n\n/**\n * The props needed to construct styles.\n * This represents the simplified set of immutable things which control the class names.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyleProps {\n  /** Theme provided by High-Order Component. */\n  theme: ITheme;\n\n  /** Size of the spinner animation. */\n  size?: SpinnerSize;\n\n  /** CSS class name for the component attached to the root stylable area. */\n  className?: string;\n\n  /** Position of the label in regards to the spinner animation. */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Represents the stylable areas of the control.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyles {\n  /** Styles for the root element. Refers to the wrapper containing both the circle and the label. */\n  root?: IStyle;\n\n  /** Styles for the spinner circle animation. */\n  circle?: IStyle;\n\n  /** Styles for the label accompanying the circle. */\n  label?: IStyle;\n\n  /** Styles for the hidden helper element to aid with screen readers. */\n  screenReaderText?: IStyle;\n}\n","import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  KeyCodes,\n  elementContains,\n  findScrollableParent,\n  getParent,\n  getDocument,\n  getWindow,\n  isElementTabbable,\n  css,\n  initializeComponentRef,\n  FocusRects,\n} from '../../Utilities';\nimport { ISelection, SelectionMode, IObjectWithKey } from './interfaces';\n\n// Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\n\nconst SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\nconst SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nconst SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nconst SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\nconst SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME = 'data-selection-touch-invoke';\nconst SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\nconst SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZone {\n  /**\n   * Method to ignore subsequent focus.\n   */\n  ignoreNextFocus: () => void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneProps extends React.ClassAttributes<SelectionZone> {\n  /**\n   * Reference to the component interface.\n   */\n  componentRef?: () => void;\n  /**\n   * Required {@link ISelection} instance bound to the {@link SelectionZone}.\n   */\n  selection: ISelection;\n  /**\n   * @deprecated No longer in use, focus is now managed by {@link FocusZone}.\n   */\n  layout?: {};\n  /**\n   * The mode of Selection, where the value is one of\n   * 'none', 'single', or 'multiple'.\n   *\n   * @defaultvalue {@link SelectionMode.multiple}\n   */\n  selectionMode?: SelectionMode;\n  /**\n   * If true, selection is preserved on outer click.\n   */\n  selectionPreservedOnEmptyClick?: boolean;\n  /**\n   * If true, disables automatic selection on input elements.\n   */\n  disableAutoSelectOnInputElements?: boolean;\n  /**\n   * If true, modal selection is enabled on touch event.\n   */\n  enterModalOnTouch?: boolean;\n  /**\n   * Determines whether elements with the attribute `data-selection-touch-invoke` should be used as invocation targets\n   * for an item if the user is using touch.\n   *\n   * @defaultvalue false\n   */\n  enableTouchInvocationTarget?: boolean;\n  /**\n   * Determines if an item is selected on focus.\n   *\n   * @defaultvalue true\n   */\n  isSelectedOnFocus?: boolean;\n  /**\n   * Determines if elements within the selection zone that DO NOT have the 'data-selection-toggle' or\n   * 'data-selection-all-toggle' attribute are clickable and can alter the selection.\n   *\n   * @defaultvalue true\n   */\n  selectionClearedOnSurfaceClick?: boolean;\n  /**\n   * Optional callback for when an item is\n   * invoked via ENTER or double-click.\n   */\n  onItemInvoked?: (item?: IObjectWithKey, index?: number, ev?: Event) => void;\n  /**\n   * Optional callback for when an\n   * item's contextual menu action occurs.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n  /**\n   * Additional CSS class(es) to apply to the SelectionZone.\n   */\n  className?: string;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneState {\n  isModal: boolean | undefined;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport class SelectionZone extends React.Component<ISelectionZoneProps, ISelectionZoneState> {\n  public static defaultProps = {\n    isSelectedOnFocus: true,\n    selectionMode: SelectionMode.multiple,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _isCtrlPressed: boolean;\n  private _isShiftPressed: boolean;\n  private _isMetaPressed: boolean;\n  private _isTabPressed: boolean;\n  private _shouldHandleFocus: boolean;\n  private _shouldHandleFocusTimeoutId: number | undefined;\n  private _isTouch: boolean;\n  private _isTouchTimeoutId: number | undefined;\n\n  public static getDerivedStateFromProps(\n    nextProps: ISelectionZoneProps,\n    prevState: ISelectionZoneState,\n  ): ISelectionZoneState {\n    const isModal = nextProps.selection.isModal && nextProps.selection.isModal();\n\n    return {\n      ...prevState,\n      isModal,\n    };\n  }\n\n  constructor(props: ISelectionZoneProps) {\n    super(props);\n\n    this._events = new EventGroup(this);\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    const { selection } = this.props;\n\n    // Reflect the initial modal state of selection into the state.\n    const isModal = selection.isModal && selection.isModal();\n\n    this.state = {\n      isModal,\n    };\n  }\n\n  public componentDidMount(): void {\n    const win = getWindow(this._root.current);\n\n    // Track the latest modifier keys globally.\n    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\n    this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);\n    this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);\n\n    // Subscribe to the selection to keep modal state updated.\n    this._events.on(this.props.selection, 'change', this._onSelectionChange);\n  }\n\n  public render(): JSX.Element {\n    const { isModal } = this.state;\n\n    return (\n      <div\n        className={css('ms-SelectionZone', this.props.className, {\n          'ms-SelectionZone--modal': !!isModal,\n        })}\n        ref={this._root}\n        onKeyDown={this._onKeyDown}\n        onMouseDown={this._onMouseDown}\n        onKeyDownCapture={this._onKeyDownCapture}\n        onClick={this._onClick}\n        role=\"presentation\"\n        onDoubleClick={this._onDoubleClick}\n        onContextMenu={this._onContextMenu}\n        onMouseDownCapture={this._onMouseDownCapture}\n        onFocusCapture={this._onFocus}\n        data-selection-is-modal={isModal ? true : undefined}\n      >\n        {this.props.children}\n        <FocusRects />\n      </div>\n    );\n  }\n\n  public componentDidUpdate(previousProps: ISelectionZoneProps): void {\n    const { selection } = this.props;\n\n    if (selection !== previousProps.selection) {\n      // Whenever selection changes, update the subscripton to keep modal state updated.\n      this._events.off(previousProps.selection);\n      this._events.on(selection, 'change', this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  /**\n   * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\n   * react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has\n   * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\n   * focus event that occurs. This method does that.\n   */\n  public ignoreNextFocus = (): void => {\n    this._handleNextFocus(false);\n  };\n\n  private _onSelectionChange = (): void => {\n    const { selection } = this.props;\n\n    const isModal = selection.isModal && selection.isModal();\n\n    this.setState({\n      isModal,\n    });\n  };\n\n  private _onMouseDownCapture = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    if (document.activeElement !== target && !elementContains(document.activeElement as HTMLElement, target)) {\n      this.ignoreNextFocus();\n      return;\n    }\n\n    if (!elementContains(target, this._root.current)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n        this.ignoreNextFocus();\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  /**\n   * When we focus an item, for single/multi select scenarios, we should try to select it immediately\n   * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\n   * specially.\n   */\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (this._shouldHandleFocus && selectionMode !== SelectionMode.none) {\n      const isToggle = this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n      const itemRoot = this._findItemRoot(target);\n\n      if (!isToggle && itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (isToggleModifierPressed) {\n          // set anchor only.\n          selection.setIndexSelected(index, selection.isIndexSelected(index), true);\n          if (this.props.enterModalOnTouch && this._isTouch && selection.setModal) {\n            selection.setModal(true);\n            this._setIsTouch(false);\n          }\n        } else {\n          if (this.props.isSelectedOnFocus) {\n            this._onItemSurfaceClick(ev, index);\n          }\n        }\n      }\n    }\n\n    this._handleNextFocus(false);\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    // No-op if selection is disabled\n    if (this._isSelectionDisabled(target)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        break;\n      } else if (itemRoot) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (\n          (target === itemRoot || this._shouldAutoSelect(target)) &&\n          !this._isShiftPressed &&\n          !this._isCtrlPressed &&\n          !this._isMetaPressed\n        ) {\n          this._onInvokeMouseDown(ev, this._getItemIndex(itemRoot));\n          break;\n        } else if (\n          this.props.disableAutoSelectOnInputElements &&\n          (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')\n        ) {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onTouchStartCapture = (ev: React.TouchEvent<HTMLElement>): void => {\n    this._setIsTouch(true);\n  };\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { enableTouchInvocationTarget = false } = this.props;\n\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        if (!isSelectionDisabled) {\n          this._onToggleAllClick(ev);\n        }\n        break;\n      } else if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          if (!isSelectionDisabled) {\n            if (this._isShiftPressed) {\n              this._onItemSurfaceClick(ev, index);\n            } else {\n              this._onToggleClick(ev, index);\n            }\n          }\n          break;\n        } else if (\n          (this._isTouch &&\n            enableTouchInvocationTarget &&\n            this._hasAttribute(target, SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME)) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          // Items should be invokable even if selection is disabled.\n          this._onInvokeClick(ev, index);\n          break;\n        } else if (target === itemRoot) {\n          if (!isSelectionDisabled) {\n            this._onItemSurfaceClick(ev, index);\n          }\n          break;\n        } else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n\n    const { onItemContextMenu, selection } = this.props;\n    if (onItemContextMenu) {\n      const itemRoot = this._findItemRoot(target);\n\n      if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        this._onInvokeMouseDown(ev, index);\n\n        const skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);\n\n        // In order to keep back compat, if the value here is undefined, then we should still\n        // call preventDefault(). Only in the case where true is explicitly returned should\n        // the call be skipped.\n        if (!skipPreventDefault) {\n          ev.preventDefault();\n        }\n      }\n    }\n  };\n\n  private _isSelectionDisabled(target: HTMLElement): boolean {\n    if (this._getSelectionMode() === SelectionMode.none) {\n      return true;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\n        return true;\n      }\n      target = getParent(target) as HTMLElement;\n    }\n\n    return false;\n  }\n\n  /**\n   * In multi selection, if you double click within an item's root (but not within the invoke element or\n   * input elements), we should execute the invoke handler.\n   */\n  private _onDoubleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    const { onItemInvoked } = this.props;\n    const itemRoot = this._findItemRoot(target);\n\n    if (itemRoot && onItemInvoked && !this._isInputElement(target)) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (\n          this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          break;\n        } else if (target === itemRoot) {\n          this._onInvokeClick(ev, index);\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onKeyDownCapture = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    this._handleNextFocus(true);\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean | undefined => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    const { selection } = this.props;\n    const isSelectAllKey = ev.which === KeyCodes.a && (this._isCtrlPressed || this._isMetaPressed);\n    const isClearSelectionKey = ev.which === KeyCodes.escape;\n\n    // Ignore key downs from input elements.\n    if (this._isInputElement(target)) {\n      // A key was pressed while an item in this zone was focused.\n      return;\n    }\n\n    const selectionMode = this._getSelectionMode();\n\n    // If ctrl-a is pressed, select all (if all are not already selected.)\n    if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(true);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    // If escape is pressed, clear selection (if any are selected.)\n    if (isClearSelectionKey && selection.getSelectedCount() > 0) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(false);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    const itemRoot = this._findItemRoot(target);\n\n    // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\n    if (itemRoot) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\n          // so we can no-op for any keydowns in this case.\n          break;\n        } else if (this._shouldAutoSelect(target)) {\n          if (!isSelectionDisabled) {\n            // If the event went to an element which should trigger auto-select, select it and then let\n            // the default behavior kick in.\n            this._onInvokeMouseDown(ev, index);\n          }\n          break;\n        } else if (\n          (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) &&\n          (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT')\n        ) {\n          return false;\n        } else if (target === itemRoot) {\n          if (ev.which === KeyCodes.enter) {\n            // Items should be invokable even if selection is disabled.\n            this._onInvokeClick(ev, index);\n            ev.preventDefault();\n            return;\n          } else if (ev.which === KeyCodes.space) {\n            if (!isSelectionDisabled) {\n              this._onToggleClick(ev, index);\n            }\n            ev.preventDefault();\n            return;\n          }\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n    }\n  };\n\n  private _onToggleAllClick(ev: React.MouseEvent<HTMLElement>): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleAllSelected();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  }\n\n  private _onToggleClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    selection.setChangeEvents(false);\n\n    if (this.props.enterModalOnTouch && this._isTouch && !selection.isIndexSelected(index) && selection.setModal) {\n      selection.setModal(true);\n      this._setIsTouch(false);\n    }\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleIndexSelected(index);\n    } else if (selectionMode === SelectionMode.single) {\n      const isSelected = selection.isIndexSelected(index);\n      const isModal = selection.isModal && selection.isModal();\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, !isSelected, true);\n      if (isModal && selection.setModal) {\n        // Since the above call to setAllSelected(false) clears modal state,\n        // restore it. This occurs because the SelectionMode of the Selection\n        // may differ from the SelectionZone.\n        selection.setModal(true);\n      }\n    } else {\n      selection.setChangeEvents(true);\n      return;\n    }\n\n    selection.setChangeEvents(true);\n\n    ev.stopPropagation();\n\n    // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\n    // for checkboxes if you use a checkbox for the toggle.\n  }\n\n  private _onInvokeClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection, onItemInvoked } = this.props;\n\n    if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onItemSurfaceClick(ev: React.SyntheticEvent<HTMLElement>, index: number): void {\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      if (this._isShiftPressed && !this._isTabPressed) {\n        selection.selectToIndex(index, !isToggleModifierPressed);\n      } else if (isToggleModifierPressed) {\n        selection.toggleIndexSelected(index);\n      } else {\n        this._clearAndSelectIndex(index);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      this._clearAndSelectIndex(index);\n    }\n  }\n\n  private _onInvokeMouseDown(\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    index: number,\n  ): void {\n    const { selection } = this.props;\n\n    // Only do work if item is not selected.\n    if (selection.isIndexSelected(index)) {\n      return;\n    }\n\n    this._clearAndSelectIndex(index);\n  }\n\n  /**\n   * To avoid high startup cost of traversing the DOM on component mount,\n   * defer finding the scrollable parent until a click interaction.\n   *\n   * The styles will probably already calculated since we're running in a click handler,\n   * so this is less likely to cause layout thrashing then doing it in mount.\n   */\n  private _findScrollParentAndTryClearOnEmptyClick(ev: MouseEvent) {\n    const scrollParent = findScrollableParent(this._root.current) as HTMLElement;\n    // unbind this handler and replace binding with a binding on the actual scrollable parent\n    this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);\n\n    // If we clicked inside the scrollable parent, call through to the handler on this click.\n    if ((scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target)) || scrollParent === ev.target) {\n      this._tryClearOnEmptyClick(ev);\n    }\n  }\n\n  private _tryClearOnEmptyClick(ev: MouseEvent): void {\n    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target as HTMLElement)) {\n      this.props.selection.setAllSelected(false);\n    }\n  }\n\n  private _clearAndSelectIndex(index: number): void {\n    const { selection, selectionClearedOnSurfaceClick = true } = this.props;\n    const isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\n\n    if (!isAlreadySingleSelected && selectionClearedOnSurfaceClick) {\n      const isModal = selection.isModal && selection.isModal();\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, true, true);\n      if (isModal || (this.props.enterModalOnTouch && this._isTouch)) {\n        if (selection.setModal) {\n          selection.setModal(true);\n        }\n        if (this._isTouch) {\n          this._setIsTouch(false);\n        }\n      }\n      selection.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * We need to track the modifier key states so that when focus events occur, which do not contain\n   * modifier states in the Event object, we know how to behave.\n   */\n  private _updateModifiers(ev: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\n    this._isShiftPressed = ev.shiftKey;\n    this._isCtrlPressed = ev.ctrlKey;\n    this._isMetaPressed = ev.metaKey;\n\n    const keyCode = (ev as React.KeyboardEvent<HTMLElement>).keyCode;\n    this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;\n  }\n\n  private _findItemRoot(target: HTMLElement): HTMLElement | undefined {\n    const { selection } = this.props;\n\n    while (target !== this._root.current) {\n      const indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n      const index = Number(indexValue);\n\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n\n    if (target === this._root.current) {\n      return undefined;\n    }\n\n    return target;\n  }\n\n  private _getItemIndex(itemRoot: HTMLElement): number {\n    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));\n  }\n\n  private _shouldAutoSelect(element: HTMLElement): boolean {\n    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);\n  }\n\n  private _hasAttribute(element: HTMLElement, attributeName: string): boolean {\n    let isToggle = false;\n\n    while (!isToggle && element !== this._root.current) {\n      isToggle = element.getAttribute(attributeName) === 'true';\n      element = getParent(element) as HTMLElement;\n    }\n\n    return isToggle;\n  }\n\n  private _isInputElement(element: HTMLElement): boolean {\n    return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';\n  }\n\n  private _isNonHandledClick(element: HTMLElement): boolean {\n    const doc = getDocument();\n\n    if (doc && element) {\n      while (element && element !== doc.documentElement) {\n        if (isElementTabbable(element)) {\n          return false;\n        }\n\n        element = getParent(element) as HTMLElement;\n      }\n    }\n\n    return true;\n  }\n\n  private _handleNextFocus(handleFocus: boolean): void {\n    if (this._shouldHandleFocusTimeoutId) {\n      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\n      this._shouldHandleFocusTimeoutId = undefined;\n    }\n\n    this._shouldHandleFocus = handleFocus;\n\n    if (handleFocus) {\n      this._async.setTimeout(() => {\n        this._shouldHandleFocus = false;\n      }, 100);\n    }\n  }\n\n  private _setIsTouch(isTouch: boolean): void {\n    if (this._isTouchTimeoutId) {\n      this._async.clearTimeout(this._isTouchTimeoutId);\n      this._isTouchTimeoutId = undefined;\n    }\n\n    this._isTouch = true;\n\n    if (isTouch) {\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 300);\n    }\n  }\n\n  private _getSelectionMode(): SelectionMode {\n    const { selection } = this.props;\n\n    const { selectionMode = selection ? selection.mode : SelectionMode.none } = this.props;\n\n    return selectionMode;\n  }\n}\n","import { IGroupedListStyleProps, IGroupedListStyles } from './GroupedList.types';\nimport { getGlobalClassNames, AnimationVariables } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupedList',\n  compact: 'ms-GroupedList--Compact',\n  group: 'ms-GroupedList-group',\n  link: 'ms-Link',\n  listCell: 'ms-List-cell',\n};\n\nconst beziers = {\n  easeInOutSine: 'cubic-bezier(0.445, 0.050, 0.550, 0.950)',\n};\n\nexport const getStyles = (props: IGroupedListStyleProps): IGroupedListStyles => {\n  const { theme, className, compact } = props;\n  const { palette } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        selectors: {\n          [`.${classNames.listCell}`]: {\n            minHeight: 38, // be consistent with DetailsList styles\n          },\n        },\n      },\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32, // be consistent with DetailsList styles\n            },\n          },\n        },\n      ],\n      className,\n    ],\n    group: [\n      classNames.group,\n      {\n        transition: `background-color ${AnimationVariables.durationValue2} ${beziers.easeInOutSine}`,\n      },\n    ],\n    groupIsDropping: {\n      backgroundColor: palette.neutralLight,\n    },\n  };\n};\n","import { IGroupHeaderStyleProps, IGroupHeaderStyles } from './GroupHeader.types';\nimport {\n  getGlobalClassNames,\n  getFocusStyle,\n  IStyle,\n  AnimationVariables,\n  FontWeights,\n  IconFontSizes,\n} from '../../Styling';\nimport { getRTL, IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from '../DetailsList/DetailsRow.styles';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as EXPAND_BUTTON_WIDTH } from './GroupSpacer';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupHeader',\n  compact: 'ms-GroupHeader--compact',\n  check: 'ms-GroupHeader-check',\n  dropIcon: 'ms-GroupHeader-dropIcon',\n  expand: 'ms-GroupHeader-expand',\n  isCollapsed: 'is-collapsed',\n  title: 'ms-GroupHeader-title',\n  isSelected: 'is-selected',\n  iconTag: 'ms-Icon--Tag',\n  group: 'ms-GroupedList-group',\n  isDropping: 'is-dropping',\n};\n\nconst beziers = {\n  easeOutCirc: 'cubic-bezier(0.075, 0.820, 0.165, 1.000)',\n  easeOutSine: 'cubic-bezier(0.390, 0.575, 0.565, 1.000)',\n  easeInBack: 'cubic-bezier(0.600, -0.280, 0.735, 0.045)',\n};\n\nconst DEFAULT_GROUP_HEADER_HEIGHT = 48;\nconst COMPACT_GROUP_HEADER_HEIGHT = 40;\n\nexport const getStyles = (props: IGroupHeaderStyleProps): IGroupHeaderStyles => {\n  const { theme, className, selected, isCollapsed, compact } = props;\n  // padding from the source to align GroupHeader title with DetailsRow's first cell.\n  const { cellLeftPadding } = DEFAULT_CELL_STYLE_PROPS;\n  const finalRowHeight = compact ? COMPACT_GROUP_HEADER_HEIGHT : DEFAULT_GROUP_HEADER_HEIGHT;\n\n  const { semanticColors, palette, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  const checkExpandResetStyles: IStyle = [\n    getFocusStyle(theme),\n    {\n      cursor: 'default',\n      background: 'none',\n      backgroundColor: 'transparent',\n      border: 'none',\n      padding: 0, // cancel default <button> padding\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      getFocusStyle(theme),\n      theme.fonts.medium,\n      {\n        // keep the border for height but color it so it's invisible.\n        borderBottom: `1px solid ${semanticColors.listBackground}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          ':hover': {\n            background: semanticColors.listItemBackgroundHovered,\n            color: semanticColors.actionLinkHovered,\n          },\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`:global(.${classNames.group}.${classNames.isDropping})`]: {\n            selectors: {\n              [`& > .${classNames.root} .${classNames.dropIcon}`]: {\n                transition:\n                  `transform ${AnimationVariables.durationValue4} ${beziers.easeOutCirc} ` +\n                  `opacity ${AnimationVariables.durationValue1} ${beziers.easeOutSine}`,\n                transitionDelay: AnimationVariables.durationValue3,\n                opacity: 1,\n                transform: `rotate(0.2deg) scale(1);`, // rotation prevents jittery motion in IE\n              },\n\n              [`.${classNames.check}`]: {\n                opacity: 0,\n              },\n            },\n          },\n        },\n      },\n      selected && [\n        classNames.isSelected,\n        {\n          background: semanticColors.listItemBackgroundChecked,\n          selectors: {\n            ':hover': {\n              background: semanticColors.listItemBackgroundCheckedHovered,\n            },\n            [`${classNames.check}`]: {\n              opacity: 1,\n            },\n          },\n        },\n      ],\n      compact && [classNames.compact, { border: 'none' }],\n      className,\n    ],\n    groupHeaderContainer: [\n      {\n        display: 'flex',\n        alignItems: 'center',\n        height: finalRowHeight,\n      },\n    ],\n    headerCount: [\n      {\n        padding: '0px 4px',\n      },\n    ],\n    check: [\n      classNames.check,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        // paddingTop and marginTop brought from the DetailsRow.styles.ts with explanation below.\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        opacity: 0,\n        width: CHECK_CELL_WIDTH,\n        height: finalRowHeight,\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n    expand: [\n      classNames.expand,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        width: EXPAND_BUTTON_WIDTH,\n        height: finalRowHeight,\n        color: selected ? palette.neutralPrimary : palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: selected ? palette.neutralQuaternary : palette.neutralLight,\n          },\n          ':active': {\n            backgroundColor: selected ? palette.neutralTertiaryAlt : palette.neutralQuaternaryAlt,\n          },\n        },\n      },\n    ],\n    expandIsCollapsed: [\n      isCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n              transformOrigin: '50% 50%',\n              transition: 'transform .1s linear',\n            },\n          ]\n        : {\n            transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n            transition: 'transform .1s linear',\n          },\n    ],\n    title: [\n      classNames.title,\n      {\n        paddingLeft: cellLeftPadding,\n        fontSize: compact ? fonts.medium.fontSize : fonts.mediumPlus.fontSize,\n        fontWeight: isCollapsed ? FontWeights.regular : FontWeights.semibold,\n        cursor: 'pointer',\n        outline: 0,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n      },\n    ],\n    dropIcon: [\n      classNames.dropIcon,\n      {\n        position: 'absolute',\n        left: -26,\n        fontSize: IconFontSizes.large,\n        color: palette.neutralSecondary,\n        transition:\n          `transform ${AnimationVariables.durationValue2} ${beziers.easeInBack}, ` +\n          `opacity ${AnimationVariables.durationValue4} ${beziers.easeOutSine}`,\n        opacity: 0,\n        transform: 'rotate(0.2deg) scale(0.65)', // rotation prevents jittery motion in IE\n        transformOrigin: '10px 10px',\n        selectors: {\n          [`:global(.${classNames.iconTag})`]: {\n            position: 'absolute',\n          },\n        },\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles, SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\n\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\n\nexport class SpinnerBase extends React.Component<ISpinnerProps, any> {\n  public static defaultProps: ISpinnerProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom',\n  };\n\n  public render() {\n    // eslint-disable-next-line deprecation/deprecation\n    const { type, size, ariaLabel, ariaLive, styles, label, theme, className, labelPosition } = this.props;\n    const statusMessage = ariaLabel;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['size']);\n\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n    let styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      size: styleSize,\n      className,\n      labelPosition,\n    });\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div className={classNames.circle} />\n        {label && <div className={classNames.label}>{label}</div>}\n        {statusMessage && (\n          <div role=\"status\" aria-live={ariaLive}>\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{statusMessage}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import { ISpinnerStyleProps, ISpinnerStyles, SpinnerSize } from './Spinner.types';\nimport {\n  hiddenContentStyle,\n  keyframes,\n  HighContrastSelector,\n  getGlobalClassNames,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\n\nconst GlobalClassNames = {\n  root: 'ms-Spinner',\n  circle: 'ms-Spinner-circle',\n  label: 'ms-Spinner-label',\n};\n\nconst spinAnimation = memoizeFunction(() =>\n  keyframes({\n    '0%': {\n      transform: 'rotate(0deg)',\n    },\n    '100%': {\n      transform: 'rotate(360deg)',\n    },\n  }),\n);\n\nexport const getStyles = (props: ISpinnerStyleProps): ISpinnerStyles => {\n  const { theme, size, className, labelPosition } = props;\n\n  const { palette } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },\n      labelPosition === 'top' && {\n        flexDirection: 'column-reverse',\n      },\n      labelPosition === 'right' && {\n        flexDirection: 'row',\n      },\n      labelPosition === 'left' && {\n        flexDirection: 'row-reverse',\n      },\n      className,\n    ],\n    circle: [\n      classNames.circle,\n      {\n        boxSizing: 'border-box',\n        borderRadius: '50%',\n        border: '1.5px solid ' + palette.themeLight,\n        borderTopColor: palette.themePrimary,\n        animationName: spinAnimation(),\n        animationDuration: '1.3s',\n        animationIterationCount: 'infinite',\n        animationTimingFunction: 'cubic-bezier(.53,.21,.29,.67)',\n        selectors: {\n          [HighContrastSelector]: {\n            borderTopColor: 'Highlight',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      size === SpinnerSize.xSmall && [\n        'ms-Spinner--xSmall',\n        {\n          width: 12,\n          height: 12,\n        },\n      ],\n      size === SpinnerSize.small && [\n        'ms-Spinner--small',\n        {\n          width: 16,\n          height: 16,\n        },\n      ],\n      size === SpinnerSize.medium && [\n        'ms-Spinner--medium',\n        {\n          width: 20,\n          height: 20,\n        },\n      ],\n      size === SpinnerSize.large && [\n        'ms-Spinner--large',\n        {\n          width: 28,\n          height: 28,\n        },\n      ],\n    ],\n    label: [\n      classNames.label,\n      theme.fonts.small,\n      {\n        color: palette.themePrimary,\n        margin: '8px 0 0',\n        textAlign: 'center',\n      },\n      labelPosition === 'top' && {\n        margin: '0 0 8px',\n      },\n      labelPosition === 'right' && {\n        margin: '0 0 0 8px',\n      },\n      labelPosition === 'left' && {\n        margin: '0 8px 0 0',\n      },\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { SpinnerBase } from './Spinner.base';\nimport { getStyles } from './Spinner.styles';\nimport { ISpinnerProps, ISpinnerStyles, ISpinnerStyleProps } from './Spinner.types';\n\nexport const Spinner: React.FunctionComponent<ISpinnerProps> = styled<\n  ISpinnerProps,\n  ISpinnerStyleProps,\n  ISpinnerStyles\n>(SpinnerBase, getStyles, undefined, { scope: 'Spinner' });\n","import * as React from 'react';\nimport { IProcessedStyleSet, ITheme } from '../../Styling';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n  private _id: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupHeaderProps,\n    previousState: IGroupHeaderState,\n  ): IGroupHeaderState {\n    if (nextProps.group) {\n      const newCollapsed = nextProps.group.isCollapsed;\n      const isGroupLoading = nextProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n\n      return {\n        ...previousState,\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      };\n    }\n\n    return previousState;\n  }\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this._id = getId('GroupHeader');\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel = 0,\n      viewport,\n      selectionMode,\n      loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderTitle = this._onRenderTitle,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      compact,\n      ariaPosInSet,\n      ariaSetSize,\n      useFastIcons,\n    } = this.props;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        onClick={this._onHeaderClick}\n        role=\"row\"\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        // aria-rowindex is omitted because the default calculated index\n        // is better than an incorrect declared index\n        data-is-focusable={true}\n        onKeyUp={this._onKeyUp}\n        aria-label={group.ariaLabel}\n        aria-labelledby={group.ariaLabel ? undefined : this._id}\n        aria-expanded={!this.state.isCollapsed}\n        aria-selected={canSelectGroup ? currentlySelected : undefined}\n        aria-level={groupLevel + 1}\n      >\n        <div className={this._classNames.groupHeaderContainer} role=\"presentation\">\n          {isSelectionCheckVisible ? (\n            <div role=\"gridcell\">\n              <button\n                data-is-focusable={false}\n                type=\"button\"\n                className={this._classNames.check}\n                role=\"checkbox\"\n                id={`${this._id}-check`}\n                aria-checked={currentlySelected}\n                aria-labelledby={`${this._id}-check ${this._id}`}\n                data-selection-toggle={true}\n                onClick={this._onToggleSelectGroupClick}\n                {...selectAllButtonProps}\n              >\n                {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n              </button>\n            </div>\n          ) : (\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={indentWidth} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon} role=\"presentation\">\n            <Icon iconName=\"Tag\" />\n          </div>\n          <div role=\"gridcell\">\n            <button\n              data-is-focusable={false}\n              type=\"button\"\n              className={this._classNames.expand}\n              onClick={this._onToggleClick}\n              aria-expanded={!this.state.isCollapsed}\n              {...expandButtonProps}\n            >\n              <Icon\n                className={this._classNames.expandIsCollapsed}\n                iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n              />\n            </button>\n          </div>\n\n          {onRenderTitle(this.props, this._onRenderTitle)}\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </div>\n      </div>\n    );\n  }\n\n  private _toggleCollapse = () => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n  };\n\n  private _onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { group, onGroupHeaderKeyUp } = this.props;\n\n    if (onGroupHeaderKeyUp) {\n      onGroupHeaderKeyUp(ev, group!);\n    }\n\n    if (!ev.defaultPrevented) {\n      const shouldOpen = this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n      const shouldClose = !this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, this.props.theme);\n      if (shouldClose || shouldOpen) {\n        this._toggleCollapse();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n\n  private _onToggleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._toggleCollapse();\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group, ariaColSpan } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.title} id={this._id} role=\"gridcell\" aria-colspan={ariaColSpan}>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </div>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupHeader.styles';\nimport { GroupHeaderBase } from './GroupHeader.base';\nimport { IGroupHeaderProps, IGroupHeaderStyles, IGroupHeaderStyleProps } from './GroupHeader.types';\nexport { IGroupHeaderProps };\n\nexport const GroupHeader: React.FunctionComponent<IGroupHeaderProps> = styled<\n  IGroupHeaderProps,\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles\n>(GroupHeaderBase, getStyles, undefined, {\n  scope: 'GroupHeader',\n});\n","import { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nexport { IGroupShowAllProps };\n\nconst GlobalClassNames = {\n  root: 'ms-GroupShowAll',\n  link: 'ms-Link',\n};\n\nexport const getStyles = (props: IGroupShowAllStyleProps): IGroupShowAllStyles => {\n  const { theme } = props;\n  const { fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '10px 84px',\n        cursor: 'pointer',\n        selectors: {\n          [`.${classNames.link}`]: {\n            fontSize: fonts.small.fontSize,\n          },\n        },\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { useCallback } from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { Link } from '../../Link';\nimport { IGroupShowAllProps } from './GroupShowAll.types';\nimport { IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\nimport { GroupSpacer } from './GroupSpacer';\n\nconst getClassNames = classNamesFunction<IGroupShowAllStyleProps, IGroupShowAllStyles>();\n\nexport const GroupShowAllBase: React.FunctionComponent<IGroupShowAllProps> = props => {\n  const { group, groupLevel, showAllLinkText = 'Show All', styles, theme, onToggleSummarize } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  const memoizedOnClick = useCallback(\n    (ev: React.MouseEvent<HTMLElement>) => {\n      onToggleSummarize!(group!);\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    },\n    [onToggleSummarize, group],\n  );\n\n  if (group) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer count={groupLevel!} />\n        <Link onClick={memoizedOnClick}>{showAllLinkText}</Link>\n      </div>\n    );\n  }\n\n  return null;\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupShowAll.styles';\nimport { GroupShowAllBase } from './GroupShowAll.base';\nimport { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\nexport { IGroupShowAllProps };\n\nexport const GroupShowAll: React.FunctionComponent<IGroupShowAllProps> = styled<\n  IGroupShowAllProps,\n  IGroupShowAllStyleProps,\n  IGroupShowAllStyles\n>(GroupShowAllBase, getStyles, undefined, { scope: 'GroupShowAll' });\n","import { IGroupFooterStyleProps, IGroupFooterStyles } from './GroupFooter.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-groupFooter',\n};\n\nexport const getStyles = (props: IGroupFooterStyleProps): IGroupFooterStyles => {\n  const { theme, className } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      theme.fonts.medium,\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '5px 38px',\n      },\n      className,\n    ],\n  };\n};\n","import * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { GroupSpacer } from './GroupSpacer';\nimport { IGroupFooterStyleProps, IGroupFooterStyles, IGroupFooterProps } from './GroupFooter.types';\nconst getClassNames = classNamesFunction<IGroupFooterStyleProps, IGroupFooterStyles>();\n\nexport const GroupFooterBase: React.FunctionComponent<IGroupFooterProps> = props => {\n  const { group, groupLevel, footerText, indentWidth, styles, theme } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  if (group && footerText) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n        {footerText}\n      </div>\n    );\n  }\n\n  return null;\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupFooter.styles';\nimport { GroupFooterBase } from './GroupFooter.base';\nimport { IGroupFooterProps, IGroupFooterStyles, IGroupFooterStyleProps } from './GroupFooter.types';\nexport { IGroupFooterProps };\n\nexport const GroupFooter: React.FunctionComponent<IGroupFooterProps> = styled<\n  IGroupFooterProps,\n  IGroupFooterStyleProps,\n  IGroupFooterStyles\n>(GroupFooterBase, getStyles, undefined, {\n  scope: 'GroupFooter',\n});\n","import * as React from 'react';\nimport { IRefObject, IRectangle, IRenderFunction } from '../../Utilities';\nimport { List } from './List';\n\n/**\n * {@docCategory List}\n */\nexport const ScrollToMode = {\n  /**\n   * Does not make any consideration to where in the viewport the item should align to.\n   */\n  auto: 0 as 0,\n  /**\n   * Attempts to scroll the list so the top of the desired item is aligned with the top of the viewport.\n   */\n  top: 1 as 1,\n  /**\n   * Attempts to scroll the list so the bottom of the desired item is aligned with the bottom of the viewport.\n   */\n  bottom: 2 as 2,\n  /**\n   * Attempts to scroll the list so the desired item is in the exact center of the viewport.\n   */\n  center: 3 as 3,\n};\n\n/**\n * {@docCategory List}\n */\nexport type ScrollToMode = typeof ScrollToMode[keyof typeof ScrollToMode];\n\n/**\n * Props passed to the render override for the list root.\n * {@docCategory List}\n */\nexport interface IListOnRenderRootProps<T> {\n  /**\n   * The ref to be applied to the list root.\n   * The `List` uses this element to track scroll position and sizing.\n   */\n  rootRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list root element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered as the list surface element.\n   * This will have been rendered using `onRenderSurface`.\n   */\n  surfaceElement: JSX.Element | null;\n}\n\n/**\n * Props passed to the render override for the list surface.\n * {@docCategory List}\n */\nexport interface IListOnRenderSurfaceProps<T> {\n  /**\n   * A ref to be applied to the surface element.\n   * The `List` uses this element to track content size and focus.\n   */\n  surfaceRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list surface element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered representing all active pages.\n   */\n  pageElements: JSX.Element[];\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IList {\n  /**\n   * Force the component to update.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  getTotalListHeight?: () => number;\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines the behavior of the scrolling alignment. Defaults to auto.\n   *  Note: The scrollToMode requires the measureItem callback is provided to function.\n   */\n  scrollToIndex: (index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IListProps<T = any> extends React.HTMLAttributes<List<T> | HTMLDivElement> {\n  /**\n   * Optional callback to access the IList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IList>;\n\n  /** Optional classname to append to root list. */\n  className?: string;\n\n  /** Items to render. */\n  items?: T[];\n\n  /**\n   * Method to call when trying to render an item.\n   * @param item - The data associated with the cell that is being rendered.\n   * @param index - The index of the cell being rendered.\n   * @param isScrolling - True if the list is being scrolled. May be useful for rendering a placeholder if your cells\n   * are complex.\n   */\n  onRenderCell?: (item?: T, index?: number, isScrolling?: boolean) => React.ReactNode;\n\n  /**\n   * Optional callback invoked when List rendering completed.\n   * This can be on initial mount or on re-render due to scrolling.\n   * This method will be called as a result of changes in List pages (added or removed),\n   * and after ALL the changes complete.\n   * To track individual page Add / Remove use onPageAdded / onPageRemoved instead.\n   * @param pages - The current array of pages in the List.\n   */\n  onPagesUpdated?: (pages: IPage<T>[]) => void;\n\n  /** Optional callback for monitoring when a page is added. */\n  onPageAdded?: (page: IPage<T>) => void;\n\n  /** Optional callback for monitoring when a page is removed. */\n  onPageRemoved?: (page: IPage<T>) => void;\n\n  /** Optional callback to get the item key, to be used on render. */\n  getKey?: (item: T, index?: number) => string;\n\n  /**\n   * Called by the list to get the specification for a page.\n   * Use this method to provide an allocation of items per page,\n   * as well as an estimated rendered height for the page.\n   * The list will use this to optimize virtualization.\n   */\n  getPageSpecification?: (itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification;\n\n  /**\n   * Method called by the list to get how many items to render per page from specified index.\n   * In general, use `getPageSpecification` instead.\n   */\n  getItemCountForPage?: (itemIndex?: number, visibleRect?: IRectangle) => number;\n\n  /**\n   * Method called by the list to get the pixel height for a given page. By default, we measure the first\n   * page's height and default all other pages to that height when calculating the surface space. It is\n   * ideal to be able to adequately predict page heights in order to keep the surface space from jumping\n   * in pixels, which has been seen to cause browser performance issues.\n   * In general, use `getPageSpecification` instead.\n   */\n  getPageHeight?: (itemIndex?: number, visibleRect?: IRectangle, itemCount?: number) => number;\n\n  /**\n   * Method called by the list to derive the page style object. For spacer pages, the list will derive\n   * the height and passed in heights will be ignored.\n   */\n  getPageStyle?: (page: IPage<T>) => any;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render ahead.\n   * @defaultvalue 2\n   */\n  renderedWindowsAhead?: number;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render behind.\n   * @defaultvalue 2\n   */\n  renderedWindowsBehind?: number;\n\n  /** Index in items array to start rendering from. Defaults to 0. */\n  startIndex?: number;\n\n  /** Number of items to render. Defaults to items.length. */\n  renderCount?: number;\n\n  /**\n   * Boolean value to enable render page caching. This is an experimental performance optimization\n   * that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps<T>) => boolean;\n\n  /**\n   * The role to assign to the list root element.\n   * Use this to override the default assignment of 'list' to the root and 'listitem' to the cells.\n   */\n  role?: string;\n\n  /**\n   * Called when the List will render a page.\n   * Override this to control how cells are rendered within a page.\n   */\n  onRenderPage?: IRenderFunction<IPageProps<T>>;\n\n  /**\n   * Render override for the element at the root of the `List`.\n   * Use this to apply some final attributes or structure to the content\n   * each time the list is updated with new active pages or items.\n   */\n  onRenderRoot?: IRenderFunction<IListOnRenderRootProps<T>>;\n\n  /**\n   * Render override for the element representing the surface of the `List`.\n   * Use this to alter the structure of the rendered content if necessary on each update.\n   */\n  onRenderSurface?: IRenderFunction<IListOnRenderSurfaceProps<T>>;\n\n  /**\n   * An object which can be passed in as a fresh instance to 'force update' the list.\n   */\n  version?: {};\n\n  /**\n   * Whether to disable scroll state updates. This causes the isScrolling arg in onRenderCell to always be undefined.\n   * This is a performance optimization to let List skip a render cycle by not updating its scrolling state.\n   */\n  ignoreScrollingState?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPage<T = any> {\n  key: string;\n  items: T[] | undefined;\n  startIndex: number;\n  itemCount: number;\n  style: React.CSSProperties;\n  top: number;\n  height: number;\n  data?: any;\n  isSpacer?: boolean;\n  isVisible?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageProps<T = any>\n  extends React.HTMLAttributes<HTMLDivElement>,\n    React.ClassAttributes<HTMLDivElement> {\n  /**\n   * The role being assigned to the rendered page element by the list.\n   */\n  role?: string;\n  /**\n   * The allocation data for the page.\n   */\n  page: IPage<T>;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageSpecification {\n  /**\n   * The number of items to allocate to the page.\n   */\n  itemCount?: number;\n  /**\n   * The estimated pixel height of the page.\n   */\n  height?: number;\n  /**\n   * Data to pass through to the page when rendering.\n   */\n  data?: any;\n  /**\n   * The key to use when creating the page.\n   */\n  key?: string;\n}\n","import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  IRectangle,\n  IRenderFunction,\n  css,\n  divProperties,\n  findIndex,\n  findScrollableParent,\n  getNativeProps,\n  getParent,\n  getWindow,\n  initializeComponentRef,\n} from '../../Utilities';\nimport {\n  IList,\n  IListProps,\n  IPage,\n  IPageProps,\n  ScrollToMode,\n  IListOnRenderSurfaceProps,\n  IListOnRenderRootProps,\n} from './List.types';\nimport { composeRenderFunction } from '../../Utilities';\n\nconst RESIZE_DELAY = 16;\nconst MIN_SCROLL_UPDATE_DELAY = 100;\nconst MAX_SCROLL_UPDATE_DELAY = 500;\nconst IDLE_DEBOUNCE_DELAY = 200;\n// The amount of time to wait before declaring that the list isn't scrolling\nconst DONE_SCROLLING_WAIT = 500;\nconst DEFAULT_ITEMS_PER_PAGE = 10;\nconst DEFAULT_PAGE_HEIGHT = 30;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst PAGE_KEY_PREFIX = 'page-';\nconst SPACER_KEY_PREFIX = 'spacer-';\n\nexport interface IListState<T = any> {\n  pages?: IPage<T>[];\n\n  /** The last versionstamp for  */\n  measureVersion?: number;\n  isScrolling?: boolean;\n  getDerivedStateFromProps(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T>;\n\n  pagesVersion?: {};\n}\n\ninterface IPageCacheItem<T> {\n  page: IPage<T>;\n  pageElement?: JSX.Element;\n}\n\ninterface IPageCache<T> {\n  [key: string]: IPageCacheItem<T>;\n}\n\nconst EMPTY_RECT = {\n  top: -1,\n  bottom: -1,\n  left: -1,\n  right: -1,\n  width: 0,\n  height: 0,\n};\n\n// Naming expensive measures so that they're named in profiles.\nconst _measurePageRect = (element: HTMLElement) => element.getBoundingClientRect();\nconst _measureSurfaceRect = _measurePageRect;\nconst _measureScrollRect = _measurePageRect;\n\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback\n * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if\n * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.\n * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\nexport class List<T = any> extends React.Component<IListProps<T>, IListState<T>> implements IList {\n  public static defaultProps = {\n    startIndex: 0,\n    onRenderCell: (item: any, index: number, containsFocus: boolean) => <>{(item && item.name) || ''}</>,\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND,\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _surface = React.createRef<HTMLDivElement>();\n  private _pageRefs: Record<string, unknown> = {};\n  private _async: Async;\n  private _events: EventGroup;\n  private _estimatedPageHeight: number;\n  private _totalEstimates: number;\n  private _cachedPageHeights: {\n    [key: string]: {\n      height: number;\n      measureVersion: number;\n    };\n  };\n  private _focusedIndex: number;\n  private _scrollElement: HTMLElement;\n  private _hasCompletedFirstRender: boolean;\n\n  // surface rect relative to window\n  private _surfaceRect: IRectangle | undefined;\n\n  // The visible rect that we're required to render given the current list state.\n  private _requiredRect: IRectangle | null;\n\n  // The visible rect that we're allowed to keep rendered. Pages outside of this rect will be removed.\n  private _allowedRect: IRectangle;\n\n  // The rect that is visible to the user\n  private _visibleRect: IRectangle | undefined;\n\n  // materialized rect around visible items, relative to surface\n  private _materializedRect: IRectangle | null;\n\n  private _requiredWindowsAhead: number;\n  private _requiredWindowsBehind: number;\n\n  private _measureVersion: number;\n  private _scrollHeight: number;\n  private _scrollTop: number;\n  private _pageCache: IPageCache<T>;\n\n  public static getDerivedStateFromProps<T = any>(\n    nextProps: IListProps<T>,\n    previousState: IListState<T>,\n  ): IListState<T> {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IListProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      pages: [],\n      isScrolling: false,\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    this._estimatedPageHeight = 0;\n    this._totalEstimates = 0;\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n\n    // Track the measure version for everything.\n    this._measureVersion = 0;\n\n    // Ensure that scrolls are lazy updated.\n    this._onAsyncScroll = this._async.debounce(this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {\n      leading: false,\n      maxWait: MAX_SCROLL_UPDATE_DELAY,\n    });\n\n    this._onAsyncIdle = this._async.debounce(this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {\n      leading: false,\n    });\n\n    this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n      leading: false,\n    });\n\n    this._onScrollingDone = this._async.debounce(this._onScrollingDone, DONE_SCROLLING_WAIT, {\n      leading: false,\n    });\n\n    this._cachedPageHeights = {};\n    this._estimatedPageHeight = 0;\n    this._focusedIndex = -1;\n    this._pageCache = {};\n  }\n\n  public get pageRefs(): Readonly<Record<string, unknown>> {\n    return this._pageRefs;\n  }\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\n   */\n  public scrollToIndex(\n    index: number,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode: ScrollToMode = ScrollToMode.auto,\n  ): void {\n    const startIndex = this.props.startIndex as number;\n    const renderCount = this._getRenderCount();\n    const endIndex = startIndex + renderCount;\n\n    const allowedRect = this._allowedRect;\n\n    let scrollTop = 0;\n\n    let itemsPerPage = 1;\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n\n      const pageHeight = pageSpecification.height;\n      itemsPerPage = pageSpecification.itemCount;\n\n      const requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;\n      if (requestedIndexIsInPage) {\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in\n        // just the given item, otherwise we'll only bring the page into view\n        if (measureItem && this._scrollElement) {\n          const scrollRect = _measureScrollRect(this._scrollElement);\n          const scrollWindow = {\n            top: this._scrollElement.scrollTop,\n            bottom: this._scrollElement.scrollTop + scrollRect.height,\n          };\n\n          // Adjust for actual item position within page\n          const itemPositionWithinPage = index - itemIndex;\n          for (let itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\n          }\n          const scrollBottom = scrollTop + measureItem(index);\n\n          // If scrollToMode is set to something other than auto, we always want to\n          // scroll the item into a specific position on the page.\n          switch (scrollToMode) {\n            case ScrollToMode.top:\n              this._scrollElement.scrollTop = scrollTop;\n              return;\n            case ScrollToMode.bottom:\n              this._scrollElement.scrollTop = scrollBottom - scrollRect.height;\n              return;\n            case ScrollToMode.center:\n              this._scrollElement.scrollTop = (scrollTop + scrollBottom - scrollRect.height) / 2;\n              return;\n            case ScrollToMode.auto:\n            default:\n              break;\n          }\n\n          const itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\n          if (itemIsFullyVisible) {\n            // Item is already visible, do nothing.\n            return;\n          }\n\n          const itemIsPartiallyAbove = scrollTop < scrollWindow.top;\n          const itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\n\n          if (itemIsPartiallyAbove) {\n            //  We will just scroll to 'scrollTop'\n            //  .------.   - scrollTop\n            //  |Item  |\n            //  | .----|-. - scrollWindow.top\n            //  '------' |\n            //    |      |\n            //    '------'\n          } else if (itemIsPartiallyBelow) {\n            //  Adjust scrollTop position to just bring in the element\n            // .------.  - scrollTop\n            // |      |\n            // | .------.\n            // '-|----' | - scrollWindow.bottom\n            //   | Item |\n            //   '------' - scrollBottom\n            scrollTop = scrollBottom - scrollRect.height;\n          }\n        }\n\n        this._scrollElement.scrollTop = scrollTop;\n        return;\n      }\n\n      scrollTop += pageHeight;\n    }\n  }\n\n  public getStartItemIndexInView(measureItem?: (itemIndex: number) => number): number {\n    const pages = this.state.pages || [];\n    for (const page of pages) {\n      const isPageVisible =\n        !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;\n      if (isPageVisible) {\n        if (!measureItem) {\n          const rowHeight = Math.floor(page.height / page.itemCount);\n          return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);\n        } else {\n          let totalRowHeight = 0;\n          for (let itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {\n            const rowHeight = measureItem(itemIndex);\n            if (\n              page.top + totalRowHeight <= this._scrollTop &&\n              this._scrollTop < page.top + totalRowHeight + rowHeight\n            ) {\n              return itemIndex;\n            } else {\n              totalRowHeight += rowHeight;\n            }\n          }\n        }\n      }\n    }\n    return 0;\n  }\n\n  public componentDidMount(): void {\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n    this._scrollElement = findScrollableParent(this._root.current) as HTMLElement;\n\n    this._events.on(window, 'resize', this._onAsyncResize);\n    if (this._root.current) {\n      this._events.on(this._root.current, 'focus', this._onFocus, true);\n    }\n    if (this._scrollElement) {\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IListProps, previousState: IListState<T>): void {\n    const finalProps = this.props;\n    const finalState = this.state;\n\n    if (this.state.pagesVersion !== previousState.pagesVersion) {\n      // If we weren't provided with the page height, measure the pages\n      if (!finalProps.getPageHeight) {\n        // If measured version is invalid since we've updated the DOM\n        const heightsChanged = this._updatePageMeasurements(finalState.pages!);\n\n        // On first render, we should re-measure so that we don't get a visual glitch.\n        if (heightsChanged) {\n          this._materializedRect = null;\n          if (!this._hasCompletedFirstRender) {\n            this._hasCompletedFirstRender = true;\n            this.setState(this._updatePages(finalProps, finalState));\n          } else {\n            this._onAsyncScroll();\n          }\n        } else {\n          // Enqueue an idle bump.\n          this._onAsyncIdle();\n        }\n      } else {\n        // Enqueue an idle bump\n        this._onAsyncIdle();\n      }\n\n      // Notify the caller that rendering the new pages has completed\n      if (finalProps.onPagesUpdated) {\n        finalProps.onPagesUpdated(finalState.pages as IPage<T>[]);\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n\n    delete this._scrollElement;\n  }\n\n  public shouldComponentUpdate(newProps: IListProps<T>, newState: IListState<T>): boolean {\n    const { pages: oldPages } = this.state;\n    const { pages: newPages } = newState;\n    let shouldComponentUpdate = false;\n\n    // Update if the page stops scrolling\n    if (!newState.isScrolling && this.state.isScrolling) {\n      return true;\n    }\n\n    if (newProps.version !== this.props.version) {\n      return true;\n    }\n\n    if (newProps.items === this.props.items && oldPages!.length === newPages!.length) {\n      for (let i = 0; i < oldPages!.length; i++) {\n        const oldPage = oldPages![i];\n        const newPage = newPages![i];\n\n        if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {\n          shouldComponentUpdate = true;\n          break;\n        }\n      }\n    } else {\n      shouldComponentUpdate = true;\n    }\n\n    return shouldComponentUpdate;\n  }\n\n  public forceUpdate(): void {\n    this._invalidatePageCache();\n    // Ensure that when the list is force updated we update the pages first before render.\n    this._updateRenderRects(this.props, this.state, true);\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n\n    super.forceUpdate();\n  }\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  public getTotalListHeight(): number {\n    return this._surfaceRect!.height;\n  }\n\n  public render(): JSX.Element | null {\n    const { className, role = 'list', onRenderSurface, onRenderRoot } = this.props;\n    const { pages = [] } = this.state;\n    const pageElements: JSX.Element[] = [];\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    for (const page of pages) {\n      pageElements.push(this._renderPage(page));\n    }\n\n    const finalOnRenderSurface = onRenderSurface\n      ? composeRenderFunction(onRenderSurface, this._onRenderSurface)\n      : this._onRenderSurface;\n\n    const finalOnRenderRoot = onRenderRoot\n      ? composeRenderFunction(onRenderRoot, this._onRenderRoot)\n      : this._onRenderRoot;\n\n    return finalOnRenderRoot({\n      rootRef: this._root,\n      pages,\n      surfaceElement: finalOnRenderSurface({\n        surfaceRef: this._surface,\n        pages,\n        pageElements,\n        divProps: {\n          role: 'presentation',\n          className: 'ms-List-surface',\n        },\n      }),\n      divProps: {\n        ...divProps,\n        className: css('ms-List', className),\n        role: pageElements.length > 0 ? role : undefined,\n      },\n    });\n  }\n\n  private _getDerivedStateFromProps = (nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> => {\n    if (\n      nextProps.items !== this.props.items ||\n      nextProps.renderCount !== this.props.renderCount ||\n      nextProps.startIndex !== this.props.startIndex ||\n      nextProps.version !== this.props.version\n    ) {\n      // We have received new items so we want to make sure that initially we only render a single window to\n      // fill the currently visible rect, and then later render additional windows.\n      this._resetRequiredWindows();\n      this._requiredRect = null;\n\n      this._measureVersion++;\n      this._invalidatePageCache();\n\n      return this._updatePages(nextProps, previousState);\n    }\n\n    return previousState;\n  };\n\n  private _shouldVirtualize(props: IListProps<T> = this.props): boolean {\n    const { onShouldVirtualize } = props;\n    return !onShouldVirtualize || onShouldVirtualize(props);\n  }\n\n  /**\n   * when props.items change or forceUpdate called, throw away cached pages\n   */\n  private _invalidatePageCache(): void {\n    this._pageCache = {};\n  }\n\n  private _renderPage(page: IPage<T>): JSX.Element {\n    const { usePageCache } = this.props;\n    let cachedPage;\n    // if usePageCache is set and cached page element can be found, just return cached page\n    if (usePageCache) {\n      cachedPage = this._pageCache[page.key];\n      if (cachedPage && cachedPage.pageElement) {\n        return cachedPage.pageElement;\n      }\n    }\n\n    const pageStyle = this._getPageStyle(page);\n\n    const { onRenderPage = this._onRenderPage } = this.props;\n\n    const pageElement = onRenderPage(\n      {\n        page: page,\n        className: 'ms-List-page',\n        key: page.key,\n        ref: (newRef: unknown) => {\n          this._pageRefs[page.key] = newRef;\n        },\n        style: pageStyle,\n        role: 'presentation',\n      },\n      this._onRenderPage,\n    );\n\n    // cache the first page for now since it is re-rendered a lot times unnecessarily.\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\n    if (usePageCache && page.startIndex === 0) {\n      this._pageCache[page.key] = {\n        page: page,\n        pageElement: pageElement,\n      };\n    }\n    return pageElement;\n  }\n\n  private _onRenderRoot = (props: IListOnRenderRootProps<T>): JSX.Element => {\n    const { rootRef, surfaceElement, divProps } = props;\n\n    return (\n      <div ref={rootRef} {...divProps}>\n        {surfaceElement}\n      </div>\n    );\n  };\n\n  private _onRenderSurface = (props: IListOnRenderSurfaceProps<T>): JSX.Element => {\n    const { surfaceRef, pageElements, divProps } = props;\n\n    return (\n      <div ref={surfaceRef} {...divProps}>\n        {pageElements}\n      </div>\n    );\n  };\n\n  /** Generate the style object for the page. */\n  private _getPageStyle(page: IPage<T>): React.StyleHTMLAttributes<HTMLDivElement> {\n    const { getPageStyle } = this.props;\n\n    return {\n      ...(getPageStyle ? getPageStyle(page) : {}),\n      ...(!page.items\n        ? {\n            height: page.height,\n          }\n        : {}),\n    };\n  }\n\n  private _onRenderPage = (pageProps: IPageProps<T>, defaultRender?: IRenderFunction<IPageProps<T>>): any => {\n    const { onRenderCell, role } = this.props;\n\n    const {\n      page: { items = [], startIndex },\n      ...divProps\n    } = pageProps;\n\n    // only assign list item role if no role is assigned\n    const cellRole = role === undefined ? 'listitem' : 'presentation';\n    const cells: React.ReactNode[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n      const index = startIndex + i;\n      const item = items[i];\n\n      let itemKey = this.props.getKey ? this.props.getKey(item, index) : item && (item as any).key;\n\n      if (itemKey === null || itemKey === undefined) {\n        itemKey = index;\n      }\n\n      cells.push(\n        <div\n          role={cellRole}\n          className={'ms-List-cell'}\n          key={itemKey}\n          data-list-index={index}\n          data-automationid=\"ListCell\"\n        >\n          {onRenderCell &&\n            onRenderCell(item, index, !this.props.ignoreScrollingState ? this.state.isScrolling : undefined)}\n        </div>,\n      );\n    }\n\n    return <div {...divProps}>{cells}</div>;\n  };\n\n  /** Track the last item index focused so that we ensure we keep it rendered. */\n  private _onFocus(ev: any): void {\n    let target = ev.target as HTMLElement;\n\n    while (target !== this._surface.current) {\n      const indexString = target.getAttribute('data-list-index');\n\n      if (indexString) {\n        this._focusedIndex = Number(indexString);\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  }\n\n  /**\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n   * we will call onAsyncIdle which will reset it back to it's correct value.\n   */\n  private _onScroll(): void {\n    if (!this.state.isScrolling && !this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: true });\n    }\n    this._resetRequiredWindows();\n    this._onScrollingDone();\n  }\n\n  private _resetRequiredWindows(): void {\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n  }\n\n  /**\n   * Debounced method to asynchronously update the visible region on a scroll event.\n   */\n  private _onAsyncScroll(): void {\n    this._updateRenderRects(this.props, this.state);\n\n    // Only update pages when the visible rect falls outside of the materialized rect.\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect as IRectangle, this._materializedRect)) {\n      this.setState(this._updatePages(this.props, this.state));\n    } else {\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n    }\n  }\n\n  /**\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\n   * either, we increase the amount we render and re-evaluate.\n   */\n  private _onAsyncIdle(): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = this.props;\n    const { _requiredWindowsAhead: requiredWindowsAhead, _requiredWindowsBehind: requiredWindowsBehind } = this;\n    const windowsAhead = Math.min(renderedWindowsAhead as number, requiredWindowsAhead + 1);\n    const windowsBehind = Math.min(renderedWindowsBehind as number, requiredWindowsBehind + 1);\n\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n      // console.log('idling', windowsBehind, windowsAhead);\n\n      this._requiredWindowsAhead = windowsAhead;\n      this._requiredWindowsBehind = windowsBehind;\n      this._updateRenderRects(this.props, this.state);\n      this.setState(this._updatePages(this.props, this.state));\n    }\n\n    if (renderedWindowsAhead! > windowsAhead || renderedWindowsBehind! > windowsBehind) {\n      // Async increment on next tick.\n      this._onAsyncIdle();\n    }\n  }\n\n  /**\n   * Function to call when the list is done scrolling.\n   * This function is debounced.\n   */\n  private _onScrollingDone(): void {\n    if (!this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: false });\n    }\n  }\n\n  private _onAsyncResize(): void {\n    this.forceUpdate();\n  }\n\n  private _updatePages(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> {\n    // console.log('updating pages');\n\n    if (!this._requiredRect) {\n      this._updateRenderRects(nextProps, previousState);\n    }\n\n    const newListState = this._buildPages(nextProps, previousState);\n    const oldListPages = previousState.pages!;\n\n    this._notifyPageChanges(oldListPages, newListState.pages!, this.props);\n\n    return {\n      ...previousState,\n      ...newListState,\n      pagesVersion: {},\n    };\n  }\n\n  /**\n   * Notify consumers that the rendered pages have changed\n   * @param oldPages - The old pages\n   * @param newPages - The new pages\n   * @param props - The props to use\n   */\n  private _notifyPageChanges(oldPages: IPage<T>[], newPages: IPage<T>[], props: IListProps<T>): void {\n    const { onPageAdded, onPageRemoved } = props;\n\n    if (onPageAdded || onPageRemoved) {\n      const renderedIndexes: {\n        [index: number]: IPage<T>;\n      } = {};\n\n      for (const page of oldPages) {\n        if (page.items) {\n          renderedIndexes[page.startIndex] = page;\n        }\n      }\n\n      for (const page of newPages) {\n        if (page.items) {\n          if (!renderedIndexes[page.startIndex]) {\n            this._onPageAdded(page);\n          } else {\n            delete renderedIndexes[page.startIndex];\n          }\n        }\n      }\n\n      for (const index in renderedIndexes) {\n        if (renderedIndexes.hasOwnProperty(index)) {\n          this._onPageRemoved(renderedIndexes[index]);\n        }\n      }\n    }\n  }\n\n  private _updatePageMeasurements(pages: IPage<T>[]): boolean {\n    let heightChanged = false;\n\n    // when not in virtualize mode, we render all the items without page measurement\n    if (!this._shouldVirtualize()) {\n      return heightChanged;\n    }\n\n    for (let i = 0; i < pages.length; i++) {\n      const page = pages[i];\n\n      if (page.items) {\n        heightChanged = this._measurePage(page) || heightChanged;\n      }\n    }\n\n    return heightChanged;\n  }\n\n  /**\n   * Given a page, measure its dimensions, update cache.\n   * @returns True if the height has changed.\n   */\n  private _measurePage(page: IPage<T>): boolean {\n    let hasChangedHeight = false;\n    const pageElement = this._pageRefs[page.key] as HTMLElement;\n    const cachedHeight = this._cachedPageHeights[page.startIndex];\n\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\n\n    if (\n      pageElement &&\n      this._shouldVirtualize() &&\n      (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)\n    ) {\n      const newClientRect = {\n        width: pageElement.clientWidth,\n        height: pageElement.clientHeight,\n      };\n\n      if (newClientRect.height || newClientRect.width) {\n        hasChangedHeight = page.height !== newClientRect.height;\n\n        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n\n        page.height = newClientRect.height;\n\n        this._cachedPageHeights[page.startIndex] = {\n          height: newClientRect.height,\n          measureVersion: this._measureVersion,\n        };\n\n        this._estimatedPageHeight = Math.round(\n          (this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1),\n        );\n\n        this._totalEstimates++;\n      }\n    }\n\n    return hasChangedHeight;\n  }\n\n  /** Called when a page has been added to the DOM. */\n  private _onPageAdded(page: IPage<T>): void {\n    const { onPageAdded } = this.props;\n\n    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageAdded) {\n      onPageAdded(page);\n    }\n  }\n\n  /** Called when a page has been removed from the DOM. */\n  private _onPageRemoved(page: IPage<T>): void {\n    const { onPageRemoved } = this.props;\n\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageRemoved) {\n      onPageRemoved(page);\n    }\n  }\n\n  /** Build up the pages that should be rendered. */\n  private _buildPages(props: IListProps<T>, state: IListState<T>): IListState<T> {\n    let { renderCount } = props;\n    const { items, startIndex, getPageHeight } = props;\n\n    renderCount = this._getRenderCount(props);\n\n    const materializedRect = { ...EMPTY_RECT };\n    const pages: IPage<T>[] = [];\n\n    let itemsPerPage = 1;\n    let pageTop = 0;\n    let currentSpacer = null;\n    const focusedIndex = this._focusedIndex;\n    const endIndex = startIndex! + renderCount;\n    const shouldVirtualize = this._shouldVirtualize(props);\n\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\n    // So we should default to rendering only the first page so that we can get information.\n    // However if the user provides a measure function, let's just assume they know the right heights.\n    const isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\n\n    const allowedRect = this._allowedRect;\n\n    for (let itemIndex = startIndex!; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n      const pageHeight = pageSpecification.height;\n      const pageData = pageSpecification.data;\n      const key = pageSpecification.key;\n\n      itemsPerPage = pageSpecification.itemCount;\n\n      const pageBottom = pageTop + pageHeight - 1;\n\n      const isPageRendered =\n        findIndex(state.pages as IPage<T>[], (page: IPage<T>) => !!page.items && page.startIndex === itemIndex) > -1;\n      const isPageInAllowedRange = !allowedRect || (pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom!);\n      const isPageInRequiredRange =\n        !this._requiredRect || (pageBottom >= this._requiredRect.top && pageTop <= this._requiredRect.bottom!);\n      const isPageVisible =\n        (!isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered))) || !shouldVirtualize;\n      const isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;\n      const isFirstPage = itemIndex === startIndex;\n\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +\n      // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n\n      // Only render whats visible, focused, or first page,\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\n      if (isPageVisible || isPageFocused || isFirstPage) {\n        if (currentSpacer) {\n          pages.push(currentSpacer);\n          currentSpacer = null;\n        }\n\n        const itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n        const newPage = this._createPage(\n          key,\n          items!.slice(itemIndex, itemIndex + itemsInPage),\n          itemIndex,\n          undefined,\n          undefined,\n          pageData,\n        );\n\n        newPage.top = pageTop;\n        newPage.height = pageHeight;\n        if (this._visibleRect && this._visibleRect.bottom) {\n          newPage.isVisible = pageBottom >= this._visibleRect.top && pageTop <= this._visibleRect.bottom;\n        }\n\n        pages.push(newPage);\n\n        if (isPageInRequiredRange && this._allowedRect) {\n          _mergeRect(materializedRect, {\n            top: pageTop,\n            bottom: pageBottom,\n            height: pageHeight,\n            left: allowedRect.left,\n            right: allowedRect.right,\n            width: allowedRect.width,\n          });\n        }\n      } else {\n        if (!currentSpacer) {\n          currentSpacer = this._createPage(\n            SPACER_KEY_PREFIX + itemIndex,\n            undefined,\n            itemIndex,\n            0,\n            undefined,\n            pageData,\n            true /*isSpacer*/,\n          );\n        }\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n        currentSpacer.itemCount += itemsPerPage;\n      }\n      pageTop += pageBottom - pageTop + 1;\n\n      // in virtualized mode, we render need to render first page then break and measure,\n      // otherwise, we render all items without measurement to make rendering fast\n      if (isFirstRender && shouldVirtualize) {\n        break;\n      }\n    }\n\n    if (currentSpacer) {\n      currentSpacer.key = SPACER_KEY_PREFIX + 'end';\n      pages.push(currentSpacer);\n    }\n\n    this._materializedRect = materializedRect;\n\n    // console.log('materialized: ', materializedRect);\n    return {\n      ...state,\n      pages: pages,\n      measureVersion: this._measureVersion,\n    };\n  }\n\n  private _getPageSpecification(\n    itemIndex: number,\n    visibleRect: IRectangle,\n  ): {\n    // These return values are now no longer optional.\n    itemCount: number;\n    height: number;\n    data?: any;\n    key?: string;\n  } {\n    const { getPageSpecification } = this.props;\n    if (getPageSpecification) {\n      const pageData = getPageSpecification(itemIndex, visibleRect);\n\n      const { itemCount = this._getItemCountForPage(itemIndex, visibleRect) } = pageData;\n\n      const { height = this._getPageHeight(itemIndex, visibleRect, itemCount) } = pageData;\n\n      return {\n        itemCount: itemCount,\n        height: height,\n        data: pageData.data,\n        key: pageData.key,\n      };\n    } else {\n      const itemCount = this._getItemCountForPage(itemIndex, visibleRect);\n\n      return {\n        itemCount: itemCount,\n        height: this._getPageHeight(itemIndex, visibleRect, itemCount),\n      };\n    }\n  }\n\n  /**\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n   * cached height, or estimated page height, or default page height.\n   */\n  private _getPageHeight(itemIndex: number, visibleRect: IRectangle, itemsPerPage: number): number {\n    if (this.props.getPageHeight) {\n      return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);\n    } else {\n      const cachedHeight = this._cachedPageHeights[itemIndex];\n\n      return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;\n    }\n  }\n\n  private _getItemCountForPage(itemIndex: number, visibileRect: IRectangle): number {\n    const itemsPerPage = this.props.getItemCountForPage\n      ? this.props.getItemCountForPage(itemIndex, visibileRect)\n      : DEFAULT_ITEMS_PER_PAGE;\n\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n  }\n\n  private _createPage(\n    pageKey: string | undefined,\n    items: any[] | undefined,\n    startIndex: number = -1,\n    count: number = items ? items.length : 0,\n    style: React.CSSProperties = {},\n    data?: any,\n    isSpacer?: boolean,\n  ): IPage<T> {\n    pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;\n    const cachedPage = this._pageCache[pageKey];\n    if (cachedPage && cachedPage.page) {\n      return cachedPage.page;\n    }\n\n    return {\n      key: pageKey,\n      startIndex: startIndex,\n      itemCount: count,\n      items: items,\n      style: style,\n      top: 0,\n      height: 0,\n      data: data,\n      isSpacer: isSpacer || false,\n    };\n  }\n\n  private _getRenderCount(props?: IListProps<T>): number {\n    const { items, startIndex, renderCount } = props || this.props;\n\n    return renderCount === undefined ? (items ? items.length - startIndex! : 0) : renderCount;\n  }\n\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n  private _updateRenderRects(props: IListProps<T>, state: IListState<T>, forceUpdate?: boolean): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = props;\n    const { pages } = state;\n    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\n    if (!this._shouldVirtualize(props)) {\n      return;\n    }\n\n    let surfaceRect = this._surfaceRect || { ...EMPTY_RECT };\n    const scrollHeight = this._scrollElement && this._scrollElement.scrollHeight;\n    const scrollTop = this._scrollElement ? this._scrollElement.scrollTop : 0;\n\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n    // This needs to be called to recalculate when new pages should be loaded.\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\n    if (\n      this._surface.current &&\n      (forceUpdate ||\n        !pages ||\n        !this._surfaceRect ||\n        !scrollHeight ||\n        scrollHeight !== this._scrollHeight ||\n        Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)\n    ) {\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);\n      this._scrollTop = scrollTop;\n    }\n\n    // If the scroll height has changed, something in the container likely resized and\n    // we should redo the page heights incase their content resized.\n    if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {\n      this._measureVersion++;\n    }\n\n    this._scrollHeight = scrollHeight;\n\n    // If the surface is above the container top or below the container bottom, or if this is not the first\n    // render return empty rect.\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n    // used to calculate the width of the list items.\n    const visibleTop = Math.max(0, -surfaceRect.top);\n    const win = getWindow(this._root.current);\n    const visibleRect = {\n      top: visibleTop,\n      left: surfaceRect.left,\n      bottom: visibleTop + win!.innerHeight,\n      right: surfaceRect.right,\n      width: surfaceRect.width,\n      height: win!.innerHeight,\n    };\n\n    // The required/allowed rects are adjusted versions of the visible rect.\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind!, renderedWindowsAhead!);\n\n    // store the visible rect for later use.\n    this._visibleRect = visibleRect;\n  }\n}\n\nfunction _expandRect(rect: IRectangle, pagesBefore: number, pagesAfter: number): IRectangle {\n  const top = rect.top - pagesBefore * rect.height;\n  const height = rect.height + (pagesBefore + pagesAfter) * rect.height;\n\n  return {\n    top: top,\n    bottom: top + height,\n    height: height,\n    left: rect.left,\n    right: rect.right,\n    width: rect.width,\n  };\n}\n\nfunction _isContainedWithin(innerRect: IRectangle, outerRect: IRectangle): boolean {\n  return (\n    innerRect.top >= outerRect.top &&\n    innerRect.left >= outerRect.left &&\n    innerRect.bottom! <= outerRect.bottom! &&\n    innerRect.right! <= outerRect.right!\n  );\n}\n\nfunction _mergeRect(targetRect: IRectangle, newRect: IRectangle): IRectangle {\n  targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;\n  targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;\n  targetRect.bottom =\n    newRect.bottom! > targetRect.bottom! || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;\n  targetRect.right = newRect.right! > targetRect.right! || targetRect.right === -1 ? newRect.right : targetRect.right;\n  targetRect.width = targetRect.right! - targetRect.left + 1;\n  targetRect.height = targetRect.bottom! - targetRect.top + 1;\n\n  return targetRect;\n}\n","import * as React from 'react';\nimport { IGroup, IGroupDividerProps, IGroupRenderProps, IGroupedListStyles } from './GroupedList.types';\nimport { IGroupHeaderProps } from './GroupHeader.types';\nimport { IGroupFooterProps } from './GroupFooter.types';\nimport { IGroupShowAllProps } from './GroupShowAll.types';\n\nimport { IDragDropContext, IDragDropEvents, IDragDropHelper } from '../../utilities/dragdrop/index';\n\nimport { IProcessedStyleSet } from '../../Styling';\nimport { initializeComponentRef, IRenderFunction, IDisposable, css, getId, EventGroup } from '../../Utilities';\n\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/index';\n\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\n\nimport { List } from '../../List';\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\nimport { IViewport } from '../../utilities/decorators/withViewport';\nimport { IListProps } from '../List/index';\n\nexport interface IGroupedListSectionProps extends React.ClassAttributes<GroupedListSection> {\n  /** GroupedList resolved class names */\n  groupedListClassNames?: IProcessedStyleSet<IGroupedListStyles>;\n\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: () => void;\n\n  /** Whether to render in compact mode */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item rows and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Optional grouping instructions. */\n  groupIndex?: number;\n\n  /** Optional group nesting level. */\n  groupNestingDepth?: number;\n\n  /** Optional grouping instructions. */\n  group?: IGroup;\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional list props to pass to list renderer.  */\n  listProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Information to pass in to the group Show All footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Override for rendering the group header. */\n  onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Override for rendering the group Show All link. */\n  onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /** Override for rendering the group footer. */\n  onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n}\n\nexport interface IGroupedListSectionState {\n  isDropping?: boolean;\n  isSelected?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class GroupedListSection extends React.Component<IGroupedListSectionProps, IGroupedListSectionState> {\n  private _root = React.createRef<HTMLDivElement>();\n  private _list = React.createRef<List>();\n  private _subGroupRefs: Record<string, GroupedListSection | null> = {};\n  private _id: string;\n  private _events: EventGroup;\n\n  private _dragDropSubscription: IDisposable;\n  private _droppingClassName: string = '';\n\n  constructor(props: IGroupedListSectionProps) {\n    super(props);\n\n    const { selection, group } = props;\n\n    initializeComponentRef(this);\n\n    this._id = getId('GroupedListSection');\n\n    this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false,\n    };\n\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount(): void {\n    const { dragDropHelper, selection } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getGroupDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  }\n\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\n    if (\n      this.props.group !== previousProps.group ||\n      this.props.groupIndex !== previousProps.groupIndex ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getGroupDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      getGroupItemLimit,\n      group,\n      groupIndex,\n      headerProps,\n      showAllProps,\n      footerProps,\n      viewport,\n      selectionMode,\n      onRenderGroupHeader = this._onRenderGroupHeader,\n      onRenderGroupShowAll = this._onRenderGroupShowAll,\n      onRenderGroupFooter = this._onRenderGroupFooter,\n      onShouldVirtualize,\n      groupedListClassNames,\n      groups,\n      compact,\n      listProps = {},\n    } = this.props;\n    const { isSelected } = this.state;\n    const renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    const isShowAllVisible =\n      group &&\n      !group.children &&\n      !group.isCollapsed &&\n      !group.isShowingAll &&\n      (group.count > renderCount || group.hasMoreData);\n    const hasNestedGroups = group && group.children && group.children.length > 0;\n\n    const { version } = listProps;\n\n    const dividerProps: IGroupDividerProps = {\n      group,\n      groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected,\n      selected: isSelected,\n      viewport,\n      selectionMode,\n      groups,\n      compact,\n    };\n\n    const ariaControlsProps: IGroupHeaderProps = {\n      groupedListId: this._id,\n      ariaSetSize: groups ? groups.length : undefined,\n      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined,\n    };\n\n    const groupHeaderProps: IGroupHeaderProps = { ...headerProps, ...dividerProps, ...ariaControlsProps };\n    const groupShowAllProps: IGroupShowAllProps = { ...showAllProps, ...dividerProps };\n    const groupFooterProps: IGroupFooterProps = { ...footerProps, ...dividerProps };\n\n    const isDraggable: boolean =\n      !!this.props.dragDropHelper &&\n      this._getGroupDragDropOptions().canDrag!(group) &&\n      !!this.props.dragDropEvents!.canDragGroups;\n\n    return (\n      <div\n        ref={this._root}\n        {...(isDraggable && { draggable: true })}\n        className={css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName())}\n        role=\"presentation\"\n      >\n        {onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader)}\n        {group && group.isCollapsed ? null : hasNestedGroups ? (\n          <List\n            role=\"presentation\"\n            ref={this._list}\n            items={group ? group.children : []}\n            onRenderCell={this._renderSubGroup}\n            getItemCountForPage={this._returnOne}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            id={this._id}\n          />\n        ) : (\n          this._onRenderGroup(renderCount)\n        )}\n        {group && group.isCollapsed\n          ? null\n          : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll)}\n        {onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)}\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this.forceListUpdate();\n  }\n\n  public forceListUpdate() {\n    const { group } = this.props;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        const subGroupCount = group.children.length;\n\n        for (let i = 0; i < subGroupCount; i++) {\n          const subGroup = this._list.current.pageRefs['subGroup_' + String(i)] as GroupedListSection;\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      const subGroup = this._subGroupRefs['subGroup_' + String(0)];\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  }\n\n  private _onRenderGroupHeader = (props: IGroupHeaderProps): JSX.Element => {\n    return <GroupHeader {...props} />;\n  };\n\n  private _onRenderGroupShowAll = (props: IGroupShowAllProps): JSX.Element => {\n    return <GroupShowAll {...props} />;\n  };\n\n  private _onRenderGroupFooter = (props: IGroupFooterProps): JSX.Element => {\n    return <GroupFooter {...props} />;\n  };\n\n  private _onSelectionChange(): void {\n    const { group, selection } = this.props;\n    if (selection && group) {\n      const isSelected = selection.isRangeSelected(group.startIndex, group.count);\n\n      if (isSelected !== this.state.isSelected) {\n        this.setState({ isSelected });\n      }\n    }\n  }\n\n  private _onRenderGroupCell(\n    onRenderCell: any,\n    groupNestingDepth: number | undefined,\n  ): (item: any, itemIndex: number | undefined) => React.ReactNode {\n    return (item: any, itemIndex: number | undefined): React.ReactNode => {\n      return onRenderCell(groupNestingDepth, item, itemIndex);\n    };\n  }\n\n  private _onRenderGroup(renderCount: number): JSX.Element {\n    const { group, items, onRenderCell, listProps, groupNestingDepth, onShouldVirtualize, groupProps } = this.props;\n    const count = group && !group.isShowingAll ? group.count : items.length;\n    const startIndex = group ? group.startIndex : 0;\n\n    return (\n      <List\n        role={groupProps && groupProps.role ? groupProps.role : 'rowgroup'}\n        aria-label={group?.name}\n        items={items}\n        onRenderCell={this._onRenderGroupCell(onRenderCell, groupNestingDepth)}\n        ref={this._list}\n        renderCount={Math.min(count, renderCount)}\n        startIndex={startIndex}\n        onShouldVirtualize={onShouldVirtualize}\n        id={this._id}\n        {...listProps}\n      />\n    );\n  }\n\n  private _renderSubGroup = (subGroup: IGroup, subGroupIndex: number): JSX.Element | null => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      getGroupItemLimit,\n      groupNestingDepth,\n      groupProps,\n      items,\n      headerProps,\n      showAllProps,\n      footerProps,\n      listProps,\n      onRenderCell,\n      selection,\n      selectionMode,\n      viewport,\n      onRenderGroupHeader,\n      onRenderGroupShowAll,\n      onRenderGroupFooter,\n      onShouldVirtualize,\n      group,\n      compact,\n    } = this.props;\n\n    const nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n\n    return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (\n      <GroupedListSection\n        ref={ref => (this._subGroupRefs['subGroup_' + subGroupIndex] = ref)}\n        key={this._getGroupKey(subGroup, subGroupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={getGroupItemLimit}\n        group={subGroup}\n        groupIndex={subGroupIndex}\n        groupNestingDepth={nestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        items={items}\n        listProps={listProps}\n        onRenderCell={onRenderCell}\n        selection={selection}\n        selectionMode={selectionMode}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onRenderGroupHeader={onRenderGroupHeader}\n        onRenderGroupShowAll={onRenderGroupShowAll}\n        onRenderGroupFooter={onRenderGroupFooter}\n        onShouldVirtualize={onShouldVirtualize}\n        groups={group ? group.children : []}\n        compact={compact}\n      />\n    ) : null;\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getGroupKey(group: IGroup, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  }\n\n  /**\n   * collect all the data we need to enable drag/drop for a group\n   */\n  private _getGroupDragDropOptions = (): IDragDropOptions => {\n    const { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: -1,\n      context: { data: group, index: groupIndex, isGroup: true },\n      updateDropState: this._updateDroppingState,\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDrop: dragDropEvents!.onDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      onDragEnter: dragDropEvents!.onDragEnter,\n      onDragLeave: dragDropEvents!.onDragLeave,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n    return options as IDragDropOptions;\n  };\n\n  /**\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * @param newValue - new isDropping state value\n   * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newIsDropping: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, group } = this.props;\n\n    if (isDropping !== newIsDropping) {\n      if (isDropping) {\n        if (dragDropEvents && dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(group, event);\n        }\n      } else {\n        if (dragDropEvents && dragDropEvents.onDragEnter) {\n          this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n        }\n      }\n\n      this.setState({ isDropping: newIsDropping });\n    }\n  };\n\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  private _getDroppingClassName(): string {\n    let { isDropping } = this.state;\n    const { group, groupedListClassNames } = this.props;\n\n    isDropping = !!(group && isDropping);\n\n    return css(\n      isDropping && this._droppingClassName,\n      isDropping && DEFAULT_DROPPING_CSS_CLASS,\n      isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping,\n    );\n  }\n}\n","import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup,\n  IGroupedListStyleProps,\n  IGroupedListStyles,\n} from './GroupedList.types';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List, ScrollToMode, IListProps } from '../../List';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { IGroupHeaderProps } from './GroupHeader';\nimport { IGroupShowAllProps } from './GroupShowAll.styles';\nimport { IGroupFooterProps } from './GroupFooter.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\nconst { rowHeight: ROW_HEIGHT, compactRowHeight: COMPACT_ROW_HEIGHT } = DEFAULT_ROW_HEIGHTS;\n\nexport interface IGroupedListState {\n  selectionMode?: IGroupedListProps['selectionMode'];\n  compact?: IGroupedListProps['compact'];\n  groups?: IGroup[];\n  items?: IGroupedListProps['items'];\n  listProps?: IGroupedListProps['listProps'];\n  version: {};\n}\n\nexport class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false,\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupedListStyles>;\n\n  private _list = React.createRef<List>();\n\n  private _isSomeGroupExpanded: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupedListProps,\n    previousState: IGroupedListState,\n  ): IGroupedListState {\n    const { groups, selectionMode, compact, items, listProps } = nextProps;\n    const listVersion = listProps && listProps.version;\n\n    let nextState = {\n      ...previousState,\n      selectionMode,\n      compact,\n      groups,\n      listProps,\n    };\n\n    let shouldForceUpdates = false;\n\n    const previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (\n      listVersion !== previousListVersion ||\n      items !== previousState.items ||\n      groups !== previousState.groups ||\n      selectionMode !== previousState.selectionMode ||\n      compact !== previousState.compact\n    ) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  }\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    const { listProps: { version = {} } = {} } = props;\n\n    this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version,\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current!.getStartItemIndexInView() || 0;\n  }\n\n  public componentDidMount() {\n    const { groupProps, groups = [] } = this.props;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      usePageCache,\n      onShouldVirtualize,\n      theme,\n      role = 'treegrid',\n      styles,\n      compact,\n      focusZoneProps = {},\n      rootListProps = {},\n    } = this.props;\n    const { groups, version } = this.state;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      compact: compact,\n    });\n\n    const { shouldEnterInnerZone = this._isInnerZoneKeystroke } = focusZoneProps;\n\n    return (\n      <FocusZone\n        direction={FocusZoneDirection.vertical}\n        data-automationid=\"GroupedList\"\n        data-is-scrollable=\"false\"\n        role=\"presentation\"\n        {...focusZoneProps}\n        shouldEnterInnerZone={shouldEnterInnerZone}\n        className={css(this._classNames.root, focusZoneProps.className)}\n      >\n        {!groups ? (\n          this._renderGroup(undefined, 0)\n        ) : (\n          <List\n            ref={this._list}\n            role={role}\n            items={groups}\n            onRenderCell={this._renderGroup}\n            getItemCountForPage={this._returnOne}\n            getPageHeight={this._getPageHeight}\n            getPageSpecification={this._getPageSpecification}\n            usePageCache={usePageCache}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            {...rootListProps}\n          />\n        )}\n      </FocusZone>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups = [] } = this.state;\n    const { groupProps } = this.props;\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  private _setGroupsCollapsedState(groups: IGroup[], isCollapsed: boolean): void {\n    for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  }\n\n  private _renderGroup = (group: IGroup | undefined, groupIndex: number): React.ReactNode => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport,\n      onShouldVirtualize,\n      groups,\n      compact,\n    } = this.props;\n\n    // override group header/footer props as needed\n    const dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize,\n    };\n\n    const headerProps: IGroupHeaderProps = { ...groupProps!.headerProps, ...dividerProps };\n    const showAllProps: IGroupShowAllProps = { ...groupProps!.showAllProps, ...dividerProps };\n    const footerProps: IGroupFooterProps = { ...groupProps!.footerProps, ...dividerProps };\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\n      return null;\n    }\n\n    const finalListProps: IListProps = {\n      ...(listProps || {}),\n      version: this.state.version,\n    };\n\n    return (\n      <GroupedListSection\n        key={this._getGroupKey(group, groupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={groupProps && groupProps.getGroupItemLimit}\n        group={group}\n        groupIndex={groupIndex}\n        groupNestingDepth={groupNestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        listProps={finalListProps}\n        items={items}\n        onRenderCell={onRenderCell}\n        onRenderGroupHeader={groupProps!.onRenderHeader}\n        onRenderGroupShowAll={groupProps!.onRenderShowAll}\n        onRenderGroupFooter={groupProps!.onRenderFooter}\n        selectionMode={selectionMode}\n        selection={selection}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onShouldVirtualize={onShouldVirtualize}\n        groupedListClassNames={this._classNames}\n        groups={groups}\n        compact={compact}\n      />\n    );\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getDefaultGroupItemLimit = (group: IGroup): number => {\n    return group.count;\n  };\n\n  private _getGroupItemLimit = (group: IGroup): number => {\n    const { groupProps } = this.props;\n    const getGroupItemLimit =\n      groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : this._getDefaultGroupItemLimit;\n\n    return getGroupItemLimit(group);\n  };\n\n  private _getGroupHeight = (group: IGroup): number => {\n    const rowHeight = this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n\n    return rowHeight + (group.isCollapsed ? 0 : rowHeight * this._getGroupItemLimit(group));\n  };\n\n  private _getPageHeight: IListProps['getPageHeight'] = (itemIndex: number) => {\n    const { groups } = this.state;\n    const { getGroupHeight = this._getGroupHeight } = this.props;\n    const pageGroup = groups && groups[itemIndex];\n\n    if (pageGroup) {\n      return getGroupHeight(pageGroup, itemIndex);\n    } else {\n      return 0;\n    }\n  };\n\n  private _getGroupKey(group: IGroup | undefined, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onToggleCollapse = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n\n  private _onToggleSelectGroup = (group: IGroup): void => {\n    const { selection, selectionMode } = this.props;\n\n    if (group && selection && selectionMode === SelectionMode.multiple) {\n      selection.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  private _isInnerZoneKeystroke = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n  };\n\n  private _forceListUpdates(groups?: IGroup[]): void {\n    this.setState({\n      version: {},\n    });\n  }\n\n  private _onToggleSummarize = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  };\n\n  private _getPageSpecification = (\n    itemIndex: number,\n  ): {\n    key?: string;\n  } => {\n    const groups = this.state.groups;\n    const pageGroup = groups && groups[itemIndex];\n    return {\n      key: pageGroup && pageGroup.key,\n    };\n  };\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(\n      groups &&\n      groups.some(group => (group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed))\n    );\n  }\n\n  private _updateIsSomeGroupExpanded(): void {\n    const { groups } = this.state;\n    const { onGroupExpandStateChanged } = this.props;\n\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupedList.styles';\nimport { GroupedListBase } from './GroupedList.base';\nimport { IGroupedListProps, IGroupedListStyles, IGroupedListStyleProps } from './GroupedList.types';\nexport { IGroupedListProps };\n\nexport const GroupedList: React.FunctionComponent<IGroupedListProps> = styled<\n  IGroupedListProps,\n  IGroupedListStyleProps,\n  IGroupedListStyles\n>(GroupedListBase, getStyles, undefined, {\n  scope: 'GroupedList',\n});\n","import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { findScrollableParent, getRect, getWindow, Async, EventGroup } from '../../Utilities';\n\n/**\n * Viewport rectangle dimensions.\n *\n * {@docCategory DetailsList}\n */\nexport interface IViewport {\n  /**\n   * Width in pixels.\n   */\n  width: number;\n  /**\n   * Height in pixels.\n   */\n  height: number;\n}\n\nexport interface IWithViewportState {\n  viewport?: IViewport;\n}\n\n/**\n * Props interface for the withViewport component.\n *\n * {@docCategory DetailsList}\n */\nexport interface IWithViewportProps {\n  /**\n   * Whether or not `withViewport` should disable its viewport measurements, effectively making this decorator\n   * pass-through with no impact on the rendered component.\n   *\n   * Since `withViewport` measures the `viewport` on mount, after each React update, and in response to events,\n   * it may cause a component which does not currently need this information due to its configuration to re-render\n   * too often. `skipViewportMeasures` may be toggled on and off based on current state, and will suspend and resume\n   * measurement as-needed.\n   *\n   * For example, when this wraps `DetailsList`, set `skipViewportMeasures` to `true` when the `layoutMode` is\n   * `fixedColumns`, since the `DetailsList` does not use the viewport size in any calculations.\n   *\n   * In addition, consider setting `skipViewportMeasures` to `true` when running within a React test renderer, to avoid\n   * direct DOM dependencies.\n   */\n\n  skipViewportMeasures?: boolean;\n  /**\n   * Whether or not to explicitly disable usage of the `ResizeObserver` in favor of a `'resize'` event on `window`,\n   * even if the browser supports `ResizeObserver`. This may be necessary if use of `ResizeObserver` results in too\n   * many re-renders of the wrapped component due to the frequency at which events are fired.\n   *\n   * This has no impact if `skipViewportMeasures` is `true`, as no viewport measurement strategy is used.\n   */\n  disableResizeObserver?: boolean;\n\n  /**\n   * Whether or not `withViewport` will delay before first measuring the viewport size.\n   * Setting this will delay measurement by the same amount as the debounce for resizing the window.\n   * This is useful for giving the child of the viewport time to render before measuring.\n   *\n   * This is an opt-in setting as existing systems have a dependency on immediate measurement for performance.\n   * @default false\n   */\n  delayFirstMeasure?: boolean;\n}\n\nconst RESIZE_DELAY = 500;\nconst MAX_RESIZE_ATTEMPTS = 3;\n\n/**\n * A decorator to update decorated component on viewport or window resize events.\n *\n * @param ComposedComponent decorated React component reference.\n */\nexport function withViewport<TProps extends { viewport?: IViewport }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  return class WithViewportComponent extends BaseDecorator<TProps, IWithViewportState> {\n    private _root = React.createRef<HTMLDivElement>();\n    private _resizeAttempts: number;\n    private _viewportResizeObserver: any;\n    private _async: Async;\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n\n      this._async = new Async(this);\n      this._events = new EventGroup(this);\n      this._resizeAttempts = 0;\n\n      this.state = {\n        viewport: {\n          width: 0,\n          height: 0,\n        },\n      };\n    }\n\n    public componentDidMount(): void {\n      const { delayFirstMeasure, disableResizeObserver, skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n        leading: false,\n      });\n\n      if (!skipViewportMeasures) {\n        if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n          this._registerResizeObserver();\n        } else {\n          this._events.on(win, 'resize', this._onAsyncResize);\n        }\n\n        if (delayFirstMeasure) {\n          this._async.setTimeout(() => {\n            this._updateViewport();\n          }, RESIZE_DELAY);\n        } else {\n          this._updateViewport();\n        }\n      }\n    }\n\n    public componentDidUpdate(previousProps: TProps) {\n      const { skipViewportMeasures: previousSkipViewportMeasures } = previousProps as IWithViewportProps;\n      const { disableResizeObserver, skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      if (skipViewportMeasures !== previousSkipViewportMeasures) {\n        if (!skipViewportMeasures) {\n          if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n            if (!this._viewportResizeObserver) {\n              this._registerResizeObserver();\n            }\n          } else {\n            this._events.on(win, 'resize', this._onAsyncResize);\n          }\n\n          this._updateViewport();\n        } else {\n          this._unregisterResizeObserver();\n          this._events.off(win, 'resize', this._onAsyncResize);\n        }\n      }\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n      this._async.dispose();\n      this._unregisterResizeObserver();\n    }\n\n    public render(): JSX.Element {\n      const { viewport } = this.state;\n      const newViewport = viewport!.width > 0 && viewport!.height > 0 ? viewport : undefined;\n\n      return (\n        <div className=\"ms-Viewport\" ref={this._root} style={{ minWidth: 1, minHeight: 1 }}>\n          <ComposedComponent ref={this._updateComposedComponentRef} viewport={newViewport} {...(this.props as any)} />\n        </div>\n      );\n    }\n\n    public forceUpdate(): void {\n      this._updateViewport(true);\n    }\n\n    private _onAsyncResize(): void {\n      this._updateViewport();\n    }\n\n    private _isResizeObserverAvailable(): boolean {\n      const win = getWindow(this._root.current);\n\n      return win && (win as any).ResizeObserver;\n    }\n\n    private _registerResizeObserver = () => {\n      const win = getWindow(this._root.current);\n\n      this._viewportResizeObserver = new (win as any).ResizeObserver(this._onAsyncResize);\n      this._viewportResizeObserver.observe(this._root.current);\n    };\n\n    private _unregisterResizeObserver = () => {\n      if (this._viewportResizeObserver) {\n        this._viewportResizeObserver.disconnect();\n        delete this._viewportResizeObserver;\n      }\n    };\n\n    /* Note: using lambda here because decorators don't seem to work in decorators. */\n    private _updateViewport = (withForceUpdate?: boolean) => {\n      const { viewport } = this.state;\n      const viewportElement = this._root.current;\n      const scrollElement = findScrollableParent(viewportElement) as HTMLElement;\n      const scrollRect = getRect(scrollElement);\n      const clientRect = getRect(viewportElement);\n      const updateComponent = () => {\n        if (withForceUpdate && this._composedComponentInstance) {\n          this._composedComponentInstance.forceUpdate();\n        }\n      };\n\n      const isSizeChanged =\n        (clientRect && clientRect.width) !== viewport!.width || (scrollRect && scrollRect.height) !== viewport!.height;\n\n      if (isSizeChanged && this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {\n        this._resizeAttempts++;\n        this.setState(\n          {\n            viewport: {\n              width: clientRect.width,\n              height: scrollRect.height,\n            },\n          },\n          () => {\n            this._updateViewport(withForceUpdate);\n          },\n        );\n      } else {\n        this._resizeAttempts = 0;\n        updateComponent();\n      }\n    };\n  };\n}\n","import { IGroup } from '../../components/GroupedList/GroupedList.types';\r\n\r\n/**\r\n * Takes an array of groups and returns a count of the groups and all descendant groups.\r\n * @param groups - The array of groups to count.\r\n */\r\nexport const GetGroupCount = (groups: IGroup[] | undefined): number => {\r\n  let total = 0;\r\n\r\n  if (groups) {\r\n    const remainingGroups = [...groups];\r\n    let currentGroup: IGroup;\r\n\r\n    while (remainingGroups && remainingGroups.length > 0) {\r\n      ++total;\r\n\r\n      currentGroup = remainingGroups.pop() as IGroup;\r\n\r\n      if (currentGroup && currentGroup.children) {\r\n        remainingGroups.push(...currentGroup.children);\r\n      }\r\n    }\r\n  }\r\n\r\n  return total;\r\n};\r\n","import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  IRenderFunction,\n  classNamesFunction,\n  memoizeFunction,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n  ColumnDragEndLocation,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport {\n  IDetailsHeader,\n  SelectAllVisibility,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport { IFocusZone, FocusZone, FocusZoneDirection, IFocusZoneProps } from '../../FocusZone';\nimport { IObjectWithKey, ISelection, Selection, SelectionMode, SelectionZone } from '../../utilities/selection/index';\n\nimport { DragDropHelper } from '../../utilities/dragdrop/DragDropHelper';\nimport { IGroupedList, GroupedList, IGroupDividerProps, IGroupRenderProps } from '../../GroupedList';\nimport { List, IListProps, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction, getId } from '@uifabric/utilities';\nimport { useConst } from '@uifabric/react-hooks';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n  getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\ntype IDetailsListInnerProps = Omit<IDetailsListProps, 'selection'> &\n  IDetailsListState & {\n    selection: ISelection;\n    dragDropHelper: DragDropHelper | undefined;\n    rootRef: React.RefObject<HTMLDivElement>;\n    listRef: React.RefObject<List>;\n    groupedListRef: React.RefObject<IGroupedList>;\n    focusZoneRef: React.RefObject<IFocusZone>;\n    headerRef: React.RefObject<IDetailsHeader>;\n    selectionZoneRef: React.RefObject<SelectionZone>;\n    onGroupExpandStateChanged: (isSomeGroupExpanded: boolean) => void;\n    onColumnIsSizingChanged: (column: IColumn, isSizing: boolean) => void;\n    onRowDidMount: (row: DetailsRowBase) => void;\n    onRowWillUnmount: (row: DetailsRowBase) => void;\n    onColumnResized: (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number) => void;\n    onColumnAutoResized: (column: IColumn, columnIndex: number) => void;\n    onToggleCollapse: (collapsed: boolean) => void;\n    onActiveRowChanged: (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;\n    onBlur: (event: React.FocusEvent<HTMLElement>) => void;\n    onRenderDefaultRow: (detailsRowProps: IDetailsRowProps) => JSX.Element;\n  };\n\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nconst DetailsListInner: React.ComponentType<IDetailsListInnerProps> = (\n  props: IDetailsListInnerProps,\n): JSX.Element | null => {\n  const { selection } = props;\n\n  const {\n    ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn,\n    className,\n    checkboxVisibility,\n    compact,\n    constrainMode,\n    dragDropEvents,\n    groups,\n    groupProps,\n    indentWidth,\n    items,\n    isPlaceholderData,\n    isHeaderVisible,\n    layoutMode,\n    onItemInvoked,\n    onItemContextMenu,\n    onColumnHeaderClick,\n    onColumnHeaderContextMenu,\n    selectionMode = selection.mode,\n    selectionPreservedOnEmptyClick,\n    selectionZoneProps,\n    ariaLabel,\n    ariaLabelForGrid,\n    rowElementEventMap,\n    shouldApplyApplicationRole = false,\n    getKey,\n    listProps,\n    usePageCache,\n    onShouldVirtualize,\n    viewport,\n    minimumPixelsForDrag,\n    getGroupHeight,\n    styles,\n    theme,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    onRenderCheckbox,\n    useFastIcons,\n    dragDropHelper,\n    adjustedColumns,\n    isCollapsed,\n    isSizing,\n    isSomeGroupExpanded,\n    version,\n    rootRef,\n    listRef,\n    focusZoneRef,\n    columnReorderOptions,\n    groupedListRef,\n    headerRef,\n    onGroupExpandStateChanged,\n    onColumnIsSizingChanged,\n    onRowDidMount,\n    onRowWillUnmount,\n    disableSelectionZone,\n    onColumnResized,\n    onColumnAutoResized,\n    onToggleCollapse,\n    onActiveRowChanged,\n    onBlur,\n    rowElementEventMap: eventsToRegister,\n    onRenderMissingItem,\n    onRenderItemColumn,\n    getCellValueKey,\n    getRowAriaLabel,\n    getRowAriaDescribedBy,\n    checkButtonAriaLabel,\n    checkButtonGroupAriaLabel,\n    checkboxCellClassName,\n    useReducedRowRenderer,\n    enableUpdateAnimations,\n    enterModalSelectionOnTouch,\n    onRenderDefaultRow,\n    selectionZoneRef,\n  } = props;\n\n  const defaultRole = 'grid';\n  const role = props.role ? props.role : defaultRole;\n\n  const rowId = getId('row');\n\n  const groupNestingDepth = getGroupNestingDepth(groups);\n\n  const additionalListProps = React.useMemo((): IListProps => {\n    return {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version,\n      ...listProps,\n    };\n  }, [isSizing, getKey, version, listProps]);\n\n  let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    let isCollapsedGroupSelectVisible =\n      groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  const defaultOnRenderDetailsHeader = React.useCallback(\n    (detailsHeaderProps: IDetailsHeaderProps): JSX.Element | null => {\n      return <DetailsHeader {...detailsHeaderProps} />;\n    },\n    [],\n  );\n\n  const defaultOnRenderDetailsFooter = React.useCallback((): JSX.Element | null => {\n    return null;\n  }, []);\n\n  const propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n\n  const onRenderDetailsHeader = React.useMemo(() => {\n    return propsOnRenderDetailsHeader\n      ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)\n      : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n\n  const propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n\n  const onRenderDetailsFooter = React.useMemo(() => {\n    return propsOnRenderDetailsFooter\n      ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)\n      : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n\n  const detailsFooterProps = React.useMemo((): IDetailsFooterProps => {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth,\n      selection,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }, [\n    adjustedColumns,\n    groupNestingDepth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    indentWidth,\n    cellStyleProps,\n  ]);\n\n  const columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n\n  const onColumnDragEnd = React.useCallback(\n    (\n      {\n        dropLocation,\n      }: {\n        dropLocation?: ColumnDragEndLocation;\n      },\n      event: MouseEvent,\n    ): void => {\n      let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n      if (columnReorderOnDragEnd) {\n        if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n          finalDropLocation = dropLocation;\n        } else if (rootRef.current) {\n          const clientRect = rootRef.current.getBoundingClientRect();\n          if (\n            event.clientX > clientRect.left &&\n            event.clientX < clientRect.right &&\n            event.clientY > clientRect.top &&\n            event.clientY < clientRect.bottom\n          ) {\n            finalDropLocation = ColumnDragEndLocation.surface;\n          }\n        }\n        columnReorderOnDragEnd(finalDropLocation);\n      }\n    },\n    [columnReorderOnDragEnd, rootRef],\n  );\n\n  const columnReorderProps = React.useMemo((): IColumnReorderHeaderProps | undefined => {\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd,\n      };\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n\n  const rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  const colCount =\n    (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +\n    (adjustedColumns ? adjustedColumns.length : 0) +\n    (groups ? 1 : 0);\n\n  const classNames = React.useMemo(() => {\n    return getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n\n  const onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n\n  const finalOnRenderDetailsGroupFooter = React.useMemo(() => {\n    return onRenderDetailsGroupFooter\n      ? (groupFooterProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...groupFooterProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n  }, [\n    onRenderDetailsGroupFooter,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n\n  const finalOnRenderDetailsGroupHeader = React.useMemo(() => {\n    return onRenderDetailsGroupHeader\n      ? (groupHeaderProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          const { ariaPosInSet, ariaSetSize } = groupHeaderProps;\n\n          return onRenderDetailsGroupHeader(\n            {\n              ...groupHeaderProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n              ariaColSpan: adjustedColumns.length,\n              ariaPosInSet: undefined,\n              ariaSetSize: undefined,\n              ariaRowCount: ariaSetSize ? ariaSetSize + (isHeaderVisible ? 1 : 0) : undefined,\n              ariaRowIndex: ariaPosInSet ? ariaPosInSet + (isHeaderVisible ? 1 : 0) : undefined,\n            },\n            defaultRender,\n          );\n        }\n      : (groupHeaderProps: IGroupDividerProps, defaultRender: IRenderFunction<IGroupDividerProps>) => {\n          const { ariaPosInSet, ariaSetSize } = groupHeaderProps;\n\n          return defaultRender({\n            ...groupHeaderProps,\n            ariaColSpan: adjustedColumns.length,\n            ariaPosInSet: undefined,\n            ariaSetSize: undefined,\n            ariaRowCount: ariaSetSize ? ariaSetSize + (isHeaderVisible ? 1 : 0) : undefined,\n            ariaRowIndex: ariaPosInSet ? ariaPosInSet + (isHeaderVisible ? 1 : 0) : undefined,\n          });\n        };\n  }, [\n    onRenderDetailsGroupHeader,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    isHeaderVisible,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const finalGroupProps = React.useMemo((): IGroupRenderProps | undefined => {\n    return {\n      ...groupProps,\n      role: role === defaultRole ? 'rowgroup' : 'presentation',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n      // pass through custom group header checkbox label\n      headerProps: {\n        ...groupProps?.headerProps,\n        selectAllButtonProps: {\n          'aria-label': checkButtonGroupAriaLabel,\n          ...groupProps?.headerProps?.selectAllButtonProps,\n        },\n      },\n    };\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n\n  const sumColumnWidths = useConst(() =>\n    memoizeFunction((columns: IColumn[]) => {\n      let totalWidth: number = 0;\n\n      columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n      return totalWidth;\n    }),\n  );\n\n  const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n\n  const rowWidth = React.useMemo(() => {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n\n  const onRenderCell = React.useCallback(\n    (nestingDepth: number, item: any, index: number): React.ReactNode => {\n      const finalOnRenderRow = props.onRenderRow\n        ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow)\n        : onRenderDefaultRow;\n\n      const rowRole = role === defaultRole ? undefined : 'presentation';\n\n      const rowProps: IDetailsRowProps = {\n        item: item,\n        itemIndex: index,\n        flatIndexOffset: isHeaderVisible ? 2 : 1,\n        compact,\n        columns: adjustedColumns,\n        groupNestingDepth: nestingDepth,\n        id: `${rowId}-${index}`,\n        selectionMode,\n        selection,\n        onDidMount: onRowDidMount,\n        onWillUnmount: onRowWillUnmount,\n        onRenderItemColumn,\n        getCellValueKey,\n        eventsToRegister,\n        dragDropEvents,\n        dragDropHelper,\n        viewport,\n        checkboxVisibility,\n        collapseAllVisibility,\n        getRowAriaLabel,\n        getRowAriaDescribedBy,\n        checkButtonAriaLabel,\n        checkboxCellClassName,\n        useReducedRowRenderer,\n        indentWidth,\n        cellStyleProps,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        enableUpdateAnimations,\n        rowWidth,\n        useFastIcons,\n        role: rowRole,\n      };\n\n      if (!item) {\n        if (onRenderMissingItem) {\n          return onRenderMissingItem(index, rowProps);\n        }\n\n        return null;\n      }\n\n      return finalOnRenderRow(rowProps);\n    },\n    [\n      compact,\n      adjustedColumns,\n      selectionMode,\n      selection,\n      rowId,\n      onRowDidMount,\n      onRowWillUnmount,\n      onRenderItemColumn,\n      getCellValueKey,\n      eventsToRegister,\n      dragDropEvents,\n      dragDropHelper,\n      viewport,\n      checkboxVisibility,\n      collapseAllVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      isHeaderVisible,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n      onRenderDefaultRow,\n      onRenderMissingItem,\n      props.onRenderRow,\n      rowWidth,\n      role,\n    ],\n  );\n\n  const onRenderListCell = React.useCallback(\n    (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n      return (item: any, itemIndex: number): React.ReactNode => {\n        return onRenderCell(nestingDepth, item, itemIndex);\n      };\n    },\n    [onRenderCell],\n  );\n\n  const isRightArrow = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n    },\n    [theme],\n  );\n\n  const focusZoneProps: IFocusZoneProps = {\n    componentRef: focusZoneRef,\n    className: classNames.focusZone,\n    direction: FocusZoneDirection.vertical,\n    shouldEnterInnerZone: isRightArrow,\n    onActiveElementChanged: onActiveRowChanged,\n    shouldRaiseClicks: false,\n    onBlur: onBlur,\n  };\n\n  const list = groups ? (\n    <GroupedList\n      focusZoneProps={focusZoneProps}\n      componentRef={groupedListRef}\n      groups={groups}\n      groupProps={finalGroupProps}\n      items={items}\n      onRenderCell={onRenderCell}\n      role=\"presentation\"\n      selection={selection}\n      selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n      dragDropEvents={dragDropEvents}\n      dragDropHelper={dragDropHelper}\n      eventsToRegister={rowElementEventMap}\n      listProps={additionalListProps}\n      onGroupExpandStateChanged={onGroupExpandStateChanged}\n      usePageCache={usePageCache}\n      onShouldVirtualize={onShouldVirtualize}\n      getGroupHeight={getGroupHeight}\n      compact={compact}\n    />\n  ) : (\n    <FocusZone {...focusZoneProps}>\n      <List\n        ref={listRef}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    </FocusZone>\n  );\n\n  const onHeaderKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      if (ev.which === KeyCodes.down) {\n        if (focusZoneRef.current && focusZoneRef.current.focus()) {\n          // select the first item in list after down arrow key event\n          // only if nothing was selected; otherwise start with the already-selected item\n          if (selection.getSelectedIndices().length === 0) {\n            selection.setIndexSelected(0, true, false);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [selection, focusZoneRef],\n  );\n\n  const onContentKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      if (ev.which === KeyCodes.up && !ev.altKey) {\n        if (headerRef.current && headerRef.current.focus()) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [headerRef],\n  );\n\n  return (\n    // If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n    // with JAWS.\n    <div\n      ref={rootRef}\n      className={classNames.root}\n      data-automationid=\"DetailsList\"\n      data-is-scrollable=\"false\"\n      aria-label={ariaLabel}\n      {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n    >\n      <FocusRects />\n      <div\n        role={role}\n        aria-label={ariaLabelForGrid}\n        aria-rowcount={isPlaceholderData ? -1 : rowCount}\n        aria-colcount={colCount}\n        aria-readonly=\"true\"\n        aria-busy={isPlaceholderData}\n      >\n        <div onKeyDown={onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n          {isHeaderVisible &&\n            onRenderDetailsHeader(\n              {\n                componentRef: headerRef,\n                selectionMode: selectionMode,\n                layoutMode: layoutMode!,\n                selection: selection,\n                columns: adjustedColumns,\n                onColumnClick: onColumnHeaderClick,\n                onColumnContextMenu: onColumnHeaderContextMenu,\n                onColumnResized: onColumnResized,\n                onColumnIsSizingChanged: onColumnIsSizingChanged,\n                onColumnAutoResized: onColumnAutoResized,\n                groupNestingDepth: groupNestingDepth,\n                isAllCollapsed: isCollapsed,\n                onToggleCollapseAll: onToggleCollapse,\n                ariaLabel: ariaLabelForListHeader,\n                ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n                ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n                selectAllVisibility: selectAllVisibility,\n                collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                viewport: viewport,\n                columnReorderProps: columnReorderProps,\n                minimumPixelsForDrag: minimumPixelsForDrag,\n                cellStyleProps: cellStyleProps,\n                checkboxVisibility,\n                indentWidth,\n                onRenderDetailsCheckbox: onRenderCheckbox,\n                rowWidth: sumColumnWidths(adjustedColumns),\n                useFastIcons,\n              },\n              onRenderDetailsHeader,\n            )}\n        </div>\n        <div onKeyDown={onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n          {!disableSelectionZone ? (\n            <SelectionZone\n              ref={selectionZoneRef}\n              selection={selection}\n              selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n              selectionMode={selectionMode}\n              onItemInvoked={onItemInvoked}\n              onItemContextMenu={onItemContextMenu}\n              enterModalOnTouch={enterModalSelectionOnTouch}\n              {...(selectionZoneProps || {})}\n            >\n              {list}\n            </SelectionZone>\n          ) : (\n            list\n          )}\n        </div>\n        {onRenderDetailsFooter({\n          ...detailsFooterProps,\n        })}\n      </div>\n    </div>\n  );\n};\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <DetailsListInner\n        {...this.props}\n        {...this.state}\n        selection={this._selection}\n        dragDropHelper={this._dragDropHelper}\n        rootRef={this._root}\n        listRef={this._list}\n        groupedListRef={this._groupedList}\n        focusZoneRef={this._focusZone}\n        headerRef={this._header}\n        selectionZoneRef={this._selectionZone}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        onColumnIsSizingChanged={this._onColumnIsSizingChanged}\n        onRowDidMount={this._onRowDidMount}\n        onRowWillUnmount={this._onRowWillUnmount}\n        onColumnResized={this._onColumnResized}\n        onColumnAutoResized={this._onColumnAutoResized}\n        onToggleCollapse={this._onToggleCollapse}\n        onActiveRowChanged={this._onActiveRowChanged}\n        onBlur={this._onBlur}\n        onRenderDefaultRow={this._onRenderRow}\n      />\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _getDerivedStateFromProps = (\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState => {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (nextProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    let nextState = previousState;\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = nextProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      nextState = {\n        ...nextState,\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      };\n    }\n\n    if (!this.props.disableSelectionZone && nextProps.items !== items) {\n      this._selection.setItems(nextProps.items, shouldResetSelection);\n    }\n\n    if (\n      nextProps.checkboxVisibility !== checkboxVisibility ||\n      nextProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      nextProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    nextState = {\n      ...nextState,\n      ...this._adjustColumns(nextProps, nextState, true),\n    };\n\n    if (nextProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      nextProps.groupProps &&\n      nextProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      nextState = {\n        ...nextState,\n        isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed,\n      };\n    }\n\n    if (nextProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = nextProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: nextProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing: isSizing });\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IDetailsListState {\n    const adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    return {\n      ...previousState,\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth,\n    };\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState | undefined,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = previousState ? previousState.lastWidth : -1;\n    const lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility, flexMargin, skipViewportMeasures } = this.props;\n    let remainingWidth = viewportWidth - (flexMargin || 0);\n    let sumProportionalWidth = 0;\n\n    newColumns.forEach((col: IColumn) => {\n      if (skipViewportMeasures || !col.flexGrow) {\n        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n      } else {\n        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n        sumProportionalWidth += col.flexGrow;\n      }\n\n      remainingWidth -= getPaddedWidth(col, props, true);\n    });\n\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    remainingWidth -= rowCheckWidth + groupExpandWidth;\n\n    let widthFraction = remainingWidth / sumProportionalWidth;\n\n    // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n    if (!skipViewportMeasures) {\n      newColumns.forEach((column: IColumn) => {\n        const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n        if (newColumn.flexGrow && newColumn.maxWidth) {\n          const fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n          const shrinkWidth = fullWidth - newColumn.maxWidth;\n\n          if (shrinkWidth > 0) {\n            remainingWidth += shrinkWidth;\n            sumProportionalWidth -= (shrinkWidth / (fullWidth - newColumn.minWidth)) * newColumn.flexGrow;\n          }\n        }\n      });\n    }\n\n    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      // Delay computation until viewport width is available.\n      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n        return newColumn;\n      }\n\n      if (!newColumn.calculatedWidth) {\n        if (!skipViewportMeasures && newColumn.flexGrow) {\n          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n        } else {\n          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n        }\n      }\n\n      return newColumn;\n    });\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    let minimumWidth = 0;\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const baseColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n      };\n\n      const newColumn = {\n        ...baseColumn,\n        ...this._columnOverrides[column.key],\n      };\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {\n        minimumWidth += getPaddedWidth(baseColumn, props);\n      }\n\n      totalWidth += getPaddedWidth(newColumn, props);\n\n      return newColumn;\n    });\n\n    if (minimumWidth > availableWidth) {\n      return adjustedColumns;\n    }\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex >= 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this.setState({\n      ...this._adjustColumns(this.props, this.state, true, resizingColumnIndex),\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, props: IDetailsListProps, paddingOnly?: true): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    (paddingOnly ? 0 : column.calculatedWidth!) +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n\nfunction getGroupNestingDepth(groups: IDetailsListProps['groups']): number {\n  let level = 0;\n  let groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n","import { IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsList',\n  compact: 'ms-DetailsList--Compact',\n  contentWrapper: 'ms-DetailsList-contentWrapper',\n  headerWrapper: 'ms-DetailsList-headerWrapper',\n  isFixed: 'is-fixed',\n  isHorizontalConstrained: 'is-horizontalConstrained',\n  listCell: 'ms-List-cell',\n};\n\nexport const getStyles = (props: IDetailsListStyleProps): IDetailsListStyles => {\n  const { theme, className, isHorizontalConstrained, compact, isFixed } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        color: semanticColors.listText,\n        selectors: {\n          [`& .${classNames.listCell}`]: {\n            minHeight: 38,\n            wordBreak: 'break-word',\n          },\n        },\n      },\n\n      isFixed && classNames.isFixed,\n\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32,\n            },\n          },\n        },\n      ],\n\n      isHorizontalConstrained && [\n        classNames.isHorizontalConstrained,\n        {\n          overflowX: 'auto',\n          overflowY: 'visible',\n          WebkitOverflowScrolling: 'touch',\n        },\n      ],\n\n      className,\n    ],\n\n    focusZone: [\n      {\n        display: 'inline-block',\n        minWidth: '100%',\n        minHeight: 1,\n      },\n    ],\n    headerWrapper: classNames.headerWrapper,\n    contentWrapper: classNames.contentWrapper,\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IDetailsListProps, IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\nimport { DetailsListBase } from './DetailsList.base';\nimport { getStyles } from './DetailsList.styles';\n\nexport { IDetailsListProps };\n\nexport const DetailsList: React.FunctionComponent<IDetailsListProps> = styled<\n  IDetailsListProps,\n  IDetailsListStyleProps,\n  IDetailsListStyles\n>(DetailsListBase, getStyles, undefined, {\n  scope: 'DetailsList',\n});\n","import { EventGroup } from './EventGroup';\nimport { findScrollableParent } from './scroll';\nimport { getRect } from './dom/getRect';\nimport { IRectangle } from './IRectangle';\n\ndeclare function setTimeout(cb: Function, delay: number): number;\n\nconst SCROLL_ITERATION_DELAY = 16;\nconst SCROLL_GUTTER = 100;\nconst MAX_SCROLL_VELOCITY = 15;\n\n/**\n * AutoScroll simply hooks up mouse events given a parent element, and scrolls the container\n * up/down depending on how close the mouse is to the top/bottom of the container.\n *\n * Once you don't want autoscroll any more, just dispose the helper and it will unhook events.\n *\n * @public\n * {@docCategory AutoScroll}\n */\nexport class AutoScroll {\n  private _events: EventGroup;\n  private _scrollableParent: HTMLElement | null;\n  private _scrollRect: IRectangle | undefined;\n  private _scrollVelocity: number;\n  private _isVerticalScroll: boolean;\n  private _timeoutId: number;\n\n  constructor(element: HTMLElement) {\n    this._events = new EventGroup(this);\n    this._scrollableParent = findScrollableParent(element) as HTMLElement;\n\n    this._incrementScroll = this._incrementScroll.bind(this);\n    this._scrollRect = getRect(this._scrollableParent);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (this._scrollableParent === (window as any)) {\n      this._scrollableParent = document.body;\n    }\n\n    if (this._scrollableParent) {\n      this._events.on(window, 'mousemove', this._onMouseMove, true);\n      this._events.on(window, 'touchmove', this._onTouchMove, true);\n    }\n  }\n\n  public dispose(): void {\n    this._events.dispose();\n    this._stopScroll();\n  }\n\n  private _onMouseMove(ev: MouseEvent): void {\n    this._computeScrollVelocity(ev);\n  }\n\n  private _onTouchMove(ev: TouchEvent): void {\n    if (ev.touches.length > 0) {\n      this._computeScrollVelocity(ev);\n    }\n  }\n\n  private _computeScrollVelocity(ev: MouseEvent | TouchEvent): void {\n    if (!this._scrollRect) {\n      return;\n    }\n\n    let clientX: number;\n    let clientY: number;\n    if ('clientX' in ev) {\n      clientX = ev.clientX;\n      clientY = ev.clientY;\n    } else {\n      clientX = ev.touches[0].clientX;\n      clientY = ev.touches[0].clientY;\n    }\n\n    let scrollRectTop = this._scrollRect.top;\n    let scrollRectLeft = this._scrollRect.left;\n    let scrollClientBottom = scrollRectTop + this._scrollRect.height - SCROLL_GUTTER;\n    let scrollClientRight = scrollRectLeft + this._scrollRect.width - SCROLL_GUTTER;\n\n    // variables to use for alternating scroll direction\n    let scrollRect;\n    let clientDirection;\n    let scrollClient;\n\n    // if either of these conditions are met we are scrolling vertically else horizontally\n    if (clientY < scrollRectTop + SCROLL_GUTTER || clientY > scrollClientBottom) {\n      clientDirection = clientY;\n      scrollRect = scrollRectTop;\n      scrollClient = scrollClientBottom;\n      this._isVerticalScroll = true;\n    } else {\n      clientDirection = clientX;\n      scrollRect = scrollRectLeft;\n      scrollClient = scrollClientRight;\n      this._isVerticalScroll = false;\n    }\n\n    // calculate scroll velocity and direction\n    if (clientDirection! < scrollRect + SCROLL_GUTTER) {\n      this._scrollVelocity = Math.max(\n        -MAX_SCROLL_VELOCITY,\n        -MAX_SCROLL_VELOCITY * ((SCROLL_GUTTER - (clientDirection - scrollRect)) / SCROLL_GUTTER),\n      );\n    } else if (clientDirection > scrollClient) {\n      this._scrollVelocity = Math.min(\n        MAX_SCROLL_VELOCITY,\n        MAX_SCROLL_VELOCITY * ((clientDirection - scrollClient) / SCROLL_GUTTER),\n      );\n    } else {\n      this._scrollVelocity = 0;\n    }\n\n    if (this._scrollVelocity) {\n      this._startScroll();\n    } else {\n      this._stopScroll();\n    }\n  }\n\n  private _startScroll(): void {\n    if (!this._timeoutId) {\n      this._incrementScroll();\n    }\n  }\n\n  private _incrementScroll(): void {\n    if (this._scrollableParent) {\n      if (this._isVerticalScroll) {\n        this._scrollableParent.scrollTop += Math.round(this._scrollVelocity);\n      } else {\n        this._scrollableParent.scrollLeft += Math.round(this._scrollVelocity);\n      }\n    }\n\n    this._timeoutId = setTimeout(this._incrementScroll, SCROLL_ITERATION_DELAY);\n  }\n\n  private _stopScroll(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n      delete this._timeoutId;\n    }\n  }\n}\n","import * as React from 'react';\n\nimport {\n  Async,\n  EventGroup,\n  AutoScroll,\n  Point,\n  IRectangle,\n  classNamesFunction,\n  findScrollableParent,\n  getDistanceBetweenPoints,\n  getRTL,\n  initializeComponentRef,\n} from '../../Utilities';\n\nimport { IMarqueeSelectionProps, IMarqueeSelectionStyleProps, IMarqueeSelectionStyles } from './MarqueeSelection.types';\nimport {} from '@uifabric/utilities';\n\nconst getClassNames = classNamesFunction<IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>();\n\nexport interface IMarqueeSelectionState {\n  dragOrigin?: Point;\n  dragRect?: IRectangle;\n}\n\n// We want to make the marquee selection start when the user drags a minimum distance. Otherwise we'd start\n// the drag even if they just click an item without moving.\nconst MIN_DRAG_DISTANCE = 5;\n\n/**\n * MarqueeSelection component abstracts managing a draggable rectangle which sets items selected/not selected.\n * Elements which have data-selectable-index attributes are queried and measured once to determine if they\n * fall within the bounds of the rectangle. The measure is memoized during the drag as a performance optimization\n * so if the items change sizes while dragging, that could cause incorrect results.\n */\nexport class MarqueeSelectionBase extends React.Component<IMarqueeSelectionProps, IMarqueeSelectionState> {\n  public static defaultProps = {\n    rootTagName: 'div',\n    rootProps: {},\n    isEnabled: true,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _dragOrigin: Point | undefined;\n  private _rootRect: IRectangle;\n  private _lastMouseEvent: MouseEvent | undefined;\n  private _autoScroll: AutoScroll | undefined;\n  private _selectedIndicies: { [key: string]: boolean } | undefined;\n  private _preservedIndicies: number[] | undefined;\n  private _itemRectCache: { [key: string]: IRectangle } | undefined;\n  private _allSelectedIndices: { [key: string]: boolean } | undefined;\n  private _scrollableParent: HTMLElement;\n  private _scrollableSurface: HTMLElement;\n  private _scrollTop: number;\n  private _scrollLeft: number;\n  private _isTouch: boolean;\n\n  constructor(props: IMarqueeSelectionProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      dragRect: undefined,\n    };\n  }\n\n  public componentDidMount(): void {\n    this._scrollableParent = findScrollableParent(this._root.current) as HTMLElement;\n    this._scrollableSurface = this._scrollableParent === (window as any) ? document.body : this._scrollableParent;\n    // When scroll events come from window, we need to read scrollTop values from the body.\n\n    const hitTarget = this.props.isDraggingConstrainedToRoot ? this._root.current : this._scrollableSurface;\n\n    this._events.on(hitTarget, 'mousedown', this._onMouseDown);\n    this._events.on(hitTarget, 'touchstart', this._onTouchStart, true);\n    this._events.on(hitTarget, 'pointerdown', this._onPointerDown, true);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n    delete this._scrollableParent;\n    delete this._scrollableSurface;\n\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { rootProps, children, theme, className, styles } = this.props;\n    const { dragRect } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n\n    return (\n      <div {...rootProps} className={classNames.root} ref={this._root}>\n        {children}\n        {dragRect && <div className={classNames.dragMask} />}\n        {dragRect && (\n          <div className={classNames.box} style={dragRect}>\n            <div className={classNames.boxFill} />\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  /** Determine if the mouse event occured on a scrollbar of the target element. */\n  private _isMouseEventOnScrollbar(ev: MouseEvent): boolean {\n    const targetElement = ev.target as HTMLElement;\n    const targetScrollbarWidth = targetElement.offsetWidth - targetElement.clientWidth;\n    const targetScrollbarHeight = targetElement.offsetHeight - targetElement.clientHeight;\n\n    if (targetScrollbarWidth || targetScrollbarHeight) {\n      const targetRect = targetElement.getBoundingClientRect();\n\n      // Check vertical scroll\n      if (getRTL(this.props.theme)) {\n        if (ev.clientX < targetRect.left + targetScrollbarWidth) {\n          return true;\n        }\n      } else {\n        if (ev.clientX > targetRect.left + targetElement.clientWidth) {\n          return true;\n        }\n      }\n\n      // Check horizontal scroll\n      if (ev.clientY > targetRect.top + targetElement.clientHeight) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _onMouseDown = (ev: MouseEvent): void => {\n    const { isEnabled, onShouldStartSelection } = this.props;\n\n    // Ensure the mousedown is within the boundaries of the target. If not, it may have been a click on a scrollbar.\n    if (this._isMouseEventOnScrollbar(ev)) {\n      return;\n    }\n\n    if (this._isInSelectionToggle(ev)) {\n      return;\n    }\n\n    if (\n      !this._isTouch &&\n      isEnabled &&\n      !this._isDragStartInSelection(ev) &&\n      (!onShouldStartSelection || onShouldStartSelection(ev))\n    ) {\n      if (this._scrollableSurface && ev.button === 0 && this._root.current) {\n        this._selectedIndicies = {};\n        this._preservedIndicies = undefined;\n        this._events.on(window, 'mousemove', this._onAsyncMouseMove, true);\n        this._events.on(this._scrollableParent, 'scroll', this._onAsyncMouseMove);\n        this._events.on(window, 'click', this._onMouseUp, true);\n\n        this._autoScroll = new AutoScroll(this._root.current);\n        this._scrollTop = this._scrollableSurface.scrollTop;\n        this._scrollLeft = this._scrollableSurface.scrollLeft;\n        this._rootRect = this._root.current.getBoundingClientRect();\n\n        this._onMouseMove(ev);\n      }\n    }\n  };\n\n  private _onTouchStart = (ev: TouchEvent): void => {\n    this._isTouch = true;\n\n    this._async.setTimeout(() => {\n      this._isTouch = false;\n    }, 0);\n  };\n\n  private _onPointerDown = (ev: PointerEvent): void => {\n    if (ev.pointerType === 'touch') {\n      this._isTouch = true;\n\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 0);\n    }\n  };\n\n  private _getRootRect(): IRectangle {\n    return {\n      left: this._rootRect.left + (this._scrollLeft - this._scrollableSurface.scrollLeft),\n      top: this._rootRect.top + (this._scrollTop - this._scrollableSurface.scrollTop),\n      width: this._rootRect.width,\n      height: this._rootRect.height,\n    };\n  }\n\n  private _onAsyncMouseMove(ev: MouseEvent): void {\n    this._async.requestAnimationFrame(() => {\n      this._onMouseMove(ev);\n    });\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  }\n\n  private _onMouseMove(ev: MouseEvent): boolean | undefined {\n    if (!this._autoScroll) {\n      return;\n    }\n\n    if (ev.clientX !== undefined) {\n      this._lastMouseEvent = ev;\n    }\n\n    const rootRect = this._getRootRect();\n    const currentPoint = { left: ev.clientX - rootRect.left, top: ev.clientY - rootRect.top };\n\n    if (!this._dragOrigin) {\n      this._dragOrigin = currentPoint;\n    }\n\n    if (ev.buttons !== undefined && ev.buttons === 0) {\n      this._onMouseUp(ev);\n    } else {\n      if (this.state.dragRect || getDistanceBetweenPoints(this._dragOrigin, currentPoint) > MIN_DRAG_DISTANCE) {\n        if (!this.state.dragRect) {\n          const { selection } = this.props;\n\n          if (!ev.shiftKey) {\n            selection.setAllSelected(false);\n          }\n\n          this._preservedIndicies = selection && selection.getSelectedIndices && selection.getSelectedIndices();\n        }\n\n        // We need to constrain the current point to the rootRect boundaries.\n        const constrainedPoint = this.props.isDraggingConstrainedToRoot\n          ? {\n              left: Math.max(0, Math.min(rootRect.width, this._lastMouseEvent!.clientX - rootRect.left)),\n              top: Math.max(0, Math.min(rootRect.height, this._lastMouseEvent!.clientY - rootRect.top)),\n            }\n          : {\n              left: this._lastMouseEvent!.clientX - rootRect.left,\n              top: this._lastMouseEvent!.clientY - rootRect.top,\n            };\n\n        const dragRect = {\n          left: Math.min(this._dragOrigin.left || 0, constrainedPoint.left),\n          top: Math.min(this._dragOrigin.top || 0, constrainedPoint.top),\n          width: Math.abs(constrainedPoint.left - (this._dragOrigin.left || 0)),\n          height: Math.abs(constrainedPoint.top - (this._dragOrigin.top || 0)),\n        };\n\n        this._evaluateSelection(dragRect, rootRect);\n\n        this.setState({ dragRect });\n      }\n    }\n\n    return false;\n  }\n\n  private _onMouseUp(ev: MouseEvent): void {\n    this._events.off(window);\n    this._events.off(this._scrollableParent, 'scroll');\n\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n\n    this._autoScroll = this._dragOrigin = this._lastMouseEvent = undefined;\n    this._selectedIndicies = this._itemRectCache = undefined;\n\n    if (this.state.dragRect) {\n      this.setState({\n        dragRect: undefined,\n      });\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _isPointInRectangle(rectangle: IRectangle, point: Point): boolean {\n    return (\n      !!point.top &&\n      rectangle.top < point.top &&\n      rectangle.bottom! > point.top &&\n      !!point.left &&\n      rectangle.left < point.left &&\n      rectangle.right! > point.left\n    );\n  }\n\n  /**\n   * We do not want to start the marquee if we're trying to marquee\n   * from within an existing marquee selection.\n   */\n  private _isDragStartInSelection(ev: MouseEvent): boolean {\n    const selection = this.props.selection;\n    if (!this._root.current || (selection && selection.getSelectedCount() === 0)) {\n      return false;\n    }\n\n    const allElements = this._root.current.querySelectorAll('[data-selection-index]');\n    for (let i = 0; i < allElements.length; i++) {\n      const element = allElements[i];\n      const index = Number(element.getAttribute('data-selection-index'));\n      if (selection.isIndexSelected(index)) {\n        const itemRect = element.getBoundingClientRect();\n        if (this._isPointInRectangle(itemRect, { left: ev.clientX, top: ev.clientY })) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private _isInSelectionToggle(ev: MouseEvent): boolean {\n    let element: HTMLElement | null = ev.target as HTMLElement;\n\n    while (element && element !== this._root.current) {\n      if (element.getAttribute('data-selection-toggle') === 'true') {\n        return true;\n      }\n\n      element = element.parentElement;\n    }\n\n    return false;\n  }\n\n  private _evaluateSelection(dragRect: IRectangle, rootRect: IRectangle): void {\n    // Break early if we don't need to evaluate.\n    if (!dragRect || !this._root.current) {\n      return;\n    }\n\n    const { selection } = this.props;\n    const allElements = this._root.current.querySelectorAll('[data-selection-index]');\n\n    if (!this._itemRectCache) {\n      this._itemRectCache = {};\n    }\n\n    for (let i = 0; i < allElements.length; i++) {\n      const element = allElements[i];\n      const index = element.getAttribute('data-selection-index') as string;\n\n      // Pull the memoized rectangle for the item, or the get the rect and memoize.\n      let itemRect = this._itemRectCache[index];\n\n      if (!itemRect) {\n        itemRect = element.getBoundingClientRect();\n\n        // Normalize the item rect to the dragRect coordinates.\n        itemRect = {\n          left: itemRect.left - rootRect.left,\n          top: itemRect.top - rootRect.top,\n          width: itemRect.width,\n          height: itemRect.height,\n          right: itemRect.left - rootRect.left + itemRect.width,\n          bottom: itemRect.top - rootRect.top + itemRect.height,\n        };\n\n        if (itemRect.width > 0 && itemRect.height > 0) {\n          this._itemRectCache[index] = itemRect;\n        }\n      }\n\n      if (\n        itemRect.top < dragRect.top + dragRect.height &&\n        itemRect.bottom! > dragRect.top &&\n        itemRect.left < dragRect.left + dragRect.width &&\n        itemRect.right! > dragRect.left\n      ) {\n        this._selectedIndicies![index] = true;\n      } else {\n        delete this._selectedIndicies![index];\n      }\n    }\n\n    // set previousSelectedIndices to be all of the selected indices from last time\n    const previousSelectedIndices = this._allSelectedIndices || {};\n    this._allSelectedIndices = {};\n\n    // set all indices that are supposed to be selected in _allSelectedIndices\n    for (const index in this._selectedIndicies!) {\n      if (this._selectedIndicies!.hasOwnProperty(index)) {\n        this._allSelectedIndices![index] = true;\n      }\n    }\n\n    if (this._preservedIndicies) {\n      for (const index of this._preservedIndicies!) {\n        this._allSelectedIndices![index] = true;\n      }\n    }\n\n    // check if needs to update selection, only when current _allSelectedIndices\n    // is different than previousSelectedIndices\n    let needToUpdate = false;\n    for (const index in this._allSelectedIndices!) {\n      if (this._allSelectedIndices![index] !== previousSelectedIndices![index]) {\n        needToUpdate = true;\n        break;\n      }\n    }\n\n    if (!needToUpdate) {\n      for (const index in previousSelectedIndices!) {\n        if (this._allSelectedIndices![index] !== previousSelectedIndices![index]) {\n          needToUpdate = true;\n          break;\n        }\n      }\n    }\n\n    // only update selection when needed\n    if (needToUpdate) {\n      // Stop change events, clear selection to re-populate.\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n\n      for (const index of Object.keys(this._allSelectedIndices!)) {\n        selection.setIndexSelected(Number(index), true, false);\n      }\n\n      selection.setChangeEvents(true);\n    }\n  }\n}\n","import { Point } from './Point';\nimport { ISize } from './ISize';\n\n/**\n * Determines the distance between two points.\n *\n * @public\n */\n/* eslint-disable deprecation/deprecation */\nexport function getDistanceBetweenPoints(point1: Point, point2: Point): number {\n  const left1 = point1.left || point1.x || 0;\n  const top1 = point1.top || point1.y || 0;\n  const left2 = point2.left || point2.x || 0;\n  const top2 = point2.top || point2.y || 0;\n  /* eslint-enable deprecation/deprecation */\n\n  let distance = Math.sqrt(Math.pow(left1 - left2, 2) + Math.pow(top1 - top2, 2));\n\n  return distance;\n}\n\n/**\n * The available fit modes. These should match the fit modes for CSS.\n */\nexport type FitMode = 'contain' | 'cover';\n\n/**\n * Options for fitting content sizes into bounding sizes.\n */\nexport interface IFitContentToBoundsOptions {\n  /**\n   * The size of the content to fit to the bounds.\n   * The output will be proportional to this value.\n   */\n  contentSize: ISize;\n  /**\n   * The size of the bounds.\n   */\n  boundsSize: ISize;\n  /**\n   * The fit mode to apply, either 'contain' or 'cover'.\n   */\n  mode: FitMode;\n  /**\n   * An optional maximum scale factor to apply. The default is 1.\n   * Use Infinity for an unbounded resize.\n   */\n  maxScale?: number;\n}\n\n/**\n * Produces a proportionally-scaled version of an input content size when fit to a bounding size.\n * Given a `contentSize` and a `boundsSize`, this function scales `contentSize` proportionally\n * using either `contain` or `cover` fit behaviors.\n * Use this function to pre-calculate the layout for the CSS `object-fit` and `background-fit` behaviors.\n * With `contain`, the output size must be the largest it can be while completely within the `boundsSize`.\n * With `cover`, the output size must be the smallest it can be while completely around the `boundsSize`.\n * By default, there is a `maxScale` value of 1, which prevents the `contentSize` from being scaled larger.\n *\n * @param options - the options for the bounds fit operation\n */\nexport function fitContentToBounds(options: IFitContentToBoundsOptions): ISize {\n  const { contentSize, boundsSize, mode = 'contain', maxScale = 1 } = options;\n\n  const contentAspectRatio = contentSize.width / contentSize.height;\n  const boundsAspectRatio = boundsSize.width / boundsSize.height;\n\n  let scale: number;\n\n  if (mode === 'contain' ? contentAspectRatio > boundsAspectRatio : contentAspectRatio < boundsAspectRatio) {\n    scale = boundsSize.width / contentSize.width;\n  } else {\n    scale = boundsSize.height / contentSize.height;\n  }\n\n  const finalScale = Math.min(maxScale, scale);\n\n  return {\n    width: contentSize.width * finalScale,\n    height: contentSize.height * finalScale,\n  };\n}\n\n/**\n * Calculates a number's precision based on the number of trailing\n * zeros if the number does not have a decimal indicated by a negative\n * precision. Otherwise, it calculates the number of digits after\n * the decimal point indicated by a positive precision.\n * @param value - the value to determine the precision of\n */\nexport function calculatePrecision(value: number | string): number {\n  /**\n   * Group 1:\n   * [1-9]([0]+$) matches trailing zeros\n   * Group 2:\n   * \\.([0-9]*) matches all digits after a decimal point.\n   */\n  const groups = /[1-9]([0]+$)|\\.([0-9]*)/.exec(String(value));\n  if (!groups) {\n    return 0;\n  }\n  if (groups[1]) {\n    return -groups[1].length;\n  }\n  if (groups[2]) {\n    return groups[2].length;\n  }\n  return 0;\n}\n\n/**\n * Rounds a number to a certain level of precision. Accepts negative precision.\n * @param value - The value that is being rounded.\n * @param precision - The number of decimal places to round the number to\n */\nexport function precisionRound(value: number, precision: number, base: number = 10): number {\n  const exp = Math.pow(base, precision);\n  return Math.round(value * exp) / exp;\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { MarqueeSelectionBase } from './MarqueeSelection.base';\nimport { getStyles } from './MarqueeSelection.styles';\nimport { IMarqueeSelectionProps, IMarqueeSelectionStyleProps, IMarqueeSelectionStyles } from './MarqueeSelection.types';\n\nexport const MarqueeSelection: React.FunctionComponent<IMarqueeSelectionProps> =\n  // TODO: MarqueeSelectionBase defaultProps are not lining up with IMarqueeSelectionProps, so we have to be explicit\n  // with styled here. defaultProps.rootTagName doesn't appear to be used anywhere and defaultProps.rootProps is not\n  // in IMarqueeSelectionProps.\n  styled<IMarqueeSelectionProps, IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>(\n    MarqueeSelectionBase,\n    getStyles,\n    undefined,\n    {\n      scope: 'MarqueeSelection',\n    },\n  );\n","import { IMarqueeSelectionStyleProps, IMarqueeSelectionStyles } from './MarqueeSelection.types';\nimport { HighContrastSelector } from '../../Styling';\n\nexport const getStyles = (props: IMarqueeSelectionStyleProps): IMarqueeSelectionStyles => {\n  const { theme, className } = props;\n  const { palette } = theme;\n\n  return {\n    root: [\n      className,\n      {\n        position: 'relative',\n        cursor: 'default',\n      },\n    ],\n    dragMask: [\n      {\n        position: 'absolute',\n        background: 'rgba(255, 0, 0, 0)',\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        selectors: {\n          [HighContrastSelector]: {\n            background: 'none',\n            backgroundColor: 'transparent',\n          },\n        },\n      },\n    ],\n    box: [\n      {\n        position: 'absolute',\n        boxSizing: 'border-box',\n        border: `1px solid ${palette.themePrimary}`,\n        pointerEvents: 'none',\n        zIndex: 10,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'Highlight',\n          },\n        },\n      },\n    ],\n    boxFill: [\n      {\n        position: 'absolute',\n        boxSizing: 'border-box',\n        backgroundColor: palette.themePrimary,\n        opacity: 0.1,\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        selectors: {\n          [HighContrastSelector]: {\n            background: 'none',\n            backgroundColor: 'transparent',\n          },\n        },\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, divProperties } from '../../Utilities';\nimport { IAnnouncedProps, IAnnouncedStyles } from './Announced.types';\n\nconst getClassNames = classNamesFunction<{}, IAnnouncedStyles>();\n\n/**\n * {@docCategory Announced}\n */\nexport class AnnouncedBase extends React.Component<IAnnouncedProps> {\n  public static defaultProps: Partial<IAnnouncedProps> = {\n    'aria-live': 'polite',\n  };\n\n  public render(): JSX.Element {\n    const { message, styles, as: Root = 'div', className } = this.props;\n\n    const classNames = getClassNames(styles, { className });\n\n    return (\n      <Root role=\"status\" className={classNames.root} {...getNativeProps(this.props, divProperties, ['className'])}>\n        <DelayedRender>\n          <div className={classNames.screenReaderText}>{message}</div>\n        </DelayedRender>\n      </Root>\n    );\n  }\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IAnnouncedProps, IAnnouncedStyles } from './Announced.types';\nimport { AnnouncedBase } from './Announced.base';\nimport { getStyles } from './Announced.styles';\n\nexport const Announced: React.FunctionComponent<IAnnouncedProps> = styled<IAnnouncedProps, {}, IAnnouncedStyles>(\n  AnnouncedBase,\n  getStyles,\n);\n","import { hiddenContentStyle } from '../../Styling';\nimport { IStyleFunction } from '../../Utilities';\nimport { IAnnouncedStyles, IAnnouncedStyleProps } from './Announced.types';\n\nexport const getStyles: IStyleFunction<IAnnouncedStyleProps, IAnnouncedStyles> = props => {\n  return {\n    root: props.className,\n    screenReaderText: hiddenContentStyle,\n  };\n};\n"],"sourceRoot":""}