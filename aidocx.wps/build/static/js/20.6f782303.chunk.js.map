{"version":3,"sources":["../../src/components/MessageBar/MessageBar.types.ts","../../src/renderFunction/composeRenderFunction.tsx","../../src/components/ChoiceGroup/ChoiceGroupOption/ChoiceGroupOption.base.tsx","../../src/components/ChoiceGroup/ChoiceGroupOption/ChoiceGroupOption.styles.ts","../../src/components/ChoiceGroup/ChoiceGroupOption/ChoiceGroupOption.tsx","../../src/components/ChoiceGroup/ChoiceGroup.base.tsx","../../src/components/ChoiceGroup/ChoiceGroup.styles.ts","../../src/components/ChoiceGroup/ChoiceGroup.tsx","../../src/components/MessageBar/MessageBar.base.tsx","../../src/components/MessageBar/MessageBar.styles.ts","../../src/components/MessageBar/MessageBar.tsx"],"names":["MessageBarType","memoizer","outer","inner","innerMemoizer","defaultRender","innerProps","outerProps","composeRenderFunction","getClassNames","classNamesFunction","props","_onChange","evt","onChange","_onBlur","onBlur","_onFocus","onFocus","_onRenderField","id","imageSrc","imageAlt","selectedImageSrc","iconProps","imageSize","width","height","label","onRenderLabel","_onRenderLabel","htmlFor","className","_classNames","field","innerField","imageWrapper","Image","src","alt","selectedImageWrapper","iconWrapper","Icon","labelWrapper","labelId","text","initializeComponentRef","render","ariaLabel","focused","required","theme","disabled","checked","styles","name","onRenderField","this","hasIcon","hasImage","imageIsLarge","root","choiceFieldWrapper","css","input","type","nativeProps","defaultProps","GlobalClassNames","getChoiceGroupFocusStyle","focusBorderColor","hasIconOrImage","selectors","position","outline","border","content","top","right","bottom","left","pointerEvents","borderColor","borderWidth","getImageWrapperStyle","isSelectedImageWrapper","paddingBottom","transitionProperty","transitionDuration","transitionTimingFunction","display","borderStyle","overflow","opacity","ChoiceGroupOption","styled","palette","semanticColors","fonts","classNames","circleBorderColor","neutralPrimary","circleHoveredBorderColor","inputBorderHovered","circleCheckedBorderColor","inputBackgroundChecked","circleCheckedHoveredBorderColor","themeDark","circleDisabledBorderColor","disabledBodySubtext","circleBackgroundColor","bodyBackground","dotUncheckedHoveredColor","neutralSecondary","dotCheckedColor","dotCheckedHoveredColor","dotDisabledColor","labelHoverFocusColor","neutralDark","focusBorder","iconOrImageChoiceBorderUncheckedHoveredColor","iconOrImageChoiceBorderCheckedColor","iconOrImageChoiceBorderCheckedHoveredColor","iconOrImageChoiceBackgroundColor","neutralLighter","fieldHoverOrFocusProperties","color","backgroundColor","enabledFieldWithImageHoverOrFocusProperties","circleAreaProperties","fontWeight","boxSizing","borderRadius","background","forcedColorAdjust","dotAreaProperties","choiceFieldSize","radioButtonSpacing","medium","alignItems","bodyText","minHeight","marginTop","paddingLeft","fontSize","margin","cursor","verticalAlign","userSelect","paddingTop","textAlign","justifyContent","flexDirection","disabledBodyText","paddingRight","lineHeight","labelWrapperLineHeight","maxWidth","whiteSpace","undefined","scope","_focusCallbacks","_changeCallbacks","ev","option","setState","keyFocused","defaultSelectedKey","options","validDefaultSelectedKey","_isControlled","some","key","state","keyChecked","_getKeyChecked","_id","getId","_labelId","value","componentDidUpdate","prevProps","prevState","newKeyChecked","divProps","optionsContainIconOrImage","ariaLabelledBy","applicationRole","role","Label","flexContainer","map","innerOptionProps","_getOptionId","_getOptionLabelId","focus","optionToFocus","checkedOption","filter","elementToFocus","document","getElementById","setFocusVisibility","onChanged","originalOption","selectedKey","optionsChecked","ChoiceGroup","flexWrap","ICON_MAP","info","warning","error","blocked","severeWarning","success","_getRegionProps","hasActions","_getActionsDiv","_getDismissDiv","regionProps","_onClick","expandSingleLine","showContent","isMultiline","_getClassNames","_renderMultiLine","_renderSingleLine","actions","onDismiss","dismissIconProps","IconButton","dismissal","onClick","iconName","title","dismissButtonAriaLabel","_getDismissSingleLine","dismissSingleLine","_getExpandSingleLine","truncated","expand","overflowButtonAriaLabel","_getIconSpan","messageBarIconProps","iconContainer","icon","messageBarType","_renderInnerText","_getAnnouncementPriority","innerText","DelayedRender","children","multiline","singleline","dismissalSingleLine","expandingSingleLine","actionsSingleline","highContrastBackgroundColor","iconColor","MessageBar","SmallScreenSelector","dismissalAndExpandIconStyle","xSmall","messageText","dismissalAndExpandStyle","inset","highContrastStyle","outlineOffset","flexShrink","padding","wordBreak","messageLink","messageLinkHovered","minWidth","flexGrow","small","marginRight","textOverflow","flexBasis","marginLeft","marginBottom"],"mappings":"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","file":"static/js/20.6f782303.chunk.js","sourcesContent":["import * as React from 'react';\nimport { BaseButton, Button } from '../../Button';\nimport { ITheme, IStyle } from '../../Styling';\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport { IIconProps } from '../../Icon';\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBar {}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the IMessageBar interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IMessageBar>;\n\n  /**\n   * The type of MessageBar to render.\n   * @defaultvalue MessageBarType.info\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * The actions you want to show on the other side.\n   */\n  actions?: JSX.Element;\n\n  /**\n   * A description of the message bar for the benefit of screen readers.\n   * @deprecated Use native prop `aria-label` instead.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Whether the message bar has a dismiss button and its callback.\n   * If null, we don't show a dismiss button.\n   * @defaultvalue null\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  onDismiss?: (ev?: React.MouseEvent<HTMLElement | BaseButton | Button>) => any;\n\n  /**\n   * Determines if the message bar is multi lined.\n   * If false, and the text overflows over buttons or to another line, it is clipped.\n   * @defaultvalue true\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Aria label on dismiss button if onDismiss is defined.\n   */\n  dismissButtonAriaLabel?: string;\n\n  /**\n   * Determines if the message bar text is truncated.\n   * If true, a button will render to toggle between a single line view and multiline view.\n   * This prop is for single line message bars with no buttons only in a limited space scenario.\n   * @defaultvalue false\n   */\n  truncated?: boolean;\n\n  /**\n   * Aria label on overflow button if truncated is defined.\n   */\n  overflowButtonAriaLabel?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the MessageBar.\n   */\n  className?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>;\n\n  /**\n   * Custom icon prop to replace the dismiss icon.\n   * If unset, default will be the Fabric Clear icon.\n   */\n  dismissIconProps?: IIconProps;\n\n  /**\n   * Custom icon prop to replace the message bar icon.\n   * If unset, default will be the icon set by messageBarType.\n   */\n  messageBarIconProps?: IIconProps;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyleProps {\n  /**\n   * Theme (provided through customization).\n   */\n  theme: ITheme;\n\n  /**\n   * Additional CSS class(es).\n   */\n  className?: string;\n\n  /**\n   * Type of the MessageBar.\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * Whether the MessageBar contains a dismiss button.\n   */\n  onDismiss?: boolean;\n\n  /**\n   * Whether the text is truncated.\n   */\n  truncated?: boolean;\n\n  /**\n   * Whether the MessageBar is rendered in multi line (as opposed to single line) mode.\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Whether the single line MessageBar is being expanded.\n   */\n  expandSingleLine?: boolean;\n\n  /**\n   * Whether the MessageBar contains any action elements.\n   */\n  actions?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyles {\n  /**\n   * Style set for the root element.\n   */\n  root?: IStyle;\n\n  /**\n   * Style set for the element containing the icon, text, and optional dismiss button.\n   */\n  content?: IStyle;\n\n  /**\n   * Style set for the element containing the icon.\n   */\n  iconContainer?: IStyle;\n\n  /**\n   * Style set for the icon.\n   */\n  icon?: IStyle;\n\n  /**\n   * Style set for the element containing the text.\n   */\n  text?: IStyle;\n\n  /**\n   * Style set for the text.\n   */\n  innerText?: IStyle;\n\n  /**\n   * Style set for the optional dismiss button.\n   */\n  dismissal?: IStyle;\n\n  /**\n   * Style set for the icon used to expand and collapse the MessageBar.\n   */\n  expand?: IStyle;\n\n  /**\n   * Style set for the element containing the dismiss button.\n   */\n  dismissSingleLine?: IStyle;\n\n  /**\n   * Style set for the element containing the expand icon.\n   */\n  expandSingleLine?: IStyle;\n\n  /**\n   * Style set for the optional element containing the action elements.\n   */\n  actions?: IStyle;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport enum MessageBarType {\n  /** Info styled MessageBar */\n  info = 0,\n  /** Error styled MessageBar */\n  error = 1,\n  /** Blocked styled MessageBar */\n  blocked = 2,\n  /** SevereWarning styled MessageBar */\n  severeWarning = 3,\n  /** Success styled MessageBar */\n  success = 4,\n  /** Warning styled MessageBar */\n  warning = 5,\n}\n","import { IRenderFunction } from '../IRenderFunction';\nimport { createMemoizer } from '../memoize';\n\ninterface IRenderFunctionComposer {\n  <TProps>(outer: IRenderFunction<TProps>): (inner: IRenderFunction<TProps>) => IRenderFunction<TProps>;\n}\n\nfunction createComposedRenderFunction<TProps>(\n  outer: IRenderFunction<TProps>,\n): (inner: IRenderFunction<TProps>) => IRenderFunction<TProps> {\n  const outerMemoizer = createMemoizer((inner: IRenderFunction<TProps>) => {\n    const innerMemoizer = createMemoizer((defaultRender: IRenderFunction<TProps>) => {\n      return (innerProps?: TProps) => {\n        return inner(innerProps, defaultRender);\n      };\n    });\n\n    return (outerProps?: TProps, defaultRender?: IRenderFunction<TProps>) => {\n      return outer(outerProps, defaultRender ? innerMemoizer(defaultRender) : inner);\n    };\n  });\n\n  return outerMemoizer;\n}\n\nconst memoizer = createMemoizer<IRenderFunctionComposer>(createComposedRenderFunction);\n\n/**\n * Composes two 'render functions' to produce a final render function that renders\n * the outer function, passing the inner function as 'default render'. The inner function\n * is then passed the original 'default render' prop.\n * @public\n */\nexport function composeRenderFunction<TProps>(\n  outer: IRenderFunction<TProps>,\n  inner: IRenderFunction<TProps>,\n): IRenderFunction<TProps> {\n  return memoizer(outer)(inner);\n}\n","import * as React from 'react';\nimport { Image } from '../../../Image';\nimport { Icon } from '../../../Icon';\nimport {\n  IChoiceGroupOptionProps,\n  IChoiceGroupOptionStyleProps,\n  IChoiceGroupOptionStyles,\n} from './ChoiceGroupOption.types';\nimport { classNamesFunction, getNativeProps, inputProperties, css, initializeComponentRef } from '../../../Utilities';\nimport { IProcessedStyleSet } from '../../../Styling';\nimport { composeRenderFunction } from '@uifabric/utilities';\n\nconst getClassNames = classNamesFunction<IChoiceGroupOptionStyleProps, IChoiceGroupOptionStyles>();\n\nconst LARGE_IMAGE_SIZE = 71;\n\n/**\n * {@docCategory ChoiceGroup}\n */\nexport class ChoiceGroupOptionBase extends React.Component<IChoiceGroupOptionProps, {}> {\n  public static defaultProps: Partial<IChoiceGroupOptionProps> = {\n    // This ensures default imageSize value doesn't mutate. Mutation can cause style re-calcuation.\n    imageSize: { width: 32, height: 32 },\n  };\n\n  private _classNames: IProcessedStyleSet<IChoiceGroupOptionStyles>;\n\n  constructor(props: IChoiceGroupOptionProps) {\n    super(props);\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      ariaLabel,\n      focused,\n      required,\n      theme,\n      iconProps,\n      imageSrc,\n      imageSize,\n      disabled,\n      // eslint-disable-next-line deprecation/deprecation\n      checked,\n      id,\n      styles,\n      name,\n      onRenderField = this._onRenderField,\n      ...rest\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      hasIcon: !!iconProps,\n      hasImage: !!imageSrc,\n      checked,\n      disabled,\n      imageIsLarge: !!imageSrc && (imageSize!.width > LARGE_IMAGE_SIZE || imageSize!.height > LARGE_IMAGE_SIZE),\n      imageSize,\n      focused,\n    });\n\n    const { className, ...nativeProps } = getNativeProps<{ className: string }>(rest, inputProperties);\n\n    return (\n      <div className={this._classNames.root}>\n        <div className={this._classNames.choiceFieldWrapper}>\n          <input\n            aria-label={ariaLabel}\n            id={id}\n            className={css(this._classNames.input, className)}\n            type=\"radio\"\n            name={name}\n            disabled={disabled}\n            checked={checked}\n            required={required}\n            {...nativeProps}\n            onChange={this._onChange}\n            onFocus={this._onFocus}\n            onBlur={this._onBlur}\n          />\n          {onRenderField(this.props, this._onRenderField)}\n        </div>\n      </div>\n    );\n  }\n\n  private _onChange = (evt: React.FormEvent<HTMLInputElement>): void => {\n    const { onChange } = this.props;\n    if (onChange) {\n      onChange(evt, this.props);\n    }\n  };\n\n  private _onBlur = (evt: React.FocusEvent<HTMLElement>) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(evt, this.props);\n    }\n  };\n\n  private _onFocus = (evt: React.FocusEvent<HTMLElement>) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(evt, this.props);\n    }\n  };\n\n  private _onRenderField = (props: IChoiceGroupOptionProps): JSX.Element => {\n    const { id, imageSrc, imageAlt = '', selectedImageSrc, iconProps } = props;\n\n    const imageSize = props.imageSize ? props.imageSize : { width: 32, height: 32 };\n\n    const onRenderLabel = props.onRenderLabel\n      ? composeRenderFunction(props.onRenderLabel, this._onRenderLabel)\n      : this._onRenderLabel;\n\n    const label = onRenderLabel(props);\n\n    return (\n      <label htmlFor={id} className={this._classNames.field}>\n        {imageSrc && (\n          <div className={this._classNames.innerField}>\n            <div className={this._classNames.imageWrapper}>\n              <Image src={imageSrc} alt={imageAlt} width={imageSize.width} height={imageSize.height} />\n            </div>\n            <div className={this._classNames.selectedImageWrapper}>\n              <Image src={selectedImageSrc} alt={imageAlt} width={imageSize.width} height={imageSize.height} />\n            </div>\n          </div>\n        )}\n        {iconProps && (\n          <div className={this._classNames.innerField}>\n            <div className={this._classNames.iconWrapper}>\n              <Icon {...iconProps} />\n            </div>\n          </div>\n        )}\n        {imageSrc || iconProps ? <div className={this._classNames.labelWrapper}>{label}</div> : label}\n      </label>\n    );\n  };\n\n  private _onRenderLabel = (props: IChoiceGroupOptionProps): JSX.Element => {\n    return (\n      <span id={props.labelId} className=\"ms-ChoiceFieldLabel\">\n        {props.text}\n      </span>\n    );\n  };\n}\n","import { HighContrastSelector, IStyle, getGlobalClassNames, getHighContrastNoAdjustStyle } from '../../../Styling';\nimport { IsFocusVisibleClassName } from '../../../Utilities';\nimport { IChoiceGroupOptionStyleProps, IChoiceGroupOptionStyles } from './ChoiceGroupOption.types';\n\nconst GlobalClassNames = {\n  root: 'ms-ChoiceField',\n  choiceFieldWrapper: 'ms-ChoiceField-wrapper',\n  input: 'ms-ChoiceField-input',\n  field: 'ms-ChoiceField-field',\n  innerField: 'ms-ChoiceField-innerField',\n  imageWrapper: 'ms-ChoiceField-imageWrapper',\n  iconWrapper: 'ms-ChoiceField-iconWrapper',\n  labelWrapper: 'ms-ChoiceField-labelWrapper',\n  checked: 'is-checked',\n};\n\nconst labelWrapperLineHeight = 15;\nconst labelWrapperHeight = labelWrapperLineHeight * 2 + 2; // adding 2px height to ensure text doesn't get cutoff\nconst iconSize = 32;\nconst choiceFieldSize = 20;\nconst choiceFieldTransitionDuration = '200ms';\nconst choiceFieldTransitionTiming = 'cubic-bezier(.4, 0, .23, 1)';\nconst radioButtonSpacing = 3;\nconst radioButtonInnerSize = 5;\n\nfunction getChoiceGroupFocusStyle(focusBorderColor: string, hasIconOrImage?: boolean): IStyle {\n  return [\n    'is-inFocus',\n    {\n      selectors: {\n        [`.${IsFocusVisibleClassName} &`]: {\n          position: 'relative',\n          outline: 'transparent',\n          selectors: {\n            '::-moz-focus-inner': {\n              border: 0,\n            },\n            ':after': {\n              content: '\"\"',\n              top: -2,\n              right: -2,\n              bottom: -2,\n              left: -2,\n              pointerEvents: 'none',\n              border: `1px solid ${focusBorderColor}`,\n              position: 'absolute',\n              selectors: {\n                [HighContrastSelector]: {\n                  borderColor: 'WindowText',\n                  borderWidth: hasIconOrImage ? 1 : 2,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  ];\n}\n\nfunction getImageWrapperStyle(isSelectedImageWrapper: boolean, className?: string, checked?: boolean): IStyle {\n  return [\n    className,\n    {\n      paddingBottom: 2,\n      transitionProperty: 'opacity',\n      transitionDuration: choiceFieldTransitionDuration,\n      transitionTimingFunction: 'ease',\n      selectors: {\n        '.ms-Image': {\n          display: 'inline-block',\n          borderStyle: 'none',\n        },\n      },\n    },\n    (checked ? !isSelectedImageWrapper : isSelectedImageWrapper) && [\n      'is-hidden',\n      {\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n        opacity: 0,\n      },\n    ],\n  ];\n}\n\nexport const getStyles = (props: IChoiceGroupOptionStyleProps): IChoiceGroupOptionStyles => {\n  const { theme, hasIcon, hasImage, checked, disabled, imageIsLarge, focused, imageSize } = props;\n  const { palette, semanticColors, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // Tokens\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder\n  const circleBorderColor = palette.neutralPrimary;\n  const circleHoveredBorderColor = semanticColors.inputBorderHovered;\n  const circleCheckedBorderColor = semanticColors.inputBackgroundChecked;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered\n  const circleCheckedHoveredBorderColor = palette.themeDark;\n  const circleDisabledBorderColor = semanticColors.disabledBodySubtext;\n  const circleBackgroundColor = semanticColors.bodyBackground;\n  const dotUncheckedHoveredColor = palette.neutralSecondary;\n  const dotCheckedColor = semanticColors.inputBackgroundChecked;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered\n  const dotCheckedHoveredColor = palette.themeDark;\n  const dotDisabledColor = semanticColors.disabledBodySubtext;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.bodyTextChecked\n  const labelHoverFocusColor = palette.neutralDark;\n  const focusBorderColor = semanticColors.focusBorder;\n  const iconOrImageChoiceBorderUncheckedHoveredColor = semanticColors.inputBorderHovered;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered\n  const iconOrImageChoiceBorderCheckedColor = semanticColors.inputBackgroundChecked;\n  const iconOrImageChoiceBorderCheckedHoveredColor = palette.themeDark;\n  const iconOrImageChoiceBackgroundColor = palette.neutralLighter;\n\n  const fieldHoverOrFocusProperties = {\n    selectors: {\n      '.ms-ChoiceFieldLabel': {\n        color: labelHoverFocusColor,\n      },\n      ':before': {\n        borderColor: checked ? circleCheckedHoveredBorderColor : circleHoveredBorderColor,\n      },\n      ':after': [\n        !hasIcon &&\n          !hasImage &&\n          !checked && {\n            content: '\"\"',\n            transitionProperty: 'background-color',\n            left: 5,\n            top: 5,\n            width: 10,\n            height: 10,\n            backgroundColor: dotUncheckedHoveredColor,\n          },\n        checked && {\n          borderColor: dotCheckedHoveredColor,\n        },\n      ],\n    },\n  };\n\n  const enabledFieldWithImageHoverOrFocusProperties = {\n    borderColor: checked ? iconOrImageChoiceBorderCheckedHoveredColor : iconOrImageChoiceBorderUncheckedHoveredColor,\n    selectors: {\n      ':before': {\n        opacity: 1,\n        borderColor: checked ? circleCheckedHoveredBorderColor : circleHoveredBorderColor,\n      },\n    },\n  };\n\n  const circleAreaProperties: IStyle = [\n    {\n      content: '\"\"',\n      display: 'inline-block',\n      backgroundColor: circleBackgroundColor,\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: circleBorderColor,\n      width: choiceFieldSize,\n      height: choiceFieldSize,\n      fontWeight: 'normal',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      boxSizing: 'border-box',\n      transitionProperty: 'border-color',\n      transitionDuration: choiceFieldTransitionDuration,\n      transitionTimingFunction: choiceFieldTransitionTiming,\n      borderRadius: '50%',\n    },\n    disabled && {\n      borderColor: circleDisabledBorderColor,\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'GrayText',\n          background: 'Window',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n    checked && {\n      borderColor: disabled ? circleDisabledBorderColor : circleCheckedBorderColor,\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'Highlight',\n          background: 'Window',\n          forcedColorAdjust: 'none',\n        },\n      },\n    },\n    (hasIcon || hasImage) && {\n      top: radioButtonSpacing,\n      right: radioButtonSpacing,\n      left: 'auto', // To reset the value of 'left' to its default value, so that 'right' works\n      opacity: checked ? 1 : 0,\n    },\n  ];\n\n  const dotAreaProperties: IStyle = [\n    {\n      content: '\"\"',\n      width: 0,\n      height: 0,\n      borderRadius: '50%',\n      position: 'absolute',\n      left: choiceFieldSize / 2,\n      right: 0,\n      transitionProperty: 'border-width',\n      transitionDuration: choiceFieldTransitionDuration,\n      transitionTimingFunction: choiceFieldTransitionTiming,\n      boxSizing: 'border-box',\n    },\n    checked && {\n      borderWidth: 5,\n      borderStyle: 'solid',\n      borderColor: disabled ? dotDisabledColor : dotCheckedColor,\n      left: 5,\n      top: 5,\n      width: 10,\n      height: 10,\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'Highlight',\n          forcedColorAdjust: 'none',\n        },\n      },\n    },\n    checked &&\n      (hasIcon || hasImage) && {\n        top: radioButtonSpacing + radioButtonInnerSize,\n        right: radioButtonSpacing + radioButtonInnerSize,\n        left: 'auto', // To reset the value of 'left' to its default value, so that 'right' works\n      },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        boxSizing: 'border-box',\n        color: semanticColors.bodyText,\n        minHeight: 26,\n        border: 'none',\n        position: 'relative',\n        marginTop: 8,\n        selectors: {\n          '.ms-ChoiceFieldLabel': {\n            display: 'inline-block',\n          },\n        },\n      },\n      !hasIcon &&\n        !hasImage && {\n          selectors: {\n            '.ms-ChoiceFieldLabel': {\n              paddingLeft: '26px',\n            },\n          },\n        },\n      hasImage && 'ms-ChoiceField--image',\n      hasIcon && 'ms-ChoiceField--icon',\n      (hasIcon || hasImage) && {\n        display: 'inline-flex',\n        fontSize: 0,\n        margin: '0 4px 4px 0',\n        paddingLeft: 0,\n        backgroundColor: iconOrImageChoiceBackgroundColor,\n        height: '100%',\n      },\n    ],\n    choiceFieldWrapper: [\n      classNames.choiceFieldWrapper,\n      focused && getChoiceGroupFocusStyle(focusBorderColor, hasIcon || hasImage),\n    ],\n    // The hidden input\n    input: [\n      classNames.input,\n      {\n        position: 'absolute',\n        opacity: 0,\n        top: 0,\n        right: 0,\n        width: '100%',\n        height: '100%',\n        margin: 0,\n      },\n      disabled && 'is-disabled',\n    ],\n    field: [\n      classNames.field,\n      checked && classNames.checked,\n      {\n        display: 'inline-block',\n        cursor: 'pointer',\n        marginTop: 0,\n        position: 'relative',\n        verticalAlign: 'top',\n        userSelect: 'none',\n        minHeight: 20,\n        selectors: {\n          ':hover': !disabled && fieldHoverOrFocusProperties,\n          ':focus': !disabled && fieldHoverOrFocusProperties,\n\n          // The circle\n          ':before': circleAreaProperties,\n\n          // The dot\n          ':after': dotAreaProperties,\n        },\n      },\n      hasIcon && 'ms-ChoiceField--icon',\n      hasImage && 'ms-ChoiceField-field--image',\n      (hasIcon || hasImage) && {\n        boxSizing: 'content-box',\n        cursor: 'pointer',\n        paddingTop: 22,\n        margin: 0,\n        textAlign: 'center',\n        transitionProperty: 'all',\n        transitionDuration: choiceFieldTransitionDuration,\n        transitionTimingFunction: 'ease',\n        border: '1px solid transparent',\n        justifyContent: 'center',\n        alignItems: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n      },\n      checked && {\n        borderColor: iconOrImageChoiceBorderCheckedColor,\n      },\n      (hasIcon || hasImage) &&\n        !disabled && {\n          selectors: {\n            ':hover': enabledFieldWithImageHoverOrFocusProperties,\n            ':focus': enabledFieldWithImageHoverOrFocusProperties,\n          },\n        },\n      disabled && {\n        cursor: 'default',\n        selectors: {\n          '.ms-ChoiceFieldLabel': {\n            color: semanticColors.disabledBodyText,\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'GrayText',\n                ...getHighContrastNoAdjustStyle(),\n              },\n            },\n          },\n        },\n      },\n      checked &&\n        disabled && {\n          borderColor: iconOrImageChoiceBackgroundColor,\n        },\n    ],\n    innerField: [\n      classNames.innerField,\n      hasImage && {\n        // using non-null assertion because we have a default in `ChoiceGroupOptionBase` class.\n        height: imageSize!.height,\n        width: imageSize!.width,\n      },\n      (hasIcon || hasImage) && {\n        position: 'relative',\n        display: 'inline-block',\n        paddingLeft: 30,\n        paddingRight: 30,\n      },\n      (hasIcon || hasImage) &&\n        imageIsLarge && {\n          paddingLeft: 24,\n          paddingRight: 24,\n        },\n      (hasIcon || hasImage) &&\n        disabled && {\n          opacity: 0.25,\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'GrayText',\n              opacity: 1,\n            },\n          },\n        },\n    ],\n    imageWrapper: getImageWrapperStyle(false, classNames.imageWrapper, checked),\n    selectedImageWrapper: getImageWrapperStyle(true, classNames.imageWrapper, checked),\n    iconWrapper: [\n      classNames.iconWrapper,\n      {\n        fontSize: iconSize,\n        lineHeight: iconSize,\n        height: iconSize,\n      },\n    ],\n    labelWrapper: [\n      classNames.labelWrapper,\n      fonts.medium,\n      (hasIcon || hasImage) && {\n        display: 'block',\n        position: 'relative',\n        margin: '4px 8px 2px 8px',\n        height: labelWrapperHeight,\n        lineHeight: labelWrapperLineHeight,\n        // using non-null assertion because we have a default in `ChoiceGroupOptionBase` class.\n        maxWidth: imageSize!.width * 2,\n        overflow: 'hidden',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../../Utilities';\nimport { ChoiceGroupOptionBase } from './ChoiceGroupOption.base';\nimport {\n  IChoiceGroupOptionProps,\n  IChoiceGroupOptionStyleProps,\n  IChoiceGroupOptionStyles,\n} from './ChoiceGroupOption.types';\nimport { getStyles } from './ChoiceGroupOption.styles';\n\nexport const ChoiceGroupOption: React.FunctionComponent<IChoiceGroupOptionProps> = styled<\n  IChoiceGroupOptionProps,\n  IChoiceGroupOptionStyleProps,\n  IChoiceGroupOptionStyles\n>(ChoiceGroupOptionBase, getStyles, undefined, { scope: 'ChoiceGroupOption' });\n","import * as React from 'react';\n\nimport { Label } from '../../Label';\nimport {\n  initializeComponentRef,\n  warnDeprecations,\n  warnMutuallyExclusive,\n  classNamesFunction,\n  find,\n  getId,\n  isControlled,\n  getNativeProps,\n  divProperties,\n  setFocusVisibility,\n} from '../../Utilities';\nimport {\n  IChoiceGroup,\n  IChoiceGroupOption,\n  IChoiceGroupProps,\n  IChoiceGroupStyleProps,\n  IChoiceGroupStyles,\n} from './ChoiceGroup.types';\nimport { ChoiceGroupOption, IChoiceGroupOptionProps } from './ChoiceGroupOption/index';\n\nconst getClassNames = classNamesFunction<IChoiceGroupStyleProps, IChoiceGroupStyles>();\n\nexport interface IChoiceGroupState {\n  /**\n   * Current selected option, for **internal use only**.\n   * External users should access `IChoiceGroup.checkedOption` instead.\n   */\n  // TODO (Fabric 8?) - once we removed the checked property from individual options,\n  // we can probably store only the uncontrolled value in the state (right now it tracks\n  // the value regardless of controlled/uncontrolled--though if controlled, it only updates\n  // the value in state when the selectedKey prop updates)\n  keyChecked?: string | number;\n\n  /** Is set when the control has focus. */\n  keyFocused?: string | number;\n}\n\n/**\n * {@docCategory ChoiceGroup}\n */\nexport class ChoiceGroupBase extends React.Component<IChoiceGroupProps, IChoiceGroupState> implements IChoiceGroup {\n  private _id: string;\n  private _labelId: string;\n  private _focusCallbacks: { [key: string]: IChoiceGroupOptionProps['onFocus'] } = {};\n  private _changeCallbacks: { [key: string]: IChoiceGroupOptionProps['onBlur'] } = {};\n\n  constructor(props: IChoiceGroupProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('ChoiceGroup', props, { onChanged: 'onChange' });\n      warnMutuallyExclusive('ChoiceGroup', props, {\n        selectedKey: 'defaultSelectedKey',\n      });\n    }\n\n    const { defaultSelectedKey, options = [] } = props;\n    const validDefaultSelectedKey =\n      !_isControlled(props) &&\n      defaultSelectedKey !== undefined &&\n      options.some(option => option.key === defaultSelectedKey);\n\n    this.state = {\n      keyChecked: validDefaultSelectedKey ? defaultSelectedKey : this._getKeyChecked(props),\n    };\n\n    this._id = getId('ChoiceGroup');\n    this._labelId = getId('ChoiceGroupLabel');\n  }\n\n  /**\n   * Gets the current checked option.\n   */\n  public get checkedOption(): IChoiceGroupOption | undefined {\n    const { options = [] } = this.props;\n    return find(options, (value: IChoiceGroupOption) => value.key === this.state.keyChecked);\n  }\n\n  public componentDidUpdate(prevProps: IChoiceGroupProps, prevState: IChoiceGroupState): void {\n    // Only update if a new props object has been passed in (don't care about state updates)\n    if (prevProps !== this.props) {\n      const newKeyChecked = this._getKeyChecked(this.props);\n      const oldKeyChecked = this._getKeyChecked(prevProps);\n\n      if (newKeyChecked !== oldKeyChecked) {\n        this.setState({\n          keyChecked: newKeyChecked,\n        });\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const { className, theme, styles, options = [], label, required, disabled, name } = this.props;\n    const { keyChecked, keyFocused } = this.state;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, [\n      'onChange',\n      'className',\n      'required',\n    ]);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      optionsContainIconOrImage: options.some(option => !!(option.iconProps || option.imageSrc)),\n    });\n\n    const labelId = this._id + '-label';\n    const ariaLabelledBy = this.props.ariaLabelledBy || (label ? labelId : this.props['aria-labelledby']);\n\n    // TODO (Fabric 8?) - if possible, move `root` class to the actual root and eliminate\n    // `applicationRole` class (but the div structure will stay the same by necessity)\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div className={classNames.applicationRole} {...divProps}>\n        <div\n          className={classNames.root}\n          role=\"radiogroup\"\n          {...(ariaLabelledBy && { 'aria-labelledby': ariaLabelledBy })}\n        >\n          {label && (\n            <Label className={classNames.label} required={required} id={labelId} disabled={disabled}>\n              {label}\n            </Label>\n          )}\n          <div className={classNames.flexContainer}>\n            {options.map((option: IChoiceGroupOption) => {\n              const innerOptionProps = {\n                ...option,\n                focused: option.key === keyFocused,\n                checked: option.key === keyChecked,\n                disabled: option.disabled || disabled,\n                id: this._getOptionId(option),\n                labelId: this._getOptionLabelId(option),\n                name: name || this._id,\n                required,\n              };\n\n              return (\n                <ChoiceGroupOption\n                  key={option.key}\n                  onBlur={this._onBlur}\n                  onFocus={this._onFocus(option.key)}\n                  onChange={this._onChange(option.key)}\n                  {...innerOptionProps}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  public focus() {\n    const { options = [] } = this.props;\n    const optionToFocus = this.checkedOption || options.filter(option => !option.disabled)[0];\n    const elementToFocus = optionToFocus && document.getElementById(this._getOptionId(optionToFocus));\n    if (elementToFocus) {\n      elementToFocus.focus();\n      setFocusVisibility(true, elementToFocus as Element);\n    }\n  }\n\n  private _onFocus(key: string) {\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._focusCallbacks[key]) {\n      this._focusCallbacks[key] = (\n        ev: React.FocusEvent<HTMLElement | HTMLInputElement>,\n        option: IChoiceGroupOption,\n      ) => {\n        this.setState({\n          keyFocused: key,\n        });\n      };\n    }\n    return this._focusCallbacks[key];\n  }\n\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>, option: IChoiceGroupOption) => {\n    this.setState({\n      keyFocused: undefined,\n    });\n  };\n\n  private _onChange(key: string) {\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._changeCallbacks[key]) {\n      this._changeCallbacks[key] = (\n        evt: React.FormEvent<HTMLElement | HTMLInputElement>,\n        option: IChoiceGroupOption,\n      ) => {\n        // eslint-disable-next-line deprecation/deprecation\n        const { onChanged, onChange } = this.props;\n\n        // Only manage state in uncontrolled scenarios.\n        if (!_isControlled(this.props)) {\n          this.setState({\n            keyChecked: key,\n          });\n        }\n\n        // Get the original option without the `key` prop removed\n        const originalOption = find(this.props.options || [], (value: IChoiceGroupOption) => value.key === key);\n\n        // TODO: onChanged deprecated, remove else if after 07/17/2017 when onChanged has been removed.\n        if (onChange) {\n          onChange(evt, originalOption);\n        } else if (onChanged) {\n          onChanged(originalOption!, evt);\n        }\n      };\n    }\n    return this._changeCallbacks[key];\n  }\n\n  /**\n   * Returns `selectedKey` if provided, or the key of the first option with the `checked` prop set.\n   */\n  private _getKeyChecked(props: IChoiceGroupProps): string | number | undefined {\n    if (props.selectedKey !== undefined) {\n      return props.selectedKey;\n    }\n\n    const { options = [] } = props;\n    // eslint-disable-next-line deprecation/deprecation\n    const optionsChecked = options.filter((option: IChoiceGroupOption) => option.checked);\n    return optionsChecked[0] && optionsChecked[0].key;\n  }\n\n  private _getOptionId(option: IChoiceGroupOption): string {\n    return option.id || `${this._id}-${option.key}`;\n  }\n\n  private _getOptionLabelId(option: IChoiceGroupOption): string {\n    return option.labelId || `${this._labelId}-${option.key}`;\n  }\n}\n\nfunction _isControlled(props: IChoiceGroupProps): boolean {\n  return isControlled(props, 'selectedKey');\n}\n","import { IChoiceGroupStyleProps, IChoiceGroupStyles } from './ChoiceGroup.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-ChoiceFieldGroup',\n  flexContainer: 'ms-ChoiceFieldGroup-flexContainer',\n};\n\nexport const getStyles = (props: IChoiceGroupStyleProps): IChoiceGroupStyles => {\n  const { className, optionsContainIconOrImage, theme } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    // TODO (Fabric 8?) - merge className back into `root` and apply root style to\n    // the actual root role=application element\n    applicationRole: className,\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        display: 'block',\n      },\n    ],\n    flexContainer: [\n      classNames.flexContainer,\n      optionsContainIconOrImage && {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ChoiceGroupBase } from './ChoiceGroup.base';\nimport { IChoiceGroupProps, IChoiceGroupStyles, IChoiceGroupStyleProps } from './ChoiceGroup.types';\nimport { getStyles } from './ChoiceGroup.styles';\n\nexport const ChoiceGroup: React.FunctionComponent<IChoiceGroupProps> = styled<\n  IChoiceGroupProps,\n  IChoiceGroupStyleProps,\n  IChoiceGroupStyles\n>(ChoiceGroupBase, getStyles, undefined, { scope: 'ChoiceGroup' });\n","import * as React from 'react';\nimport {\n  DelayedRender,\n  getId,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties,\n  css,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles, MessageBarType } from './MessageBar.types';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nexport interface IMessageBarState {\n  labelId?: string;\n  showContent?: boolean;\n  expandSingleLine?: boolean;\n}\n\nexport class MessageBarBase extends React.Component<IMessageBarProps, IMessageBarState> {\n  public static defaultProps: IMessageBarProps = {\n    messageBarType: MessageBarType.info,\n    onDismiss: undefined,\n    isMultiline: true,\n  };\n\n  private ICON_MAP = {\n    [MessageBarType.info]: 'Info',\n    [MessageBarType.warning]: 'Info',\n    [MessageBarType.error]: 'ErrorBadge',\n    [MessageBarType.blocked]: 'Blocked2',\n    [MessageBarType.severeWarning]: 'Warning',\n    [MessageBarType.success]: 'Completed',\n  };\n\n  private _classNames: { [key in keyof IMessageBarStyles]: string };\n\n  constructor(props: IMessageBarProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this.state = {\n      labelId: getId('MessageBar'),\n      // eslint-disable-next-line react/no-unused-state\n      showContent: false,\n      expandSingleLine: false,\n    };\n  }\n\n  public render(): JSX.Element {\n    const { isMultiline } = this.props;\n\n    this._classNames = this._getClassNames();\n\n    return isMultiline ? this._renderMultiLine() : this._renderSingleLine();\n  }\n\n  private _getActionsDiv(): JSX.Element | null {\n    if (this.props.actions) {\n      return <div className={this._classNames.actions}>{this.props.actions}</div>;\n    }\n    return null;\n  }\n\n  private _getDismissDiv(): JSX.Element | null {\n    const { onDismiss, dismissIconProps } = this.props;\n    if (onDismiss) {\n      return (\n        <IconButton\n          disabled={false}\n          className={this._classNames.dismissal}\n          onClick={onDismiss}\n          iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n          title={this.props.dismissButtonAriaLabel}\n          ariaLabel={this.props.dismissButtonAriaLabel}\n        />\n      );\n    }\n    return null;\n  }\n\n  private _getDismissSingleLine(): JSX.Element | null {\n    if (this.props.onDismiss) {\n      return <div className={this._classNames.dismissSingleLine}>{this._getDismissDiv()}</div>;\n    }\n    return null;\n  }\n\n  private _getExpandSingleLine(): JSX.Element | null {\n    if (!this.props.actions && this.props.truncated) {\n      return (\n        <div className={this._classNames.expandSingleLine}>\n          <IconButton\n            disabled={false}\n            className={this._classNames.expand}\n            onClick={this._onClick}\n            iconProps={{ iconName: this.state.expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' }}\n            ariaLabel={this.props.overflowButtonAriaLabel}\n            aria-expanded={this.state.expandSingleLine}\n          />\n        </div>\n      );\n    }\n    return null;\n  }\n\n  private _getIconSpan(): JSX.Element {\n    const { messageBarIconProps } = this.props;\n    return (\n      <div className={this._classNames.iconContainer} aria-hidden>\n        {messageBarIconProps ? (\n          <Icon {...messageBarIconProps} className={css(this._classNames.icon, messageBarIconProps.className)} />\n        ) : (\n          <Icon iconName={this.ICON_MAP[this.props.messageBarType!]} className={this._classNames.icon} />\n        )}\n      </div>\n    );\n  }\n\n  private _renderMultiLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    return (\n      <div className={this._classNames.root} {...this._getRegionProps()}>\n        <div className={this._classNames.content}>\n          {this._getIconSpan()}\n          {this._renderInnerText()}\n          {this._getDismissDiv()}\n        </div>\n        {this._getActionsDiv()}\n      </div>\n    );\n  }\n\n  private _renderSingleLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    return (\n      <div className={this._classNames.root} {...this._getRegionProps()}>\n        <div className={this._classNames.content}>\n          {this._getIconSpan()}\n          {this._renderInnerText()}\n          {this._getExpandSingleLine()}\n          {this._getActionsDiv()}\n          {this._getDismissSingleLine()}\n        </div>\n      </div>\n    );\n  }\n\n  private _renderInnerText(): JSX.Element {\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(this.props, htmlElementProperties, [\n      'className',\n    ]);\n\n    return (\n      <div\n        className={this._classNames.text}\n        id={this.state.labelId}\n        role=\"status\"\n        aria-live={this._getAnnouncementPriority()}\n      >\n        <span className={this._classNames.innerText} {...nativeProps}>\n          <DelayedRender>\n            <span>{this.props.children}</span>\n          </DelayedRender>\n        </span>\n      </div>\n    );\n  }\n\n  private _getRegionProps = () => {\n    const hasActions = !!this._getActionsDiv() || !!this._getDismissDiv();\n    const regionProps = {\n      'aria-describedby': this.state.labelId,\n      role: 'region',\n    };\n\n    return hasActions ? regionProps : {};\n  };\n\n  private _getClassNames(): { [key in keyof IMessageBarStyles]: string } {\n    const { theme, className, messageBarType, onDismiss, actions, truncated, isMultiline } = this.props;\n    const { expandSingleLine } = this.state;\n\n    return getClassNames(this.props.styles!, {\n      theme: theme!,\n      messageBarType: messageBarType || MessageBarType.info,\n      onDismiss: onDismiss !== undefined,\n      actions: actions !== undefined,\n      truncated: truncated,\n      isMultiline: isMultiline,\n      expandSingleLine: expandSingleLine,\n      className,\n    });\n  }\n\n  private _getAnnouncementPriority(): 'assertive' | 'polite' {\n    switch (this.props.messageBarType) {\n      case MessageBarType.blocked:\n      case MessageBarType.error:\n      case MessageBarType.severeWarning:\n        return 'assertive';\n    }\n    return 'polite';\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    this.setState({ expandSingleLine: !this.state.expandSingleLine });\n  };\n}\n","import {\n  IStyle,\n  ISemanticColors,\n  HighContrastSelector,\n  ScreenWidthMaxSmall,\n  getScreenSelector,\n  getGlobalClassNames,\n  getFocusStyle,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { IMessageBarStyleProps, IMessageBarStyles, MessageBarType } from './MessageBar.types';\n\nconst GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\n\nconst backgroundColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorBackground',\n  [MessageBarType.blocked]: 'errorBackground',\n  [MessageBarType.success]: 'successBackground',\n  [MessageBarType.warning]: 'warningBackground',\n  [MessageBarType.severeWarning]: 'severeWarningBackground',\n  [MessageBarType.info]: 'infoBackground',\n};\n\nconst highContrastBackgroundColor: { [key: string]: string } = {\n  [MessageBarType.error]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.blocked]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.success]: 'rgba(48, 241, 73, 0.3)',\n  [MessageBarType.warning]: 'rgba(255, 254, 57, 0.3)',\n  [MessageBarType.severeWarning]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.info]: 'Window',\n};\n\nconst iconColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorIcon',\n  [MessageBarType.blocked]: 'errorIcon',\n  [MessageBarType.success]: 'successIcon',\n  [MessageBarType.warning]: 'warningIcon',\n  [MessageBarType.severeWarning]: 'severeWarningIcon',\n  [MessageBarType.info]: 'infoIcon',\n};\n\nexport const getStyles = (props: IMessageBarStyleProps): IMessageBarStyles => {\n  const {\n    theme,\n    className,\n    onDismiss,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    messageBarType = MessageBarType.info,\n  } = props;\n  const { semanticColors, fonts } = theme;\n\n  const SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const dismissalAndExpandIconStyle: IStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: {\n      [HighContrastSelector]: {\n        ...getHighContrastNoAdjustStyle(),\n        color: 'WindowText',\n      },\n    },\n  };\n\n  const dismissalAndExpandStyle: IStyle = [\n    getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: {\n        outlineOffset: '-6px',\n        outline: '1px solid Highlight',\n      },\n      borderColor: 'transparent',\n    }),\n    {\n      flexShrink: 0,\n      width: 32,\n      height: 32,\n      padding: '8px 12px',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle,\n        ':hover': {\n          backgroundColor: 'transparent',\n        },\n        ':active': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      messageBarType === MessageBarType.error && classNames.error,\n      messageBarType === MessageBarType.blocked && classNames.blocked,\n      messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n      messageBarType === MessageBarType.success && classNames.success,\n      messageBarType === MessageBarType.warning && classNames.warning,\n      isMultiline ? classNames.multiline : classNames.singleline,\n      !isMultiline && onDismiss && classNames.dismissalSingleLine,\n      !isMultiline && truncated && classNames.expandingSingleLine,\n      {\n        background: semanticColors[backgroundColor[messageBarType]],\n        color: semanticColors.messageText,\n        minHeight: 32,\n        width: '100%',\n        display: 'flex',\n        wordBreak: 'break-word',\n        selectors: {\n          '.ms-Link': {\n            color: semanticColors.messageLink,\n            selectors: {\n              ':hover': {\n                color: semanticColors.messageLinkHovered,\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n            background: highContrastBackgroundColor[messageBarType],\n            border: '1px solid WindowText',\n            color: 'WindowText',\n          },\n        },\n      },\n      isMultiline && {\n        flexDirection: 'column',\n      },\n      className,\n    ],\n    content: [\n      classNames.content,\n      {\n        display: 'flex',\n        width: '100%',\n        lineHeight: 'normal',\n      },\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        fontSize: IconFontSizes.medium,\n        minWidth: 16,\n        minHeight: 16,\n        display: 'flex',\n        flexShrink: 0,\n        margin: '8px 0 8px 12px',\n      },\n    ],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: {\n        [HighContrastSelector]: {\n          ...getHighContrastNoAdjustStyle(),\n          color: 'WindowText',\n        },\n      },\n    },\n    text: [\n      classNames.text,\n      {\n        minWidth: 0,\n        display: 'flex',\n        flexGrow: 1,\n        margin: 8,\n        ...fonts.small,\n        selectors: {\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      !onDismiss && {\n        marginRight: 12,\n      },\n    ],\n    innerText: [\n      classNames.innerText,\n      {\n        lineHeight: 16,\n        selectors: {\n          '& span a': {\n            paddingLeft: 4,\n          },\n        },\n      },\n      truncated && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n      !isMultiline && {\n        // In high contrast this causes the top and bottom of links' focus outline to be clipped\n        // (not sure of a good way around that while still maintaining text clipping)\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      },\n      !isMultiline &&\n        !truncated && {\n          selectors: {\n            [SmallScreenSelector]: {\n              overflow: 'visible',\n              whiteSpace: 'pre-wrap',\n            },\n          },\n        },\n      expandSingleLine && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n    dismissSingleLine: classNames.dismissSingleLine,\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [\n      isMultiline ? classNames.actions : classNames.actionsSingleline,\n      {\n        display: 'flex',\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n        flexDirection: 'row-reverse',\n        alignItems: 'center',\n        margin: '0 12px 0 8px',\n        selectors: {\n          '& button:nth-child(n+2)': {\n            marginLeft: 8,\n          },\n        },\n      },\n      isMultiline && {\n        marginBottom: 8,\n      },\n      onDismiss &&\n        !isMultiline && {\n          marginRight: 0,\n        },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { MessageBarBase } from './MessageBar.base';\nimport { getStyles } from './MessageBar.styles';\nimport { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nexport const MessageBar: React.FunctionComponent<IMessageBarProps> = styled<\n  IMessageBarProps,\n  IMessageBarStyleProps,\n  IMessageBarStyles\n>(MessageBarBase, getStyles, undefined, {\n  scope: 'MessageBar',\n});\n"],"sourceRoot":""}