{
  "version": 3,
  "sources": [
    "../../src/components/DetailsList/DetailsList.types.ts",
    "../../src/renderFunction/composeRenderFunction.tsx",
    "../../src/selection/Selection.types.ts",
    "../../src/dom/getRect.ts",
    "../../src/components/ChoiceGroup/ChoiceGroupOption/ChoiceGroupOption.base.tsx",
    "../../src/components/ChoiceGroup/ChoiceGroupOption/ChoiceGroupOption.styles.ts",
    "../../src/components/ChoiceGroup/ChoiceGroupOption/ChoiceGroupOption.tsx",
    "../../src/components/ChoiceGroup/ChoiceGroup.base.tsx",
    "../../src/components/ChoiceGroup/ChoiceGroup.styles.ts",
    "../../src/components/ChoiceGroup/ChoiceGroup.tsx",
    "../../src/components/Toggle/Toggle.base.tsx",
    "../../src/components/Toggle/Toggle.tsx",
    "../../src/components/Toggle/Toggle.styles.ts",
    "../../src/selection/Selection.ts",
    "../../src/components/GroupedList/GroupedList.types.ts",
    "../../src/components/GroupedList/GroupSpacer.tsx",
    "../../src/getNativeElementProps.ts",
    "../../src/components/Check/Check.base.tsx",
    "../../src/components/Check/Check.styles.ts",
    "../../src/components/Check/Check.tsx",
    "../../src/components/DetailsList/DetailsRow.styles.ts",
    "../../src/components/DetailsList/DetailsHeader.styles.ts",
    "../../src/components/DetailsList/DetailsRowCheck.styles.ts",
    "../../src/components/DetailsList/DetailsRowCheck.tsx",
    "../../src/components/DetailsList/DetailsHeader.types.ts",
    "../../src/utilities/dragdrop/DragDropHelper.tsx",
    "../../src/components/DetailsList/DetailsColumn.base.tsx",
    "../../src/components/DetailsList/DetailsColumn.styles.ts",
    "../../src/components/DetailsList/DetailsColumn.ts",
    "../../src/components/DetailsList/DetailsHeader.base.tsx",
    "../../src/components/DetailsList/DetailsHeader.ts",
    "../../src/components/DetailsList/DetailsRowFields.tsx",
    "../../src/components/DetailsList/DetailsRow.base.tsx",
    "../../src/components/DetailsList/DetailsRow.ts",
    "../../src/components/Spinner/Spinner.types.ts",
    "../../src/utilities/selection/SelectionZone.tsx",
    "../../src/components/GroupedList/GroupedList.styles.ts",
    "../../src/components/GroupedList/GroupHeader.styles.ts",
    "../../src/components/Spinner/Spinner.base.tsx",
    "../../src/components/Spinner/Spinner.styles.tsx",
    "../../src/components/Spinner/Spinner.tsx",
    "../../src/components/GroupedList/GroupHeader.base.tsx",
    "../../src/components/GroupedList/GroupHeader.ts",
    "../../src/components/GroupedList/GroupShowAll.styles.ts",
    "../../src/components/GroupedList/GroupShowAll.base.tsx",
    "../../src/components/GroupedList/GroupShowAll.ts",
    "../../src/components/GroupedList/GroupFooter.styles.ts",
    "../../src/components/GroupedList/GroupFooter.base.tsx",
    "../../src/components/GroupedList/GroupFooter.ts",
    "../../src/components/List/List.types.ts",
    "../../src/components/List/List.tsx",
    "../../src/components/GroupedList/GroupedListSection.tsx",
    "../../src/components/GroupedList/GroupedList.base.tsx",
    "../../src/components/GroupedList/GroupedList.ts",
    "../../src/utilities/decorators/withViewport.tsx",
    "../../src/utilities/groupedList/GroupedListUtility.tsx",
    "../../src/components/DetailsList/DetailsList.base.tsx",
    "../../src/components/DetailsList/DetailsList.styles.ts",
    "../../src/components/DetailsList/DetailsList.ts",
    "../../src/AutoScroll.ts",
    "../../src/components/MarqueeSelection/MarqueeSelection.base.tsx",
    "../../src/math.ts",
    "../../src/components/MarqueeSelection/MarqueeSelection.tsx",
    "../../src/components/MarqueeSelection/MarqueeSelection.styles.tsx",
    "../../src/components/Announced/Announced.base.tsx",
    "../../src/components/Announced/Announced.ts",
    "../../src/components/Announced/Announced.styles.ts"
  ],
  "names": [
    "ColumnActionsMode",
    "ConstrainMode",
    "ColumnDragEndLocation",
    "DetailsListLayoutMode",
    "CheckboxVisibility",
    "memoizer",
    "outer",
    "inner",
    "innerMemoizer",
    "defaultRender",
    "innerProps",
    "outerProps",
    "composeRenderFunction",
    "SelectionMode",
    "SelectionDirection",
    "SELECTION_CHANGE",
    "getRect",
    "element",
    "rect",
    "window",
    "left",
    "top",
    "width",
    "innerWidth",
    "height",
    "innerHeight",
    "right",
    "bottom",
    "getBoundingClientRect",
    "getClassNames",
    "classNamesFunction",
    "props",
    "_onChange",
    "evt",
    "onChange",
    "_onBlur",
    "onBlur",
    "_onFocus",
    "onFocus",
    "_onRenderField",
    "id",
    "imageSrc",
    "imageAlt",
    "selectedImageSrc",
    "iconProps",
    "imageSize",
    "label",
    "onRenderLabel",
    "_onRenderLabel",
    "htmlFor",
    "className",
    "_classNames",
    "field",
    "innerField",
    "imageWrapper",
    "Image",
    "src",
    "alt",
    "selectedImageWrapper",
    "iconWrapper",
    "Icon",
    "labelWrapper",
    "labelId",
    "text",
    "initializeComponentRef",
    "render",
    "ariaLabel",
    "focused",
    "required",
    "theme",
    "disabled",
    "checked",
    "styles",
    "name",
    "onRenderField",
    "this",
    "hasIcon",
    "hasImage",
    "imageIsLarge",
    "root",
    "choiceFieldWrapper",
    "css",
    "input",
    "type",
    "nativeProps",
    "defaultProps",
    "GlobalClassNames",
    "getChoiceGroupFocusStyle",
    "focusBorderColor",
    "hasIconOrImage",
    "selectors",
    "position",
    "outline",
    "border",
    "content",
    "pointerEvents",
    "borderColor",
    "borderWidth",
    "getImageWrapperStyle",
    "isSelectedImageWrapper",
    "paddingBottom",
    "transitionProperty",
    "transitionDuration",
    "transitionTimingFunction",
    "display",
    "borderStyle",
    "overflow",
    "opacity",
    "ChoiceGroupOption",
    "styled",
    "palette",
    "semanticColors",
    "fonts",
    "classNames",
    "circleBorderColor",
    "neutralPrimary",
    "circleHoveredBorderColor",
    "inputBorderHovered",
    "circleCheckedBorderColor",
    "inputBackgroundChecked",
    "circleCheckedHoveredBorderColor",
    "themeDark",
    "circleDisabledBorderColor",
    "disabledBodySubtext",
    "circleBackgroundColor",
    "bodyBackground",
    "dotUncheckedHoveredColor",
    "neutralSecondary",
    "dotCheckedColor",
    "dotCheckedHoveredColor",
    "dotDisabledColor",
    "labelHoverFocusColor",
    "neutralDark",
    "focusBorder",
    "iconOrImageChoiceBorderUncheckedHoveredColor",
    "iconOrImageChoiceBorderCheckedColor",
    "iconOrImageChoiceBorderCheckedHoveredColor",
    "iconOrImageChoiceBackgroundColor",
    "neutralLighter",
    "fieldHoverOrFocusProperties",
    "color",
    "backgroundColor",
    "enabledFieldWithImageHoverOrFocusProperties",
    "circleAreaProperties",
    "fontWeight",
    "boxSizing",
    "borderRadius",
    "background",
    "forcedColorAdjust",
    "dotAreaProperties",
    "choiceFieldSize",
    "radioButtonSpacing",
    "medium",
    "alignItems",
    "bodyText",
    "minHeight",
    "marginTop",
    "paddingLeft",
    "fontSize",
    "margin",
    "cursor",
    "verticalAlign",
    "userSelect",
    "paddingTop",
    "textAlign",
    "justifyContent",
    "flexDirection",
    "disabledBodyText",
    "paddingRight",
    "lineHeight",
    "labelWrapperLineHeight",
    "maxWidth",
    "whiteSpace",
    "undefined",
    "scope",
    "_focusCallbacks",
    "_changeCallbacks",
    "ev",
    "option",
    "setState",
    "keyFocused",
    "defaultSelectedKey",
    "options",
    "validDefaultSelectedKey",
    "_isControlled",
    "some",
    "key",
    "state",
    "keyChecked",
    "_getKeyChecked",
    "_id",
    "getId",
    "_labelId",
    "value",
    "componentDidUpdate",
    "prevProps",
    "prevState",
    "newKeyChecked",
    "divProps",
    "optionsContainIconOrImage",
    "ariaLabelledBy",
    "applicationRole",
    "role",
    "Label",
    "flexContainer",
    "map",
    "innerOptionProps",
    "_getOptionId",
    "_getOptionLabelId",
    "focus",
    "optionToFocus",
    "checkedOption",
    "filter",
    "elementToFocus",
    "document",
    "getElementById",
    "setFocusVisibility",
    "onChanged",
    "originalOption",
    "selectedKey",
    "optionsChecked",
    "ChoiceGroup",
    "flexWrap",
    "_toggleButton",
    "_onClick",
    "onClick",
    "checkedProp",
    "warnMutuallyExclusive",
    "warnDeprecations",
    "onAriaLabel",
    "offAriaLabel",
    "defaultChecked",
    "getDerivedStateFromProps",
    "nextProps",
    "as",
    "keytipProps",
    "offText",
    "onText",
    "inlineLabel",
    "stateText",
    "badAriaLabel",
    "toggleNativeProps",
    "onOffMissing",
    "toggleId",
    "stateTextId",
    "labelledById",
    "ariaRole",
    "renderPill",
    "keytipAttributes",
    "pill",
    "ref",
    "_noop",
    "thumb",
    "pillContent",
    "KeytipData",
    "ariaDescribedBy",
    "RootType",
    "hidden",
    "container",
    "current",
    "Toggle",
    "pillUncheckedBackground",
    "pillCheckedBackground",
    "pillCheckedHoveredBackground",
    "inputBackgroundCheckedHovered",
    "thumbUncheckedHoveredBackground",
    "pillCheckedDisabledBackground",
    "thumbBackground",
    "smallInputBorder",
    "thumbCheckedBackground",
    "inputForegroundChecked",
    "thumbDisabledBackground",
    "thumbCheckedDisabledBackground",
    "disabledBackground",
    "pillBorderColor",
    "pillBorderHoveredColor",
    "pillBorderDisabledColor",
    "textDisabledColor",
    "disabledText",
    "marginBottom",
    "marginRight",
    "order",
    "marginLeft",
    "wordBreak",
    "inset",
    "DEFAULT_PILL_HEIGHT",
    "transition",
    "padding",
    "DEFAULT_THUMB_SIZE",
    "regular",
    "onSelectionChanged",
    "getKey",
    "canSelectItem",
    "items",
    "selectionMode",
    "mode",
    "_getKey",
    "defaultGetKey",
    "_changeEventSuppressionCount",
    "_exemptedCount",
    "_anchoredIndex",
    "_unselectableCount",
    "_onSelectionChanged",
    "_canSelectItem",
    "_isModal",
    "setItems",
    "count",
    "getSelectedCount",
    "item",
    "index",
    "setChangeEvents",
    "isEnabled",
    "suppressChange",
    "_hasChanged",
    "_change",
    "isModal",
    "setModal",
    "setAllSelected",
    "shouldClear",
    "newKeyToIndexMap",
    "newUnselectableIndices",
    "hasSelectionChanged",
    "i",
    "length",
    "_setAllSelected",
    "newExemptedIndicies",
    "newExemptedCount",
    "indexProperty",
    "_exemptedIndices",
    "hasOwnProperty",
    "Number",
    "exemptKey",
    "_items",
    "newIndex",
    "_isAllSelected",
    "_keyToIndexMap",
    "_unselectableIndices",
    "_selectedItems",
    "_updateCount",
    "getItems",
    "getSelection",
    "isIndexSelected",
    "push",
    "getSelectedIndices",
    "_selectedIndices",
    "isRangeSelected",
    "fromIndex",
    "endIndex",
    "isAllSelected",
    "selectableCount",
    "single",
    "Math",
    "min",
    "isKeySelected",
    "multiple",
    "setKeySelected",
    "isSelected",
    "shouldAnchor",
    "setIndexSelected",
    "none",
    "max",
    "isExempt",
    "selectToKey",
    "clearSelection",
    "selectToIndex",
    "anchorIndex",
    "startIndex",
    "toggleAllSelected",
    "toggleKeySelected",
    "toggleIndexSelected",
    "toggleRangeSelected",
    "preserveModalState",
    "raise",
    "CollapseAllVisibility",
    "indentWidth",
    "style",
    "nativeElementMap",
    "audio",
    "video",
    "ol",
    "li",
    "a",
    "button",
    "textarea",
    "select",
    "table",
    "tr",
    "th",
    "td",
    "colGroup",
    "col",
    "form",
    "iframe",
    "img",
    "useFastIcons",
    "IconComponent",
    "FontIcon",
    "iconName",
    "circle",
    "check",
    "displayName",
    "CheckGlobalClassNames",
    "checkHost",
    "Check",
    "isRTL",
    "sharedCircleCheck",
    "themePrimary",
    "white",
    "DetailsRowGlobalClassNames",
    "compact",
    "cell",
    "cellAnimation",
    "cellCheck",
    "cellMeasurer",
    "listCellFirstChild",
    "isContentUnselectable",
    "isCheckVisible",
    "isRowHeader",
    "fields",
    "DEFAULT_CELL_STYLE_PROPS",
    "cellLeftPadding",
    "cellRightPadding",
    "cellExtraRightPadding",
    "DEFAULT_ROW_HEIGHTS",
    "rowHeight",
    "compactRowHeight",
    "values",
    "rowVerticalPadding",
    "compactRowVerticalPadding",
    "tooltipHost",
    "cellIsCheck",
    "collapseButton",
    "isCollapsed",
    "isSelectAllHidden",
    "isResizingColumn",
    "cellSizer",
    "isResizing",
    "dropHintCircleStyle",
    "dropHintCaretStyle",
    "dropHintLineStyle",
    "cellTitle",
    "cellName",
    "filterChevron",
    "gripperBarVertical",
    "checkTooltip",
    "cellStyleProps",
    "textOverflow",
    "isDisabled",
    "isHeader",
    "FastCheck",
    "_defaultCheckboxRender",
    "checkboxProps",
    "_fastDefaultCheckboxRender",
    "SelectAllVisibility",
    "DetailsRowCheck",
    "isVisible",
    "canSelect",
    "anySelected",
    "selected",
    "checkClassName",
    "onRenderDetailsCheckbox",
    "defaultCheckboxRender",
    "onRenderCheckbox",
    "detailsCheckboxProps",
    "tagName",
    "excludedPropNames",
    "allowedPropNames",
    "getNativeElementProps",
    "buttonProps",
    "tabIndex",
    "small",
    "params",
    "_selection",
    "selection",
    "_dragEnterCounts",
    "_activeTargets",
    "_lastId",
    "_initialized",
    "dispose",
    "_events",
    "subscribe",
    "events",
    "dragDropOptions",
    "EventGroup",
    "doc",
    "getDocument",
    "on",
    "body",
    "_onMouseUp",
    "bind",
    "_onDocumentMouseUp",
    "onDragStart",
    "onDragLeave",
    "onDragEnter",
    "onDragEnd",
    "onDrop",
    "onDragOver",
    "onMouseDown",
    "isDraggable",
    "isDroppable",
    "activeTarget",
    "handlers",
    "eventMap",
    "context",
    "updateDropState",
    "dragDropTarget",
    "_isDraggable",
    "_isDroppable",
    "handler",
    "callback",
    "eventName",
    "event",
    "isHandled",
    "preventDefault",
    "data",
    "_onMouseDown",
    "_onDragEnd",
    "_isDragging",
    "dataTransfer",
    "setData",
    "target",
    "off",
    "unsubscribe",
    "_dragData",
    "Object",
    "keys",
    "dropTarget",
    "documentElement",
    "_onMouseMove",
    "buttons",
    "_isChild",
    "_onMouseLeave",
    "clientX",
    "clientY",
    "eventTarget",
    "dragTarget",
    "parentElement",
    "childElement",
    "canDrag",
    "dragContext",
    "canDrop",
    "column",
    "isIconOnly",
    "accessibleLabel",
    "_root",
    "_onRenderFilterIcon",
    "columnProps",
    "_onRenderColumnHeaderTooltip",
    "tooltipHostProps",
    "hostClassName",
    "children",
    "_onColumnClick",
    "onColumnClick",
    "columnActionsMode",
    "_onDragStart",
    "itemIndex",
    "selectedItems",
    "_updateHeaderDragInfo",
    "classList",
    "add",
    "borderWhileDragging",
    "_async",
    "setTimeout",
    "noBorderWhileDragging",
    "remove",
    "setDraggedItemIndex",
    "updateDragInfo",
    "_onColumnContextMenu",
    "onColumnContextMenu",
    "_onRootMouseDown",
    "stopPropagation",
    "Async",
    "columnIndex",
    "parentId",
    "onRenderColumnHeaderTooltip",
    "headerClassName",
    "iconClassName",
    "isActionable",
    "isEmpty",
    "isIconVisible",
    "isSorted",
    "isGrouped",
    "isFiltered",
    "isPadded",
    "transitionDurationDrag",
    "transitionDurationDrop",
    "onRenderFilterIcon",
    "onRenderHeader",
    "isSortedDescending",
    "draggable",
    "calculatedWidth",
    "gripperBarVerticalStyle",
    "cellTooltip",
    "setAriaDescribedBy",
    "_hasAccessibleLabel",
    "onContextMenu",
    "hasDropdown",
    "isMenuOpen",
    "nearIcon",
    "sortIcon",
    "_renderAccessibleLabel",
    "componentDidMount",
    "dragDropHelper",
    "_addDragDropHandling",
    "isDropped",
    "borderAfterDropping",
    "noBorderAfterDropping",
    "TRANSITION_DURATION_DROP",
    "componentWillUnmount",
    "_dragDropSubscription",
    "_getColumnDragDropOptions",
    "selectionIndex",
    "filterAriaLabel",
    "sortAscendingAriaLabel",
    "sortDescendingAriaLabel",
    "groupAriaLabel",
    "DetailsColumn",
    "colors",
    "iconForegroundColor",
    "bodySubtext",
    "headerForegroundColor",
    "headerBackgroundColor",
    "dropdownChevronForegroundColor",
    "resizerColor",
    "neutralTertiaryAlt",
    "nearIconStyle",
    "borderAfterDragOrDrop",
    "outlineColor",
    "listHeaderBackgroundHovered",
    "listHeaderBackgroundPressed",
    "neutralTertiary",
    "alignContent",
    "maxHeight",
    "flex",
    "semibold",
    "NO_COLUMNS",
    "_rootElement",
    "_rootComponent",
    "_draggedColumnIndex",
    "_dropHintDetails",
    "_updateDroppingState",
    "newValue",
    "_resetDropHints",
    "_onDragOver",
    "_computeDropHintToBeShown",
    "_onDrop",
    "columnReorderProps",
    "_getColumnReorderProps",
    "targetIndex",
    "_currentDropHintIndex",
    "isValidDrop",
    "_isValidCurrentDropHintIndex",
    "_onDropIndexInfo",
    "sourceIndex",
    "onColumnDrop",
    "dragDropDetails",
    "draggedIndex",
    "handleColumnReorder",
    "_updateDragInfo",
    "_isCheckboxColumnHidden",
    "_getDropHintPositions",
    "onColumnDragStart",
    "onColumnDragEnd",
    "columnDragEndLocation",
    "_isEventOnHeader",
    "dropLocation",
    "prevRef",
    "columns",
    "prevX",
    "prevMid",
    "frozenColumnCountFromStart",
    "frozenColumnCountFromEnd",
    "dropHintElement",
    "querySelectorAll",
    "offsetLeft",
    "newMid",
    "originX",
    "startX",
    "endX",
    "dropHintElementRef",
    "isRtl",
    "eventXRelativePosition",
    "currentDropHintIndex",
    "_liesBetween",
    "currentIndex",
    "lastValidColumn",
    "indexToUpdate",
    "_isBefore",
    "_isAfter",
    "middleIndex",
    "ceil",
    "_updateDropHintElement",
    "_renderColumnSizer",
    "columnResizeDetails",
    "isResizable",
    "_stopPropagation",
    "_onSizerBlur",
    "cellSizerStart",
    "cellSizerEnd",
    "cellIsResizing",
    "onDoubleClick",
    "_onSizerDoubleClick",
    "_onSelectAllClicked",
    "columnIndexAttr",
    "getAttribute",
    "columnMinWidth",
    "_onRootMouseMove",
    "isSizing",
    "_onRootKeyDown",
    "onColumnResized",
    "increment",
    "which",
    "KeyCodes",
    "enter",
    "shiftKey",
    "_onSizerMouseMove",
    "onColumnIsSizingChanged",
    "movement",
    "_onSizerMouseUp",
    "_onToggleCollapseAll",
    "onToggleCollapseAll",
    "newCollapsed",
    "isAllCollapsed",
    "_dragDropHelper",
    "minimumPixelsForDrag",
    "_subscriptionObject",
    "_getHeaderDragDropOptions",
    "previousColumns",
    "ariaLabelForToggleAllGroupsButton",
    "ariaLabelForSelectAllCheckbox",
    "selectAllVisibility",
    "ariaLabelForSelectionColumn",
    "groupNestingDepth",
    "checkboxVisibility",
    "showCheckbox",
    "isCheckboxHidden",
    "isCheckboxAlwaysVisible",
    "always",
    "FocusZone",
    "componentRef",
    "elementRef",
    "onMouseMove",
    "direction",
    "horizontal",
    "collapseAllVisibility",
    "visible",
    "cellIsGroupExpander",
    "_renderDropHint",
    "_renderColumnDivider",
    "Layer",
    "sizingOverlay",
    "onMouseUp",
    "columnReorderOptions",
    "displayProperty",
    "childNodes",
    "clientRect",
    "header",
    "onRenderDivider",
    "dropHintIndex",
    "dropHintStyle",
    "onColumnAutoResized",
    "rtl",
    "b",
    "DetailsHeader",
    "cellSizerFadeInStyles",
    "cellStyles",
    "minWidth",
    "borderBottom",
    "bodyDivider",
    "cellWrapperPadded",
    "neutralLight",
    "cellIsActionable",
    "cellIsEmpty",
    "zIndex",
    "boxShadow",
    "transformOrigin",
    "transform",
    "visibility",
    "columnStartIndex",
    "rowClassNames",
    "onRenderItemColumn",
    "getCellValueKey",
    "cellsByColumn",
    "enableUpdateAnimations",
    "rowHeaderId",
    "cellValueKeysRef",
    "cellValueKeys",
    "onRender",
    "getValueKey",
    "cellContentsRender",
    "fieldName",
    "toString",
    "getCellText",
    "previousValueKey",
    "cellValueKey",
    "showAnimation",
    "isMultiline",
    "cellPadded",
    "cellUnpadded",
    "_cellMeasurer",
    "_focusZone",
    "selectionState",
    "getSelectionState",
    "isDropping",
    "dragDropEvents",
    "_droppingClassNames",
    "columnMeasureInfo",
    "previousState",
    "onDidMount",
    "_getRowDragDropOptions",
    "_onDidMountCalled",
    "previousProps",
    "newWidth",
    "onMeasureDone",
    "onWillUnmount",
    "shouldComponentUpdate",
    "nextState",
    "useReducedRowRenderer",
    "newSelectionState",
    "flatIndexOffset",
    "onRenderCheck",
    "rowWidth",
    "getRowAriaLabel",
    "getRowAriaDescription",
    "getRowAriaDescribedBy",
    "checkButtonAriaLabel",
    "checkboxCellClassName",
    "rowFieldsAs",
    "isSelectionModal",
    "droppingClassName",
    "ariaRowDescription",
    "ariaSelected",
    "_rowClassNames",
    "rowFields",
    "RowFields",
    "_ariaRowDescriptionId",
    "allowFocusRoot",
    "checkCell",
    "checkCover",
    "measureCell",
    "forceIntoFirstElement",
    "_onRenderCheck",
    "eventsToRegister",
    "SpinnerSize",
    "SpinnerType",
    "DetailsRow",
    "neutralQuaternaryAlt",
    "defaultHeaderText",
    "defaultMetaText",
    "defaultBackground",
    "defaultHoverHeaderText",
    "defaultHoverMetaText",
    "defaultHoverBackground",
    "selectedHeaderText",
    "selectedMetaText",
    "selectedBackground",
    "selectedHoverHeaderText",
    "selectedHoverMetaText",
    "selectedHoverBackground",
    "focusHeaderText",
    "focusMetaText",
    "focusBackground",
    "focusHoverBackground",
    "selectedStyles",
    "highContrastStyle",
    "borderTop",
    "cannotSelectStyles",
    "rootCompactStyles",
    "cellCompactStyles",
    "defaultCellStyles",
    "fadeIn400",
    "slideLeftIn40",
    "flexShrink",
    "ignoreNextFocus",
    "_handleNextFocus",
    "_onSelectionChange",
    "_onMouseDownCapture",
    "activeElement",
    "elementContains",
    "_hasAttribute",
    "getParent",
    "isToggleModifierPressed",
    "_isCtrlPressed",
    "_isMetaPressed",
    "_getSelectionMode",
    "_shouldHandleFocus",
    "isToggle",
    "itemRoot",
    "_findItemRoot",
    "_getItemIndex",
    "enterModalOnTouch",
    "_isTouch",
    "_setIsTouch",
    "isSelectedOnFocus",
    "_onItemSurfaceClick",
    "_updateModifiers",
    "_isSelectionDisabled",
    "_shouldAutoSelect",
    "_isShiftPressed",
    "_onInvokeMouseDown",
    "disableAutoSelectOnInputElements",
    "_onTouchStartCapture",
    "enableTouchInvocationTarget",
    "isSelectionDisabled",
    "_onToggleAllClick",
    "_onToggleClick",
    "_onInvokeClick",
    "_onContextMenu",
    "onItemContextMenu",
    "nativeEvent",
    "_onDoubleClick",
    "onItemInvoked",
    "_isInputElement",
    "_onKeyDownCapture",
    "_onKeyDown",
    "isSelectAllKey",
    "isClearSelectionKey",
    "escape",
    "space",
    "win",
    "getWindow",
    "_findScrollParentAndTryClearOnEmptyClick",
    "onKeyDown",
    "onKeyDownCapture",
    "onMouseDownCapture",
    "onFocusCapture",
    "_isTabPressed",
    "_clearAndSelectIndex",
    "scrollParent",
    "_tryClearOnEmptyClick",
    "Node",
    "contains",
    "selectionPreservedOnEmptyClick",
    "_isNonHandledClick",
    "ctrlKey",
    "metaKey",
    "keyCode",
    "tab",
    "indexValue",
    "attributeName",
    "handleFocus",
    "_shouldHandleFocusTimeoutId",
    "clearTimeout",
    "isTouch",
    "_isTouchTimeoutId",
    "group",
    "link",
    "listCell",
    "beziers",
    "dropIcon",
    "expand",
    "title",
    "iconTag",
    "size",
    "ariaLive",
    "labelPosition",
    "statusMessage",
    "styleSize",
    "large",
    "DelayedRender",
    "screenReaderText",
    "spinAnimation",
    "memoize",
    "Spinner",
    "themeLight",
    "borderTopColor",
    "animationName",
    "animationDuration",
    "animationIterationCount",
    "animationTimingFunction",
    "xSmall",
    "_toggleCollapse",
    "onToggleCollapse",
    "isGroupLoading",
    "newLoadingVisible",
    "isLoadingVisible",
    "_onKeyUp",
    "onGroupHeaderKeyUp",
    "defaultPrevented",
    "shouldOpen",
    "_onToggleSelectGroupClick",
    "onToggleSelectGroup",
    "_onHeaderClick",
    "onGroupHeaderClick",
    "_onRenderTitle",
    "ariaColSpan",
    "headerCount",
    "hasMoreData",
    "groupLevel",
    "viewport",
    "loadingText",
    "onRenderTitle",
    "onRenderGroupHeaderCheckbox",
    "isCollapsedGroupSelectVisible",
    "expandButtonProps",
    "expandButtonIcon",
    "selectAllButtonProps",
    "ariaPosInSet",
    "ariaSetSize",
    "canSelectGroup",
    "isSelectionCheckVisible",
    "currentlySelected",
    "onKeyUp",
    "groupHeaderContainer",
    "expandIsCollapsed",
    "GroupHeader",
    "finalRowHeight",
    "checkExpandResetStyles",
    "listBackground",
    "listItemBackgroundHovered",
    "actionLinkHovered",
    "durationValue4",
    "durationValue1",
    "transitionDelay",
    "durationValue3",
    "listItemBackgroundChecked",
    "listItemBackgroundCheckedHovered",
    "neutralQuaternary",
    "mediumPlus",
    "durationValue2",
    "GroupShowAll",
    "showAllLinkText",
    "onToggleSummarize",
    "memoizedOnClick",
    "Link",
    "GroupFooter",
    "footerText",
    "ScrollToMode",
    "EMPTY_RECT",
    "_measurePageRect",
    "_measureSurfaceRect",
    "_measureScrollRect",
    "_surface",
    "_pageRefs",
    "_getDerivedStateFromProps",
    "renderCount",
    "version",
    "_resetRequiredWindows",
    "_requiredRect",
    "_measureVersion",
    "_invalidatePageCache",
    "_updatePages",
    "_onRenderRoot",
    "rootRef",
    "surfaceElement",
    "_onRenderSurface",
    "surfaceRef",
    "pageElements",
    "_onRenderPage",
    "pageProps",
    "onRenderCell",
    "page",
    "cellRole",
    "cells",
    "itemKey",
    "ignoreScrollingState",
    "isScrolling",
    "pages",
    "_estimatedPageHeight",
    "_totalEstimates",
    "_requiredWindowsAhead",
    "_requiredWindowsBehind",
    "_onAsyncScroll",
    "debounce",
    "leading",
    "maxWait",
    "_onAsyncIdle",
    "_onAsyncResize",
    "_onScrollingDone",
    "_cachedPageHeights",
    "_focusedIndex",
    "_pageCache",
    "scrollToIndex",
    "measureItem",
    "scrollToMode",
    "_getRenderCount",
    "allowedRect",
    "_allowedRect",
    "scrollTop",
    "itemsPerPage",
    "pageSpecification",
    "_getPageSpecification",
    "pageHeight",
    "itemCount",
    "_scrollElement",
    "scrollRect",
    "scrollWindow",
    "itemPositionWithinPage",
    "itemIndexInPage",
    "scrollBottom",
    "getStartItemIndexInView",
    "isSpacer",
    "_scrollTop",
    "floor",
    "totalRowHeight",
    "_onScroll",
    "finalProps",
    "finalState",
    "pagesVersion",
    "getPageHeight",
    "_updatePageMeasurements",
    "_materializedRect",
    "_hasCompletedFirstRender",
    "onPagesUpdated",
    "newProps",
    "newState",
    "oldPages",
    "newPages",
    "oldPage",
    "newPage",
    "forceUpdate",
    "_updateRenderRects",
    "getTotalListHeight",
    "_surfaceRect",
    "onRenderSurface",
    "onRenderRoot",
    "_renderPage",
    "finalOnRenderSurface",
    "_shouldVirtualize",
    "onShouldVirtualize",
    "cachedPage",
    "usePageCache",
    "pageElement",
    "pageStyle",
    "_getPageStyle",
    "onRenderPage",
    "newRef",
    "getPageStyle",
    "indexString",
    "innerRect",
    "outerRect",
    "renderedWindowsAhead",
    "renderedWindowsBehind",
    "windowsAhead",
    "requiredWindowsAhead",
    "windowsBehind",
    "requiredWindowsBehind",
    "newListState",
    "_buildPages",
    "oldListPages",
    "_notifyPageChanges",
    "onPageAdded",
    "onPageRemoved",
    "renderedIndexes",
    "_onPageAdded",
    "_onPageRemoved",
    "heightChanged",
    "_measurePage",
    "hasChangedHeight",
    "cachedHeight",
    "measureVersion",
    "newClientRect",
    "clientWidth",
    "clientHeight",
    "round",
    "materializedRect",
    "pageTop",
    "currentSpacer",
    "focusedIndex",
    "shouldVirtualize",
    "isFirstRender",
    "pageData",
    "targetRect",
    "newRect",
    "pageBottom",
    "isPageRendered",
    "isPageInAllowedRange",
    "isPageInRequiredRange",
    "itemsInPage",
    "_createPage",
    "slice",
    "_visibleRect",
    "SPACER_KEY_PREFIX",
    "visibleRect",
    "getPageSpecification",
    "_getItemCountForPage",
    "_getPageHeight",
    "visibileRect",
    "getItemCountForPage",
    "pageKey",
    "surfaceRect",
    "scrollHeight",
    "_scrollHeight",
    "abs",
    "visibleTop",
    "_expandRect",
    "containsFocus",
    "pagesBefore",
    "pagesAfter",
    "_list",
    "_subGroupRefs",
    "_droppingClassName",
    "_onRenderGroupHeader",
    "_onRenderGroupShowAll",
    "_onRenderGroupFooter",
    "_renderSubGroup",
    "subGroup",
    "subGroupIndex",
    "getGroupItemLimit",
    "groupProps",
    "headerProps",
    "showAllProps",
    "footerProps",
    "listProps",
    "onRenderGroupHeader",
    "onRenderGroupShowAll",
    "onRenderGroupFooter",
    "nestingDepth",
    "level",
    "showEmptyGroups",
    "GroupedListSection",
    "_getGroupKey",
    "groupIndex",
    "groups",
    "_getGroupDragDropOptions",
    "isGroup",
    "newIsDropping",
    "groupedListClassNames",
    "Infinity",
    "isShowAllVisible",
    "isShowingAll",
    "hasNestedGroups",
    "dividerProps",
    "ariaControlsProps",
    "groupedListId",
    "groupHeaderProps",
    "groupShowAllProps",
    "groupFooterProps",
    "canDragGroups",
    "_getDroppingClassName",
    "_returnOne",
    "_onRenderGroup",
    "forceListUpdate",
    "subGroupCount",
    "pageRefs",
    "String",
    "_onRenderGroupCell",
    "groupIsDropping",
    "_renderGroup",
    "_onToggleSelectGroup",
    "_onToggleCollapse",
    "_onToggleSummarize",
    "_getGroupNestingDepth",
    "finalListProps",
    "onRenderShowAll",
    "onRenderFooter",
    "_getDefaultGroupItemLimit",
    "_getGroupItemLimit",
    "_getGroupHeight",
    "COMPACT_ROW_HEIGHT",
    "ROW_HEIGHT",
    "getGroupHeight",
    "pageGroup",
    "_updateIsSomeGroupExpanded",
    "_isInnerZoneKeystroke",
    "_isSomeGroupExpanded",
    "_computeIsSomeGroupExpanded",
    "listVersion",
    "shouldForceUpdates",
    "isAllGroupsCollapsed",
    "_setGroupsCollapsedState",
    "focusZoneProps",
    "rootListProps",
    "shouldEnterInnerZone",
    "vertical",
    "_forceListUpdates",
    "toggleCollapseAll",
    "allCollapsed",
    "groupsInLevel",
    "onGroupExpandStateChanged",
    "newIsSomeGroupExpanded",
    "isHeaderVisible",
    "GroupedList",
    "withViewport",
    "ComposedComponent",
    "_registerResizeObserver",
    "_viewportResizeObserver",
    "ResizeObserver",
    "observe",
    "_unregisterResizeObserver",
    "disconnect",
    "_updateViewport",
    "withForceUpdate",
    "viewportElement",
    "scrollElement",
    "_resizeAttempts",
    "_composedComponentInstance",
    "delayFirstMeasure",
    "disableResizeObserver",
    "skipViewportMeasures",
    "_isResizeObserverAvailable",
    "previousSkipViewportMeasures",
    "newViewport",
    "_updateComposedComponentRef",
    "BaseDecorator",
    "ariaLabelForListHeader",
    "constrainMode",
    "isPlaceholderData",
    "layoutMode",
    "onColumnHeaderClick",
    "onColumnHeaderContextMenu",
    "selectionZoneProps",
    "ariaLabelForGrid",
    "rowElementEventMap",
    "shouldApplyApplicationRole",
    "adjustedColumns",
    "isSomeGroupExpanded",
    "listRef",
    "focusZoneRef",
    "groupedListRef",
    "headerRef",
    "onRowDidMount",
    "onRowWillUnmount",
    "disableSelectionZone",
    "onActiveRowChanged",
    "onRenderMissingItem",
    "checkButtonGroupAriaLabel",
    "enterModalSelectionOnTouch",
    "onRenderDefaultRow",
    "selectionZoneRef",
    "rowId",
    "getGroupNestingDepth",
    "additionalListProps",
    "defaultOnRenderDetailsHeader",
    "detailsHeaderProps",
    "defaultOnRenderDetailsFooter",
    "propsOnRenderDetailsHeader",
    "onRenderDetailsHeader",
    "propsOnRenderDetailsFooter",
    "onRenderDetailsFooter",
    "detailsFooterProps",
    "columnReorderOnDragEnd",
    "finalDropLocation",
    "outside",
    "surface",
    "rowCount",
    "total",
    "remainingGroups",
    "currentGroup",
    "pop",
    "colCount",
    "isFixed",
    "fixedColumns",
    "isHorizontalConstrained",
    "horizontalConstrained",
    "onRenderDetailsGroupFooter",
    "finalOnRenderDetailsGroupFooter",
    "onRenderDetailsGroupHeader",
    "finalOnRenderDetailsGroupHeader",
    "ariaRowCount",
    "ariaRowIndex",
    "finalGroupProps",
    "sumColumnWidths",
    "useConst",
    "totalWidth",
    "forEach",
    "finalOnRenderRow",
    "onRenderRow",
    "rowProps",
    "onRenderListCell",
    "isRightArrow",
    "focusZone",
    "onActiveElementChanged",
    "shouldRaiseClicks",
    "list",
    "onHeaderKeyDown",
    "down",
    "onContentKeyDown",
    "up",
    "altKey",
    "headerWrapper",
    "contentWrapper",
    "_header",
    "_groupedList",
    "_selectionZone",
    "_onRenderRow",
    "setKey",
    "newViewportWidth",
    "oldViewportWidth",
    "shouldResetSelection",
    "_initialFocusedIndex",
    "initialFocusedIndex",
    "focusedItemIndex",
    "_adjustColumns",
    "_onGroupExpandStateChanged",
    "_onColumnIsSizingChanged",
    "_onRowDidMount",
    "row",
    "_getItemKey",
    "_activeRows",
    "_setFocusToRowIfPending",
    "_onRowWillUnmount",
    "collapsed",
    "_onColumnResized",
    "resizingColumn",
    "resizingColumnIndex",
    "newCalculatedWidth",
    "onColumnResize",
    "_rememberCalculatedWidth",
    "_onColumnAutoResized",
    "totalCount",
    "_onActiveRowChanged",
    "el",
    "onActiveItemChanged",
    "_columnOverrides",
    "lastWidth",
    "_getAdjustedColumns",
    "Selection",
    "focusIndex",
    "_setFocusToRow",
    "_notifyColumnsResized",
    "onDidUpdate",
    "currentWidth",
    "viewportWidth",
    "lastSelectionMode",
    "newColumns",
    "canResizeColumns",
    "sortedColumnKey",
    "groupedColumnKey",
    "firstItem",
    "propName",
    "isCollapsable",
    "isCollapsible",
    "clickable",
    "buildColumns",
    "newItems",
    "_getFixedColumns",
    "_getJustifiedColumns",
    "_getColumnOverride",
    "flexMargin",
    "remainingWidth",
    "sumProportionalWidth",
    "flexGrow",
    "getPaddedWidth",
    "rowCheckWidth",
    "groupExpandWidth",
    "widthFraction",
    "newColumn",
    "fullWidth",
    "shrinkWidth",
    "MAX_VALUE",
    "minimumWidth",
    "availableWidth",
    "baseColumn",
    "lastIndex",
    "overflowWidth",
    "originalWidth",
    "splice",
    "isLast",
    "overrides",
    "spaceLeft",
    "justified",
    "onHover",
    "DetailsListBase",
    "paddingOnly",
    "DetailsList",
    "listText",
    "overflowX",
    "overflowY",
    "WebkitOverflowScrolling",
    "_scrollableParent",
    "_incrementScroll",
    "_scrollRect",
    "_onTouchMove",
    "_stopScroll",
    "_computeScrollVelocity",
    "touches",
    "clientDirection",
    "scrollClient",
    "scrollRectTop",
    "scrollRectLeft",
    "scrollClientBottom",
    "scrollClientRight",
    "_isVerticalScroll",
    "_scrollVelocity",
    "_startScroll",
    "_timeoutId",
    "scrollLeft",
    "onShouldStartSelection",
    "_isMouseEventOnScrollbar",
    "_isInSelectionToggle",
    "_isDragStartInSelection",
    "_scrollableSurface",
    "_selectedIndicies",
    "_preservedIndicies",
    "_onAsyncMouseMove",
    "_autoScroll",
    "_scrollLeft",
    "_rootRect",
    "_onTouchStart",
    "_onPointerDown",
    "pointerType",
    "dragRect",
    "hitTarget",
    "isDraggingConstrainedToRoot",
    "rootProps",
    "dragMask",
    "box",
    "boxFill",
    "targetElement",
    "targetScrollbarWidth",
    "offsetWidth",
    "targetScrollbarHeight",
    "offsetHeight",
    "_getRootRect",
    "requestAnimationFrame",
    "_lastMouseEvent",
    "rootRect",
    "currentPoint",
    "_dragOrigin",
    "point1",
    "point2",
    "left1",
    "x",
    "top1",
    "y",
    "left2",
    "top2",
    "sqrt",
    "pow",
    "getDistanceBetweenPoints",
    "constrainedPoint",
    "_evaluateSelection",
    "_itemRectCache",
    "_isPointInRectangle",
    "rectangle",
    "point",
    "allElements",
    "itemRect",
    "previousSelectedIndices",
    "_allSelectedIndices",
    "needToUpdate",
    "rootTagName",
    "MarqueeSelection",
    "message",
    "Root",
    "Announced"
  ],
  "mappings": "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",
  "file": "static/js/13.c104db9f.chunk.js",
  "sourcesContent": [
    "import * as React from 'react';\nimport { DetailsListBase } from './DetailsList.base';\nimport { ISelection, SelectionMode, ISelectionZoneProps } from '../../utilities/selection/index';\nimport { IRefObject, IBaseProps, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport { IDragDropEvents, IDragDropContext, IDragDropHelper, IDragDropOptions } from './../../utilities/dragdrop/index';\nimport { IGroup, IGroupRenderProps, IGroupDividerProps, IGroupedListProps } from '../GroupedList/index';\nimport { IDetailsRowProps, IDetailsRowBaseProps } from '../DetailsList/DetailsRow';\nimport { IDetailsHeaderProps, IDetailsHeaderBaseProps } from './DetailsHeader';\nimport { IDetailsFooterProps, IDetailsFooterBaseProps } from './DetailsFooter.types';\nimport { IWithViewportProps, IViewport } from '../../utilities/decorators/withViewport';\nimport { IList, IListProps, ScrollToMode } from '../List/index';\nimport { ITheme, IStyle } from '../../Styling';\nimport { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\nimport { IDetailsCheckboxProps } from './DetailsRowCheck.types';\nimport {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnFilterIconProps,\n} from './DetailsColumn.types';\n\nexport {\n  IDetailsHeaderProps,\n  IDetailsRowBaseProps,\n  IDetailsHeaderBaseProps,\n  IDetailsFooterBaseProps,\n  IDragDropContext,\n  IDragDropEvents,\n  IDragDropHelper,\n  IDragDropOptions,\n  IViewport,\n  IWithViewportProps,\n};\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list prop updates don't change, but the list\n   * still needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change,\n   * you can call this to force a re-evaluation. Be aware that this can be an expensive operation and should be\n   * done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Scroll to and focus the item at the given index. focusIndex will call scrollToIndex on the specified index.\n   *\n   * @param index - Index of item to scroll to\n   * @param forceIntoFirstElement - If true, focus will be set to the first focusable child element of the item rather\n   *  than the item itself.\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional setting to determine where in the window the item should be scrolled to\n   * when focused.\n   */\n  focusIndex: (\n    index: number,\n    forceIntoFirstElement?: boolean,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListProps extends IBaseProps<IDetailsList>, IWithViewportProps {\n  /** Theme provided by a higher-order component. */\n  theme?: ITheme;\n\n  /** Custom overrides to the themed or default styles. */\n  styles?: IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>;\n\n  /**\n   * Callback to access the IDetailsList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IDetailsList>;\n\n  /** A key that uniquely identifies the given items. If provided, the selection will be reset when the key changes. */\n  setKey?: string;\n\n  /** The items to render. */\n  items: any[];\n\n  /** Set this to true to indicate that the items being displayed are placeholder data. */\n  isPlaceholderData?: boolean;\n\n  /** Properties to pass through to the List components being rendered. */\n  listProps?: IListProps;\n\n  /** Default index to set focus to once the items have rendered and the index exists. */\n  initialFocusedIndex?: number;\n\n  /** Class name to add to the root element. */\n  className?: string;\n\n  /** Grouping instructions. */\n  groups?: IGroup[];\n\n  /** Override properties to render groups. */\n  groupProps?: IDetailsGroupRenderProps;\n\n  /** Override for the indent width used for group nesting. */\n  indentWidth?: number;\n\n  /** Selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. Options include none, single, multiple */\n  selectionMode?: SelectionMode;\n\n  /**\n   * By default, selection is cleared when clicking on an empty (non-focusable) section of the screen.\n   * Setting this value to true overrides that behavior and maintains selection.\n   * @defaultvalue false\n   **/\n  selectionPreservedOnEmptyClick?: boolean;\n\n  /**\n   * Additional props to pass through to the SelectionZone created by default.\n   */\n  selectionZoneProps?: ISelectionZoneProps;\n\n  /** Controls how the columns are adjusted. */\n  layoutMode?: DetailsListLayoutMode;\n\n  /**\n   * Controls the visibility of selection check box.\n   * @defaultvalue CheckboxVisibility.onHover\n   */\n  checkboxVisibility?: CheckboxVisibility;\n\n  /**\n   * Controls the visibility of the header.\n   * @defaultvalue true\n   */\n  isHeaderVisible?: boolean;\n\n  /** column defitions. If none are provided, default columns will be created based on the items' properties. */\n  columns?: IColumn[];\n\n  /** Controls how the list contrains overflow. */\n  constrainMode?: ConstrainMode;\n\n  /** Event names and corresponding callbacks that will be registered to rendered row elements. */\n  rowElementEventMap?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Callback for when the list has been updated. Useful for telemetry tracking externally. */\n  onDidUpdate?: (detailsList?: DetailsListBase) => void;\n\n  /**\n   * Callback for when a given row has been mounted. Useful for identifying when a row has been rendered on the page.\n   */\n  onRowDidMount?: (item?: any, index?: number) => void;\n\n  /**\n   * Callback for when a given row has been unmounted.\n   * Useful for identifying when a row has been removed from the page.\n   */\n  onRowWillUnmount?: (item?: any, index?: number) => void;\n\n  /** Callback for when the user clicks on the column header. */\n  onColumnHeaderClick?: (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void;\n\n  /** Callback for when the user asks for a contextual menu (usually via right click) from a column header. */\n  onColumnHeaderContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /** Callback fired on column resize */\n  onColumnResize?: (column?: IColumn, newWidth?: number, columnIndex?: number) => void;\n\n  /** Callback for when a given row has been invoked (by pressing enter while it is selected.) */\n  onItemInvoked?: (item?: any, index?: number, ev?: Event) => void;\n\n  /**\n   * Callback for when the context menu of an item has been accessed.\n   * If undefined or false is returned, `ev.preventDefault()` will be called.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n\n  /**\n   * Callback to override the default row rendering.\n   */\n  onRenderRow?: IRenderFunction<IDetailsRowProps>;\n\n  /**\n   * If provided, will be the \"default\" item column renderer method.\n   * This affects cells within the rows, not the rows themselves.\n   * If a column definition provides its own `onRender` method, that will be used instead of this.\n   */\n  onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => React.ReactNode;\n\n  /**\n   * If provided, will be the \"default\" item column cell value return.\n   * A column's `getValueKey` can override `getCellValueKey`.\n   */\n  getCellValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  /** Map of callback functions related to row drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** Callback for what to render when the item is missing. */\n  onRenderMissingItem?: (index?: number, rowProps?: IDetailsRowProps) => React.ReactNode;\n\n  /** An override to render the details header. */\n  onRenderDetailsHeader?: IRenderFunction<IDetailsHeaderProps>;\n\n  /** An override to render the details footer. */\n  onRenderDetailsFooter?: IRenderFunction<IDetailsFooterProps>;\n\n  /**  If provided, can be used to render a custom checkbox. */\n  onRenderCheckbox?: IRenderFunction<IDetailsListCheckboxProps>;\n\n  /** Viewport info, provided by the `withViewport` decorator. */\n  viewport?: IViewport;\n\n  /**\n   * Callback for when an item in the list becomes active by clicking anywhere inside the row or navigating to it\n   * with the keyboard.\n   */\n  onActiveItemChanged?: (item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void;\n\n  /** Accessible label for the list header. */\n  ariaLabelForListHeader?: string;\n\n  /** Accessible label for the select all checkbox. */\n  ariaLabelForSelectAllCheckbox?: string;\n\n  /** Accessible label for the name of the selection column. */\n  ariaLabelForSelectionColumn?: string;\n\n  /** Callback to get the aria-label string for a given item. */\n  getRowAriaLabel?: (item: any) => string;\n\n  /** Callback to get the aria-describedby IDs (space-separated strings) of elements that describe the item. */\n  getRowAriaDescribedBy?: (item: any) => string;\n\n  /**\n   * Callback to get the item key, to be used in the selection and on render.\n   * Must be provided if sorting or filtering is enabled.\n   */\n  getKey?: (item: any, index?: number) => string;\n\n  /** Accessible label describing or summarizing the list. */\n  ariaLabel?: string;\n\n  /** Accessible label for the row check button, e.g. \"select row\" */\n  checkButtonAriaLabel?: string;\n\n  /** Accessible label for the group header check button, e.g. \"select section\". */\n  checkButtonGroupAriaLabel?: string;\n\n  /** Accessible label for the grid within the list. */\n  ariaLabelForGrid?: string;\n\n  /** An optional margin for proportional columns, to e.g. account for scrollbars when laying out width. */\n  flexMargin?: number;\n\n  /**\n   * Whether the role `application` should be applied to the list.\n   * @defaultvalue false\n   */\n  shouldApplyApplicationRole?: boolean;\n\n  /**\n   * The minimum mouse move distance to interpret the action as drag event.\n   * @defaultvalue 5\n   */\n  minimumPixelsForDrag?: number;\n\n  /**\n   * Whether to render in compact mode.\n   * @defaultvalue false\n   */\n  compact?: boolean;\n\n  /**\n   * Whether to enable render page caching. This is an experimental performance optimization that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Callback to determine whether the list should be rendered in full, or virtualized.\n   *\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance\n   * for smaller lists.\n   *\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Class name to add to the cell of a checkbox. */\n  checkboxCellClassName?: string;\n\n  /** Whether the selection zone should enter modal state on touch. */\n  enterModalSelectionOnTouch?: boolean;\n\n  /** Options for column reordering using drag and drop. */\n  columnReorderOptions?: IColumnReorderOptions;\n\n  /** Callback to override default group height calculation used by list virtualization. */\n  getGroupHeight?: IGroupedListProps['getGroupHeight'];\n\n  /**\n   * Whether to re-render a row only when props changed. Might cause regression when depending on external updates.\n   * @defaultvalue false\n   */\n  useReducedRowRenderer?: boolean;\n\n  /**\n   * Props impacting the render style of cells. Since these have an impact on calculated column widths, they are\n   * handled separately from normal theme styling, but they are passed to the styling system.\n   */\n  cellStyleProps?: ICellStyleProps;\n\n  /** Whether to disable the built-in SelectionZone, so the host component can provide its own. */\n  disableSelectionZone?: boolean;\n\n  /** Whether to animate updates */\n  enableUpdateAnimations?: boolean;\n\n  /**\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\n   * but are still customizable via class names.\n   * @defaultvalue true\n   */\n  useFastIcons?: boolean;\n\n  /** Role for the list. */\n  role?: string;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumn {\n  /** A unique key for identifying the column. */\n  key: string;\n\n  /** Name to render on the column header. */\n  name: string;\n\n  /**\n   * The field to pull the text value from for the column.\n   * Can be unset if a custom `onRender` method is provided.\n   */\n  fieldName?: string;\n\n  /**\n   * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\n   * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\n   * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (3/4) = 75% of the remaining space. Note that\n   * this relies on viewport measures and will not work well with skipViewportMeasures.\n   */\n  flexGrow?: number;\n\n  /** Class name to apply to the column cell within each row. */\n  className?: string;\n\n  /** Custom overrides to the themed or default styles. */\n  styles?: IStyleFunctionOrObject<IDetailsColumnStyleProps, IDetailsColumnStyles>;\n\n  /** Minimum width for the column. */\n  minWidth: number;\n\n  /**\n   * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\n   * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\n   * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (2/4) = 75% of the remaining space. Note that\n   * this relies on viewport measures and will not work well with skipViewportMeasures.\n   */\n  targetWidthProportion?: number;\n\n  /**\n   * Accessible label for the column. The column name will still be used as the primary label,\n   * but this text (if specified) will be read after the column name.\n   */\n  ariaLabel?: string;\n\n  /** Whether the column is a header for the given row. There should be only one column with this set to true. */\n  isRowHeader?: boolean;\n\n  /** Maximum width for the column, if stretching is allowed in justified scenarios. */\n  maxWidth?: number;\n\n  /**\n   * Defines how the column's header should render.\n   * @defaultvalue ColumnActionsMode.clickable\n   */\n  columnActionsMode?: ColumnActionsMode;\n\n  /** Custom icon to use in the column header. */\n  iconName?: string;\n\n  /**\n   * Whether only the icon should be displayed in the column header.\n   * If true, the column name and dropdown chevron will not be displayed.\n   */\n  isIconOnly?: boolean;\n\n  /** Class name for the icon within the header. */\n  iconClassName?: string;\n\n  /**\n   * If true, allow the column to be collapsed when rendered in justified layout.\n   * @deprecated Use `isCollapsible`\n   */\n  isCollapsable?: boolean;\n\n  /** If true, allow the column to be collapsed when rendered in justified layout. */\n  isCollapsible?: boolean;\n\n  /** Determines if the column is currently sorted. Renders a sort arrow in the column header. */\n  isSorted?: boolean;\n\n  /** Determines if the sort arrow is pointed down (descending) or up. */\n  isSortedDescending?: boolean;\n\n  /** Determines if the column can be resized. */\n  isResizable?: boolean;\n\n  /** Determines if the column can render multi-line text. */\n  isMultiline?: boolean;\n\n  /** Custom renderer for cell content, instead of the default text rendering. */\n  onRender?: (item?: any, index?: number, column?: IColumn) => any;\n\n  /** Custom override for the parent list's `getCellValueKey`. */\n  getValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  /** Custom renderer for column header divider. */\n  onRenderDivider?: IRenderFunction<IDetailsColumnProps>;\n\n  /** Custom renderer for filter icon. */\n  onRenderFilterIcon?: IRenderFunction<IDetailsColumnFilterIconProps>;\n\n  /** Custom renderer for column header content, instead of the default text rendering. */\n  onRenderHeader?: IRenderFunction<IDetailsColumnProps>;\n\n  /** Whether the list is filtered by this column. If true, shows a filter icon next to this column's name. */\n  isFiltered?: boolean;\n\n  /** Callback for when the user clicks on the column header. */\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\n\n  /** Callback for when the user opens the column header context menu. */\n  onColumnContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /**\n   * Callback for when the column is resized (`width` is the current width).\n   *\n   * Prefer this over `DetailsList`'s `onColumnResize` if you require the `IColumn` to report its width\n   * after every resize event. Consider debouncing the callback if resize events occur frequently.\n   */\n  onColumnResize?: (width?: number) => void;\n\n  /** Whether the list is grouped by this column. If true, shows a grouped icon next to this column's name. */\n  isGrouped?: boolean;\n\n  /** Arbitrary data passthrough which can be used by the caller. */\n  data?: any;\n\n  /** Internal only value. */\n  calculatedWidth?: number;\n\n  /**\n   * Internal only value.\n   * Remembers the actual width of the column in any case.\n   * `calculatedWidth` is only saved when it's defined by user, not for justified calculations.\n   */\n  currentWidth?: number;\n\n  /** Class name to apply to the column header cell. */\n  headerClassName?: string;\n\n  /** If true, add additional LTR padding-right to column and cells. */\n  isPadded?: boolean;\n\n  /**\n   * Accessible label for indicating that the list is sorted by this column in ascending order.\n   * This will be read after the main column header label.\n   */\n  sortAscendingAriaLabel?: string;\n\n  /**\n   * Accessible label for indicating that the list is sorted by this column in descending order.\n   * This will be read after the main column header label.\n   */\n  sortDescendingAriaLabel?: string;\n\n  /** Accessible label for the status of this column when grouped. */\n  groupAriaLabel?: string;\n\n  /** Accessible label for the status of this column when filtered. */\n  filterAriaLabel?: string;\n\n  /** Whether a dropdown menu is open so that the appropriate ARIA attributes are rendered. */\n  isMenuOpen?: boolean;\n}\n\n/**\n * Enum to describe how a particular column header behaves.\n * This is used to to specify the property `IColumn.columnActionsMode`.\n * If `IColumn.columnActionsMode` is undefined, it's equivalent to `ColumnActionsMode.clickable`.\n * {@docCategory DetailsList}\n */\nexport enum ColumnActionsMode {\n  /** Renders the column header as disabled. */\n  disabled = 0,\n\n  /** Renders the column header as clickable. Default value. */\n  clickable = 1,\n\n  /** Renders the column header as clickable and displays the dropdown chevron. */\n  hasDropdown = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum ConstrainMode {\n  /** Lets the content grow which allows the page to manage scrolling. */\n  unconstrained = 0,\n\n  /** Constrains the list to the given layout space. */\n  horizontalConstrained = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnReorderOptions {\n  /**\n   * Specifies the number fixed columns from left\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromStart?: number;\n\n  /**\n   * Specifies the number fixed columns from right\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromEnd?: number;\n\n  /**\n   * Callback to handle when dragging on this column's DetailsHeader has started.\n   */\n  onColumnDragStart?: (dragStarted: boolean) => void;\n\n  /**\n   * Callback to handle column reordering.\n   * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\n   * @deprecated Use `onColumnDrop` instead.\n   */\n  handleColumnReorder?: (draggedIndex: number, targetIndex: number) => void;\n\n  /**\n   * Callback to handle column reordering.\n   * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\n   */\n  onColumnDrop?: (dragDropDetails: IColumnDragDropDetails) => void;\n\n  /**\n   * Callback to handle when dragging on this column's DetailsHeader has finished.\n   */\n  onDragEnd?: (columnDropLocationDetails: ColumnDragEndLocation) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnDragDropDetails {\n  /**\n   * Specifies the source column index\n   * @defaultvalue -1\n   */\n  draggedIndex: number;\n\n  /**\n   * Specifies the target column index\n   * @defaultvalue -1\n   */\n  targetIndex: number;\n}\n\n/**\n * Enum to describe where the column has been dropped, after starting the drag\n * {@docCategory DetailsList}\n */\nexport enum ColumnDragEndLocation {\n  /** Drag ended outside of current list */\n  outside = 0,\n\n  /** Drag ended within current list */\n  surface = 1,\n\n  /** Drag ended on header */\n  header = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum DetailsListLayoutMode {\n  /**\n   * Lets the user resize columns and makes not attempt to fit them.\n   */\n  fixedColumns = 0,\n\n  /**\n   * Manages which columns are visible, tries to size them according to their min/max rules and drops\n   * off columns that can't fit and have isCollapsible set.\n   */\n  justified = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum CheckboxVisibility {\n  /** Visible on hover. */\n  onHover = 0,\n\n  /** Visible always. */\n  always = 1,\n\n  /** Hide checkboxes. */\n  hidden = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport type IDetailsListStyleProps = Required<Pick<IDetailsListProps, 'theme'>> &\n  Pick<IDetailsListProps, 'className'> & {\n    /** Whether the list is horizontally constrained */\n    isHorizontalConstrained?: boolean;\n\n    /** Whether the list is in compact mode */\n    compact?: boolean;\n\n    /** Whether the list is fixed in size */\n    isFixed?: boolean;\n  };\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListStyles {\n  root: IStyle;\n  focusZone: IStyle;\n  headerWrapper: IStyle;\n  contentWrapper: IStyle;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupRenderProps extends IGroupRenderProps {\n  onRenderFooter?: IRenderFunction<IDetailsGroupDividerProps>;\n  onRenderHeader?: IRenderFunction<IDetailsGroupDividerProps>;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupDividerProps extends IGroupDividerProps, IDetailsItemProps {}\n\nexport interface IDetailsListCheckboxProps extends IDetailsCheckboxProps {}\n",
    "import { IRenderFunction } from '../IRenderFunction';\nimport { createMemoizer } from '../memoize';\n\ninterface IRenderFunctionComposer {\n  <TProps>(outer: IRenderFunction<TProps>): (inner: IRenderFunction<TProps>) => IRenderFunction<TProps>;\n}\n\nfunction createComposedRenderFunction<TProps>(\n  outer: IRenderFunction<TProps>,\n): (inner: IRenderFunction<TProps>) => IRenderFunction<TProps> {\n  const outerMemoizer = createMemoizer((inner: IRenderFunction<TProps>) => {\n    const innerMemoizer = createMemoizer((defaultRender: IRenderFunction<TProps>) => {\n      return (innerProps?: TProps) => {\n        return inner(innerProps, defaultRender);\n      };\n    });\n\n    return (outerProps?: TProps, defaultRender?: IRenderFunction<TProps>) => {\n      return outer(outerProps, defaultRender ? innerMemoizer(defaultRender) : inner);\n    };\n  });\n\n  return outerMemoizer;\n}\n\nconst memoizer = createMemoizer<IRenderFunctionComposer>(createComposedRenderFunction);\n\n/**\n * Composes two 'render functions' to produce a final render function that renders\n * the outer function, passing the inner function as 'default render'. The inner function\n * is then passed the original 'default render' prop.\n * @public\n */\nexport function composeRenderFunction<TProps>(\n  outer: IRenderFunction<TProps>,\n  inner: IRenderFunction<TProps>,\n): IRenderFunction<TProps> {\n  return memoizer(outer)(inner);\n}\n",
    "/**\n * {@docCategory Selection}\n */\nexport interface IObjectWithKey {\n  key?: string | number;\n}\n\nexport const SELECTION_CHANGE = 'change';\n\n/**\n * {@docCategory Selection}\n */\nexport enum SelectionMode {\n  none = 0,\n  single = 1,\n  multiple = 2,\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelection<TItem = IObjectWithKey> {\n  count: number;\n  mode: SelectionMode;\n\n  canSelectItem: (item: TItem, index?: number) => boolean;\n\n  // Obesrvable methods.\n  setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void;\n\n  // Initialization methods.\n\n  setItems(items: TItem[], shouldClear: boolean): void;\n  getItems(): TItem[];\n\n  // Read selection methods.\n\n  getSelection(): TItem[];\n  getSelectedIndices(): number[];\n  getSelectedCount(): number;\n  isRangeSelected(fromIndex: number, count: number): boolean;\n\n  isAllSelected(): boolean;\n  isKeySelected(key: string): boolean;\n  isIndexSelected(index: number): boolean;\n\n  isModal?(): boolean;\n\n  // Write selection methods.\n\n  setAllSelected(isAllSelected: boolean): void;\n  setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void;\n  setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void;\n\n  setModal?(isModal: boolean): void; // TODO make non-optional on next breaking change\n\n  // Write range selection methods.\n\n  selectToKey(key: string, clearSelection?: boolean): void;\n  selectToIndex(index: number, clearSelection?: boolean): void;\n\n  // Toggle helpers.\n\n  toggleAllSelected(): void;\n  toggleKeySelected(key: string): void;\n  toggleIndexSelected(index: number): void;\n  toggleRangeSelected(fromIndex: number, count: number): void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport enum SelectionDirection {\n  horizontal = 0,\n  vertical = 1,\n}\n",
    "import { IRectangle } from '../IRectangle';\n/**\n * Helper to get bounding client rect. Passing in window will get the window size.\n *\n * @public\n */\nexport function getRect(element: HTMLElement | Window | null): IRectangle | undefined {\n  let rect: IRectangle | undefined;\n  if (element) {\n    if (element === window) {\n      rect = {\n        left: 0,\n        top: 0,\n        width: window.innerWidth,\n        height: window.innerHeight,\n        right: window.innerWidth,\n        bottom: window.innerHeight,\n      };\n    } else if ((element as HTMLElement).getBoundingClientRect) {\n      rect = (element as HTMLElement).getBoundingClientRect();\n    }\n  }\n  return rect;\n}\n",
    "import * as React from 'react';\nimport { Image } from '../../../Image';\nimport { Icon } from '../../../Icon';\nimport {\n  IChoiceGroupOptionProps,\n  IChoiceGroupOptionStyleProps,\n  IChoiceGroupOptionStyles,\n} from './ChoiceGroupOption.types';\nimport { classNamesFunction, getNativeProps, inputProperties, css, initializeComponentRef } from '../../../Utilities';\nimport { IProcessedStyleSet } from '../../../Styling';\nimport { composeRenderFunction } from '@uifabric/utilities';\n\nconst getClassNames = classNamesFunction<IChoiceGroupOptionStyleProps, IChoiceGroupOptionStyles>();\n\nconst LARGE_IMAGE_SIZE = 71;\n\n/**\n * {@docCategory ChoiceGroup}\n */\nexport class ChoiceGroupOptionBase extends React.Component<IChoiceGroupOptionProps, {}> {\n  public static defaultProps: Partial<IChoiceGroupOptionProps> = {\n    // This ensures default imageSize value doesn't mutate. Mutation can cause style re-calcuation.\n    imageSize: { width: 32, height: 32 },\n  };\n\n  private _classNames: IProcessedStyleSet<IChoiceGroupOptionStyles>;\n\n  constructor(props: IChoiceGroupOptionProps) {\n    super(props);\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      ariaLabel,\n      focused,\n      required,\n      theme,\n      iconProps,\n      imageSrc,\n      imageSize,\n      disabled,\n      // eslint-disable-next-line deprecation/deprecation\n      checked,\n      id,\n      styles,\n      name,\n      onRenderField = this._onRenderField,\n      ...rest\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      hasIcon: !!iconProps,\n      hasImage: !!imageSrc,\n      checked,\n      disabled,\n      imageIsLarge: !!imageSrc && (imageSize!.width > LARGE_IMAGE_SIZE || imageSize!.height > LARGE_IMAGE_SIZE),\n      imageSize,\n      focused,\n    });\n\n    const { className, ...nativeProps } = getNativeProps<{ className: string }>(rest, inputProperties);\n\n    return (\n      <div className={this._classNames.root}>\n        <div className={this._classNames.choiceFieldWrapper}>\n          <input\n            aria-label={ariaLabel}\n            id={id}\n            className={css(this._classNames.input, className)}\n            type=\"radio\"\n            name={name}\n            disabled={disabled}\n            checked={checked}\n            required={required}\n            {...nativeProps}\n            onChange={this._onChange}\n            onFocus={this._onFocus}\n            onBlur={this._onBlur}\n          />\n          {onRenderField(this.props, this._onRenderField)}\n        </div>\n      </div>\n    );\n  }\n\n  private _onChange = (evt: React.FormEvent<HTMLInputElement>): void => {\n    const { onChange } = this.props;\n    if (onChange) {\n      onChange(evt, this.props);\n    }\n  };\n\n  private _onBlur = (evt: React.FocusEvent<HTMLElement>) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(evt, this.props);\n    }\n  };\n\n  private _onFocus = (evt: React.FocusEvent<HTMLElement>) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(evt, this.props);\n    }\n  };\n\n  private _onRenderField = (props: IChoiceGroupOptionProps): JSX.Element => {\n    const { id, imageSrc, imageAlt = '', selectedImageSrc, iconProps } = props;\n\n    const imageSize = props.imageSize ? props.imageSize : { width: 32, height: 32 };\n\n    const onRenderLabel = props.onRenderLabel\n      ? composeRenderFunction(props.onRenderLabel, this._onRenderLabel)\n      : this._onRenderLabel;\n\n    const label = onRenderLabel(props);\n\n    return (\n      <label htmlFor={id} className={this._classNames.field}>\n        {imageSrc && (\n          <div className={this._classNames.innerField}>\n            <div className={this._classNames.imageWrapper}>\n              <Image src={imageSrc} alt={imageAlt} width={imageSize.width} height={imageSize.height} />\n            </div>\n            <div className={this._classNames.selectedImageWrapper}>\n              <Image src={selectedImageSrc} alt={imageAlt} width={imageSize.width} height={imageSize.height} />\n            </div>\n          </div>\n        )}\n        {iconProps && (\n          <div className={this._classNames.innerField}>\n            <div className={this._classNames.iconWrapper}>\n              <Icon {...iconProps} />\n            </div>\n          </div>\n        )}\n        {imageSrc || iconProps ? <div className={this._classNames.labelWrapper}>{label}</div> : label}\n      </label>\n    );\n  };\n\n  private _onRenderLabel = (props: IChoiceGroupOptionProps): JSX.Element => {\n    return (\n      <span id={props.labelId} className=\"ms-ChoiceFieldLabel\">\n        {props.text}\n      </span>\n    );\n  };\n}\n",
    "import { HighContrastSelector, IStyle, getGlobalClassNames, getHighContrastNoAdjustStyle } from '../../../Styling';\nimport { IsFocusVisibleClassName } from '../../../Utilities';\nimport { IChoiceGroupOptionStyleProps, IChoiceGroupOptionStyles } from './ChoiceGroupOption.types';\n\nconst GlobalClassNames = {\n  root: 'ms-ChoiceField',\n  choiceFieldWrapper: 'ms-ChoiceField-wrapper',\n  input: 'ms-ChoiceField-input',\n  field: 'ms-ChoiceField-field',\n  innerField: 'ms-ChoiceField-innerField',\n  imageWrapper: 'ms-ChoiceField-imageWrapper',\n  iconWrapper: 'ms-ChoiceField-iconWrapper',\n  labelWrapper: 'ms-ChoiceField-labelWrapper',\n  checked: 'is-checked',\n};\n\nconst labelWrapperLineHeight = 15;\nconst labelWrapperHeight = labelWrapperLineHeight * 2 + 2; // adding 2px height to ensure text doesn't get cutoff\nconst iconSize = 32;\nconst choiceFieldSize = 20;\nconst choiceFieldTransitionDuration = '200ms';\nconst choiceFieldTransitionTiming = 'cubic-bezier(.4, 0, .23, 1)';\nconst radioButtonSpacing = 3;\nconst radioButtonInnerSize = 5;\n\nfunction getChoiceGroupFocusStyle(focusBorderColor: string, hasIconOrImage?: boolean): IStyle {\n  return [\n    'is-inFocus',\n    {\n      selectors: {\n        [`.${IsFocusVisibleClassName} &`]: {\n          position: 'relative',\n          outline: 'transparent',\n          selectors: {\n            '::-moz-focus-inner': {\n              border: 0,\n            },\n            ':after': {\n              content: '\"\"',\n              top: -2,\n              right: -2,\n              bottom: -2,\n              left: -2,\n              pointerEvents: 'none',\n              border: `1px solid ${focusBorderColor}`,\n              position: 'absolute',\n              selectors: {\n                [HighContrastSelector]: {\n                  borderColor: 'WindowText',\n                  borderWidth: hasIconOrImage ? 1 : 2,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  ];\n}\n\nfunction getImageWrapperStyle(isSelectedImageWrapper: boolean, className?: string, checked?: boolean): IStyle {\n  return [\n    className,\n    {\n      paddingBottom: 2,\n      transitionProperty: 'opacity',\n      transitionDuration: choiceFieldTransitionDuration,\n      transitionTimingFunction: 'ease',\n      selectors: {\n        '.ms-Image': {\n          display: 'inline-block',\n          borderStyle: 'none',\n        },\n      },\n    },\n    (checked ? !isSelectedImageWrapper : isSelectedImageWrapper) && [\n      'is-hidden',\n      {\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n        opacity: 0,\n      },\n    ],\n  ];\n}\n\nexport const getStyles = (props: IChoiceGroupOptionStyleProps): IChoiceGroupOptionStyles => {\n  const { theme, hasIcon, hasImage, checked, disabled, imageIsLarge, focused, imageSize } = props;\n  const { palette, semanticColors, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // Tokens\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder\n  const circleBorderColor = palette.neutralPrimary;\n  const circleHoveredBorderColor = semanticColors.inputBorderHovered;\n  const circleCheckedBorderColor = semanticColors.inputBackgroundChecked;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered\n  const circleCheckedHoveredBorderColor = palette.themeDark;\n  const circleDisabledBorderColor = semanticColors.disabledBodySubtext;\n  const circleBackgroundColor = semanticColors.bodyBackground;\n  const dotUncheckedHoveredColor = palette.neutralSecondary;\n  const dotCheckedColor = semanticColors.inputBackgroundChecked;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered\n  const dotCheckedHoveredColor = palette.themeDark;\n  const dotDisabledColor = semanticColors.disabledBodySubtext;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.bodyTextChecked\n  const labelHoverFocusColor = palette.neutralDark;\n  const focusBorderColor = semanticColors.focusBorder;\n  const iconOrImageChoiceBorderUncheckedHoveredColor = semanticColors.inputBorderHovered;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBackgroundCheckedHovered\n  const iconOrImageChoiceBorderCheckedColor = semanticColors.inputBackgroundChecked;\n  const iconOrImageChoiceBorderCheckedHoveredColor = palette.themeDark;\n  const iconOrImageChoiceBackgroundColor = palette.neutralLighter;\n\n  const fieldHoverOrFocusProperties = {\n    selectors: {\n      '.ms-ChoiceFieldLabel': {\n        color: labelHoverFocusColor,\n      },\n      ':before': {\n        borderColor: checked ? circleCheckedHoveredBorderColor : circleHoveredBorderColor,\n      },\n      ':after': [\n        !hasIcon &&\n          !hasImage &&\n          !checked && {\n            content: '\"\"',\n            transitionProperty: 'background-color',\n            left: 5,\n            top: 5,\n            width: 10,\n            height: 10,\n            backgroundColor: dotUncheckedHoveredColor,\n          },\n        checked && {\n          borderColor: dotCheckedHoveredColor,\n        },\n      ],\n    },\n  };\n\n  const enabledFieldWithImageHoverOrFocusProperties = {\n    borderColor: checked ? iconOrImageChoiceBorderCheckedHoveredColor : iconOrImageChoiceBorderUncheckedHoveredColor,\n    selectors: {\n      ':before': {\n        opacity: 1,\n        borderColor: checked ? circleCheckedHoveredBorderColor : circleHoveredBorderColor,\n      },\n    },\n  };\n\n  const circleAreaProperties: IStyle = [\n    {\n      content: '\"\"',\n      display: 'inline-block',\n      backgroundColor: circleBackgroundColor,\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: circleBorderColor,\n      width: choiceFieldSize,\n      height: choiceFieldSize,\n      fontWeight: 'normal',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      boxSizing: 'border-box',\n      transitionProperty: 'border-color',\n      transitionDuration: choiceFieldTransitionDuration,\n      transitionTimingFunction: choiceFieldTransitionTiming,\n      borderRadius: '50%',\n    },\n    disabled && {\n      borderColor: circleDisabledBorderColor,\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'GrayText',\n          background: 'Window',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n    checked && {\n      borderColor: disabled ? circleDisabledBorderColor : circleCheckedBorderColor,\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'Highlight',\n          background: 'Window',\n          forcedColorAdjust: 'none',\n        },\n      },\n    },\n    (hasIcon || hasImage) && {\n      top: radioButtonSpacing,\n      right: radioButtonSpacing,\n      left: 'auto', // To reset the value of 'left' to its default value, so that 'right' works\n      opacity: checked ? 1 : 0,\n    },\n  ];\n\n  const dotAreaProperties: IStyle = [\n    {\n      content: '\"\"',\n      width: 0,\n      height: 0,\n      borderRadius: '50%',\n      position: 'absolute',\n      left: choiceFieldSize / 2,\n      right: 0,\n      transitionProperty: 'border-width',\n      transitionDuration: choiceFieldTransitionDuration,\n      transitionTimingFunction: choiceFieldTransitionTiming,\n      boxSizing: 'border-box',\n    },\n    checked && {\n      borderWidth: 5,\n      borderStyle: 'solid',\n      borderColor: disabled ? dotDisabledColor : dotCheckedColor,\n      left: 5,\n      top: 5,\n      width: 10,\n      height: 10,\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'Highlight',\n          forcedColorAdjust: 'none',\n        },\n      },\n    },\n    checked &&\n      (hasIcon || hasImage) && {\n        top: radioButtonSpacing + radioButtonInnerSize,\n        right: radioButtonSpacing + radioButtonInnerSize,\n        left: 'auto', // To reset the value of 'left' to its default value, so that 'right' works\n      },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        boxSizing: 'border-box',\n        color: semanticColors.bodyText,\n        minHeight: 26,\n        border: 'none',\n        position: 'relative',\n        marginTop: 8,\n        selectors: {\n          '.ms-ChoiceFieldLabel': {\n            display: 'inline-block',\n          },\n        },\n      },\n      !hasIcon &&\n        !hasImage && {\n          selectors: {\n            '.ms-ChoiceFieldLabel': {\n              paddingLeft: '26px',\n            },\n          },\n        },\n      hasImage && 'ms-ChoiceField--image',\n      hasIcon && 'ms-ChoiceField--icon',\n      (hasIcon || hasImage) && {\n        display: 'inline-flex',\n        fontSize: 0,\n        margin: '0 4px 4px 0',\n        paddingLeft: 0,\n        backgroundColor: iconOrImageChoiceBackgroundColor,\n        height: '100%',\n      },\n    ],\n    choiceFieldWrapper: [\n      classNames.choiceFieldWrapper,\n      focused && getChoiceGroupFocusStyle(focusBorderColor, hasIcon || hasImage),\n    ],\n    // The hidden input\n    input: [\n      classNames.input,\n      {\n        position: 'absolute',\n        opacity: 0,\n        top: 0,\n        right: 0,\n        width: '100%',\n        height: '100%',\n        margin: 0,\n      },\n      disabled && 'is-disabled',\n    ],\n    field: [\n      classNames.field,\n      checked && classNames.checked,\n      {\n        display: 'inline-block',\n        cursor: 'pointer',\n        marginTop: 0,\n        position: 'relative',\n        verticalAlign: 'top',\n        userSelect: 'none',\n        minHeight: 20,\n        selectors: {\n          ':hover': !disabled && fieldHoverOrFocusProperties,\n          ':focus': !disabled && fieldHoverOrFocusProperties,\n\n          // The circle\n          ':before': circleAreaProperties,\n\n          // The dot\n          ':after': dotAreaProperties,\n        },\n      },\n      hasIcon && 'ms-ChoiceField--icon',\n      hasImage && 'ms-ChoiceField-field--image',\n      (hasIcon || hasImage) && {\n        boxSizing: 'content-box',\n        cursor: 'pointer',\n        paddingTop: 22,\n        margin: 0,\n        textAlign: 'center',\n        transitionProperty: 'all',\n        transitionDuration: choiceFieldTransitionDuration,\n        transitionTimingFunction: 'ease',\n        border: '1px solid transparent',\n        justifyContent: 'center',\n        alignItems: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n      },\n      checked && {\n        borderColor: iconOrImageChoiceBorderCheckedColor,\n      },\n      (hasIcon || hasImage) &&\n        !disabled && {\n          selectors: {\n            ':hover': enabledFieldWithImageHoverOrFocusProperties,\n            ':focus': enabledFieldWithImageHoverOrFocusProperties,\n          },\n        },\n      disabled && {\n        cursor: 'default',\n        selectors: {\n          '.ms-ChoiceFieldLabel': {\n            color: semanticColors.disabledBodyText,\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'GrayText',\n                ...getHighContrastNoAdjustStyle(),\n              },\n            },\n          },\n        },\n      },\n      checked &&\n        disabled && {\n          borderColor: iconOrImageChoiceBackgroundColor,\n        },\n    ],\n    innerField: [\n      classNames.innerField,\n      hasImage && {\n        // using non-null assertion because we have a default in `ChoiceGroupOptionBase` class.\n        height: imageSize!.height,\n        width: imageSize!.width,\n      },\n      (hasIcon || hasImage) && {\n        position: 'relative',\n        display: 'inline-block',\n        paddingLeft: 30,\n        paddingRight: 30,\n      },\n      (hasIcon || hasImage) &&\n        imageIsLarge && {\n          paddingLeft: 24,\n          paddingRight: 24,\n        },\n      (hasIcon || hasImage) &&\n        disabled && {\n          opacity: 0.25,\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'GrayText',\n              opacity: 1,\n            },\n          },\n        },\n    ],\n    imageWrapper: getImageWrapperStyle(false, classNames.imageWrapper, checked),\n    selectedImageWrapper: getImageWrapperStyle(true, classNames.imageWrapper, checked),\n    iconWrapper: [\n      classNames.iconWrapper,\n      {\n        fontSize: iconSize,\n        lineHeight: iconSize,\n        height: iconSize,\n      },\n    ],\n    labelWrapper: [\n      classNames.labelWrapper,\n      fonts.medium,\n      (hasIcon || hasImage) && {\n        display: 'block',\n        position: 'relative',\n        margin: '4px 8px 2px 8px',\n        height: labelWrapperHeight,\n        lineHeight: labelWrapperLineHeight,\n        // using non-null assertion because we have a default in `ChoiceGroupOptionBase` class.\n        maxWidth: imageSize!.width * 2,\n        overflow: 'hidden',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n  };\n};\n",
    "import * as React from 'react';\nimport { styled } from '../../../Utilities';\nimport { ChoiceGroupOptionBase } from './ChoiceGroupOption.base';\nimport {\n  IChoiceGroupOptionProps,\n  IChoiceGroupOptionStyleProps,\n  IChoiceGroupOptionStyles,\n} from './ChoiceGroupOption.types';\nimport { getStyles } from './ChoiceGroupOption.styles';\n\nexport const ChoiceGroupOption: React.FunctionComponent<IChoiceGroupOptionProps> = styled<\n  IChoiceGroupOptionProps,\n  IChoiceGroupOptionStyleProps,\n  IChoiceGroupOptionStyles\n>(ChoiceGroupOptionBase, getStyles, undefined, { scope: 'ChoiceGroupOption' });\n",
    "import * as React from 'react';\n\nimport { Label } from '../../Label';\nimport {\n  initializeComponentRef,\n  warnDeprecations,\n  warnMutuallyExclusive,\n  classNamesFunction,\n  find,\n  getId,\n  isControlled,\n  getNativeProps,\n  divProperties,\n  setFocusVisibility,\n} from '../../Utilities';\nimport {\n  IChoiceGroup,\n  IChoiceGroupOption,\n  IChoiceGroupProps,\n  IChoiceGroupStyleProps,\n  IChoiceGroupStyles,\n} from './ChoiceGroup.types';\nimport { ChoiceGroupOption, IChoiceGroupOptionProps } from './ChoiceGroupOption/index';\n\nconst getClassNames = classNamesFunction<IChoiceGroupStyleProps, IChoiceGroupStyles>();\n\nexport interface IChoiceGroupState {\n  /**\n   * Current selected option, for **internal use only**.\n   * External users should access `IChoiceGroup.checkedOption` instead.\n   */\n  // TODO (Fabric 8?) - once we removed the checked property from individual options,\n  // we can probably store only the uncontrolled value in the state (right now it tracks\n  // the value regardless of controlled/uncontrolled--though if controlled, it only updates\n  // the value in state when the selectedKey prop updates)\n  keyChecked?: string | number;\n\n  /** Is set when the control has focus. */\n  keyFocused?: string | number;\n}\n\n/**\n * {@docCategory ChoiceGroup}\n */\nexport class ChoiceGroupBase extends React.Component<IChoiceGroupProps, IChoiceGroupState> implements IChoiceGroup {\n  private _id: string;\n  private _labelId: string;\n  private _focusCallbacks: { [key: string]: IChoiceGroupOptionProps['onFocus'] } = {};\n  private _changeCallbacks: { [key: string]: IChoiceGroupOptionProps['onBlur'] } = {};\n\n  constructor(props: IChoiceGroupProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('ChoiceGroup', props, { onChanged: 'onChange' });\n      warnMutuallyExclusive('ChoiceGroup', props, {\n        selectedKey: 'defaultSelectedKey',\n      });\n    }\n\n    const { defaultSelectedKey, options = [] } = props;\n    const validDefaultSelectedKey =\n      !_isControlled(props) &&\n      defaultSelectedKey !== undefined &&\n      options.some(option => option.key === defaultSelectedKey);\n\n    this.state = {\n      keyChecked: validDefaultSelectedKey ? defaultSelectedKey : this._getKeyChecked(props),\n    };\n\n    this._id = getId('ChoiceGroup');\n    this._labelId = getId('ChoiceGroupLabel');\n  }\n\n  /**\n   * Gets the current checked option.\n   */\n  public get checkedOption(): IChoiceGroupOption | undefined {\n    const { options = [] } = this.props;\n    return find(options, (value: IChoiceGroupOption) => value.key === this.state.keyChecked);\n  }\n\n  public componentDidUpdate(prevProps: IChoiceGroupProps, prevState: IChoiceGroupState): void {\n    // Only update if a new props object has been passed in (don't care about state updates)\n    if (prevProps !== this.props) {\n      const newKeyChecked = this._getKeyChecked(this.props);\n      const oldKeyChecked = this._getKeyChecked(prevProps);\n\n      if (newKeyChecked !== oldKeyChecked) {\n        this.setState({\n          keyChecked: newKeyChecked,\n        });\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const { className, theme, styles, options = [], label, required, disabled, name } = this.props;\n    const { keyChecked, keyFocused } = this.state;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, [\n      'onChange',\n      'className',\n      'required',\n    ]);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      optionsContainIconOrImage: options.some(option => !!(option.iconProps || option.imageSrc)),\n    });\n\n    const labelId = this._id + '-label';\n    const ariaLabelledBy = this.props.ariaLabelledBy || (label ? labelId : this.props['aria-labelledby']);\n\n    // TODO (Fabric 8?) - if possible, move `root` class to the actual root and eliminate\n    // `applicationRole` class (but the div structure will stay the same by necessity)\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div className={classNames.applicationRole} {...divProps}>\n        <div\n          className={classNames.root}\n          role=\"radiogroup\"\n          {...(ariaLabelledBy && { 'aria-labelledby': ariaLabelledBy })}\n        >\n          {label && (\n            <Label className={classNames.label} required={required} id={labelId} disabled={disabled}>\n              {label}\n            </Label>\n          )}\n          <div className={classNames.flexContainer}>\n            {options.map((option: IChoiceGroupOption) => {\n              const innerOptionProps = {\n                ...option,\n                focused: option.key === keyFocused,\n                checked: option.key === keyChecked,\n                disabled: option.disabled || disabled,\n                id: this._getOptionId(option),\n                labelId: this._getOptionLabelId(option),\n                name: name || this._id,\n                required,\n              };\n\n              return (\n                <ChoiceGroupOption\n                  key={option.key}\n                  onBlur={this._onBlur}\n                  onFocus={this._onFocus(option.key)}\n                  onChange={this._onChange(option.key)}\n                  {...innerOptionProps}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  public focus() {\n    const { options = [] } = this.props;\n    const optionToFocus = this.checkedOption || options.filter(option => !option.disabled)[0];\n    const elementToFocus = optionToFocus && document.getElementById(this._getOptionId(optionToFocus));\n    if (elementToFocus) {\n      elementToFocus.focus();\n      setFocusVisibility(true, elementToFocus as Element);\n    }\n  }\n\n  private _onFocus(key: string) {\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._focusCallbacks[key]) {\n      this._focusCallbacks[key] = (\n        ev: React.FocusEvent<HTMLElement | HTMLInputElement>,\n        option: IChoiceGroupOption,\n      ) => {\n        this.setState({\n          keyFocused: key,\n        });\n      };\n    }\n    return this._focusCallbacks[key];\n  }\n\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>, option: IChoiceGroupOption) => {\n    this.setState({\n      keyFocused: undefined,\n    });\n  };\n\n  private _onChange(key: string) {\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._changeCallbacks[key]) {\n      this._changeCallbacks[key] = (\n        evt: React.FormEvent<HTMLElement | HTMLInputElement>,\n        option: IChoiceGroupOption,\n      ) => {\n        // eslint-disable-next-line deprecation/deprecation\n        const { onChanged, onChange } = this.props;\n\n        // Only manage state in uncontrolled scenarios.\n        if (!_isControlled(this.props)) {\n          this.setState({\n            keyChecked: key,\n          });\n        }\n\n        // Get the original option without the `key` prop removed\n        const originalOption = find(this.props.options || [], (value: IChoiceGroupOption) => value.key === key);\n\n        // TODO: onChanged deprecated, remove else if after 07/17/2017 when onChanged has been removed.\n        if (onChange) {\n          onChange(evt, originalOption);\n        } else if (onChanged) {\n          onChanged(originalOption!, evt);\n        }\n      };\n    }\n    return this._changeCallbacks[key];\n  }\n\n  /**\n   * Returns `selectedKey` if provided, or the key of the first option with the `checked` prop set.\n   */\n  private _getKeyChecked(props: IChoiceGroupProps): string | number | undefined {\n    if (props.selectedKey !== undefined) {\n      return props.selectedKey;\n    }\n\n    const { options = [] } = props;\n    // eslint-disable-next-line deprecation/deprecation\n    const optionsChecked = options.filter((option: IChoiceGroupOption) => option.checked);\n    return optionsChecked[0] && optionsChecked[0].key;\n  }\n\n  private _getOptionId(option: IChoiceGroupOption): string {\n    return option.id || `${this._id}-${option.key}`;\n  }\n\n  private _getOptionLabelId(option: IChoiceGroupOption): string {\n    return option.labelId || `${this._labelId}-${option.key}`;\n  }\n}\n\nfunction _isControlled(props: IChoiceGroupProps): boolean {\n  return isControlled(props, 'selectedKey');\n}\n",
    "import { IChoiceGroupStyleProps, IChoiceGroupStyles } from './ChoiceGroup.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-ChoiceFieldGroup',\n  flexContainer: 'ms-ChoiceFieldGroup-flexContainer',\n};\n\nexport const getStyles = (props: IChoiceGroupStyleProps): IChoiceGroupStyles => {\n  const { className, optionsContainIconOrImage, theme } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    // TODO (Fabric 8?) - merge className back into `root` and apply root style to\n    // the actual root role=application element\n    applicationRole: className,\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        display: 'block',\n      },\n    ],\n    flexContainer: [\n      classNames.flexContainer,\n      optionsContainIconOrImage && {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n      },\n    ],\n  };\n};\n",
    "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ChoiceGroupBase } from './ChoiceGroup.base';\nimport { IChoiceGroupProps, IChoiceGroupStyles, IChoiceGroupStyleProps } from './ChoiceGroup.types';\nimport { getStyles } from './ChoiceGroup.styles';\n\nexport const ChoiceGroup: React.FunctionComponent<IChoiceGroupProps> = styled<\n  IChoiceGroupProps,\n  IChoiceGroupStyleProps,\n  IChoiceGroupStyles\n>(ChoiceGroupBase, getStyles, undefined, { scope: 'ChoiceGroup' });\n",
    "import * as React from 'react';\nimport {\n  initializeComponentRef,\n  classNamesFunction,\n  getId,\n  inputProperties,\n  getNativeProps,\n  warnDeprecations,\n  warnMutuallyExclusive,\n  FocusRects,\n} from '../../Utilities';\nimport { IToggleProps, IToggle, IToggleStyleProps, IToggleStyles } from './Toggle.types';\nimport { Label } from '../../Label';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface IToggleState {\n  checked: boolean;\n}\n\nconst getClassNames = classNamesFunction<IToggleStyleProps, IToggleStyles>();\nconst COMPONENT_NAME = 'Toggle';\n\nexport class ToggleBase extends React.Component<IToggleProps, IToggleState> implements IToggle {\n  private _id: string;\n  private _toggleButton = React.createRef<HTMLButtonElement>();\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<IToggleProps>,\n    prevState: Readonly<IToggleState>,\n  ): Partial<IToggleState> | null {\n    if (nextProps.checked === undefined) {\n      return null;\n    }\n\n    return {\n      checked: !!nextProps.checked,\n    };\n  }\n\n  constructor(props: IToggleProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      checked: 'defaultChecked',\n    });\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      onAriaLabel: 'ariaLabel',\n      offAriaLabel: undefined,\n      onChanged: 'onChange',\n    });\n\n    this.state = {\n      checked: !!(props.checked || props.defaultChecked),\n    };\n    this._id = getId('Toggle');\n  }\n\n  /**\n   * Gets the current checked state of the toggle.\n   */\n  public get checked(): boolean {\n    return this.state.checked;\n  }\n\n  public render(): JSX.Element {\n    const {\n      as: RootType = 'div',\n      className,\n      theme,\n      disabled,\n      keytipProps,\n      id,\n      label,\n      ariaLabel,\n      /* eslint-disable deprecation/deprecation */\n      onAriaLabel,\n      offAriaLabel,\n      /* eslint-enable deprecation/deprecation */\n      offText,\n      onText,\n      styles,\n      inlineLabel,\n    } = this.props;\n    const { checked } = this.state;\n    const stateText = checked ? onText : offText;\n    const badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    const toggleNativeProps = getNativeProps(this.props, inputProperties, ['defaultChecked']);\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      checked,\n      inlineLabel,\n      onOffMissing: !onText && !offText,\n    });\n\n    const toggleId = id || this._id;\n    const labelId = `${toggleId}-label`;\n    const stateTextId = `${toggleId}-stateText`;\n\n    // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label AND stateText, if existent\n\n    let labelledById: string | undefined = undefined;\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      }\n      if (stateText) {\n        labelledById = labelledById ? `${labelledById} ${stateTextId}` : stateTextId;\n      }\n    }\n\n    const ariaRole = this.props.role ? this.props.role : 'switch';\n\n    const renderPill = (keytipAttributes: any = {}) => (\n      <button\n        {...toggleNativeProps}\n        {...keytipAttributes}\n        className={classNames.pill}\n        disabled={disabled}\n        id={toggleId}\n        type=\"button\"\n        role={ariaRole}\n        ref={this._toggleButton}\n        aria-disabled={disabled}\n        aria-checked={checked}\n        aria-label={ariaLabel ? ariaLabel : badAriaLabel}\n        data-is-focusable={true}\n        onChange={this._noop}\n        onClick={this._onClick}\n        aria-labelledby={labelledById}\n      >\n        <span className={classNames.thumb} />\n      </button>\n    );\n\n    const pillContent = keytipProps ? (\n      <KeytipData\n        keytipProps={keytipProps}\n        ariaDescribedBy={(toggleNativeProps as any)['aria-describedby']}\n        disabled={disabled}\n      >\n        {(keytipAttributes: any): JSX.Element => renderPill(keytipAttributes)}\n      </KeytipData>\n    ) : (\n      renderPill()\n    );\n\n    return (\n      <RootType className={classNames.root} hidden={(toggleNativeProps as any).hidden}>\n        {label && (\n          <Label htmlFor={toggleId} className={classNames.label} id={labelId}>\n            {label}\n          </Label>\n        )}\n\n        <div className={classNames.container}>\n          {pillContent}\n          {stateText && (\n            // This second \"htmlFor\" property is needed to allow the\n            // toggle's stateText to also trigger a state change when clicked.\n            <Label htmlFor={toggleId} className={classNames.text} id={stateTextId}>\n              {stateText}\n            </Label>\n          )}\n        </div>\n        <FocusRects />\n      </RootType>\n    );\n  }\n\n  public focus() {\n    if (this._toggleButton.current) {\n      this._toggleButton.current.focus();\n    }\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { disabled, checked: checkedProp, onChange, onChanged, onClick } = this.props;\n    const { checked } = this.state;\n\n    if (!disabled) {\n      // Only update the state if the user hasn't provided it.\n      if (checkedProp === undefined) {\n        this.setState({\n          checked: !checked,\n        });\n      }\n\n      if (onChange) {\n        onChange(ev, !checked);\n      }\n\n      if (onChanged) {\n        onChanged(!checked);\n      }\n\n      if (onClick) {\n        onClick(ev);\n      }\n    }\n  };\n\n  private _noop(): void {\n    /* no-op */\n  }\n}\n",
    "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ToggleBase } from './Toggle.base';\nimport { getStyles } from './Toggle.styles';\nimport { IToggleProps, IToggleStyleProps, IToggleStyles } from './Toggle.types';\n\nexport const Toggle: React.FunctionComponent<IToggleProps> = styled<IToggleProps, IToggleStyleProps, IToggleStyles>(\n  ToggleBase,\n  getStyles,\n  undefined,\n  { scope: 'Toggle' },\n);\n",
    "import { HighContrastSelector, getFocusStyle, FontWeights, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { IToggleStyleProps, IToggleStyles } from './Toggle.types';\n\nconst DEFAULT_PILL_WIDTH = 40;\nconst DEFAULT_PILL_HEIGHT = 20;\nconst DEFAULT_THUMB_SIZE = 12;\n\nexport const getStyles = (props: IToggleStyleProps): IToggleStyles => {\n  const { theme, className, disabled, checked, inlineLabel, onOffMissing } = props;\n  const { semanticColors, palette } = theme;\n\n  // Tokens\n  const pillUncheckedBackground = semanticColors.bodyBackground;\n  const pillCheckedBackground = semanticColors.inputBackgroundChecked;\n  const pillCheckedHoveredBackground = semanticColors.inputBackgroundCheckedHovered;\n  const thumbUncheckedHoveredBackground = palette.neutralDark;\n  const pillCheckedDisabledBackground = semanticColors.disabledBodySubtext;\n  const thumbBackground = semanticColors.smallInputBorder;\n  const thumbCheckedBackground = semanticColors.inputForegroundChecked;\n  const thumbDisabledBackground = semanticColors.disabledBodySubtext;\n  const thumbCheckedDisabledBackground = semanticColors.disabledBackground;\n  const pillBorderColor = semanticColors.smallInputBorder;\n  const pillBorderHoveredColor = semanticColors.inputBorderHovered;\n  const pillBorderDisabledColor = semanticColors.disabledBodySubtext;\n  const textDisabledColor = semanticColors.disabledText;\n\n  return {\n    root: [\n      'ms-Toggle',\n      checked && 'is-checked',\n      !disabled && 'is-enabled',\n      disabled && 'is-disabled',\n      theme.fonts.medium,\n      {\n        marginBottom: '8px',\n      },\n      inlineLabel && {\n        display: 'flex',\n        alignItems: 'center',\n      },\n      className,\n    ],\n\n    label: [\n      'ms-Toggle-label',\n      { display: 'inline-block' },\n      disabled && {\n        color: textDisabledColor,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n          },\n        },\n      },\n      inlineLabel &&\n        !onOffMissing && {\n          marginRight: 16,\n        },\n      onOffMissing &&\n        inlineLabel && {\n          order: 1,\n          marginLeft: 16,\n        },\n      inlineLabel && { wordBreak: 'break-all' },\n    ],\n\n    container: [\n      'ms-Toggle-innerContainer',\n      {\n        display: 'flex',\n        position: 'relative',\n      },\n    ],\n\n    pill: [\n      'ms-Toggle-background',\n      getFocusStyle(theme, { inset: -3 }),\n      {\n        fontSize: '20px',\n        boxSizing: 'border-box',\n        width: DEFAULT_PILL_WIDTH,\n        height: DEFAULT_PILL_HEIGHT,\n        borderRadius: DEFAULT_PILL_HEIGHT / 2,\n        transition: 'all 0.1s ease',\n        border: `1px solid ${pillBorderColor}`,\n        background: pillUncheckedBackground,\n        cursor: 'pointer',\n        display: 'flex',\n        alignItems: 'center',\n        padding: '0 3px',\n      },\n      !disabled && [\n        !checked && {\n          selectors: {\n            ':hover': [\n              {\n                borderColor: pillBorderHoveredColor,\n              },\n            ],\n            ':hover .ms-Toggle-thumb': [\n              {\n                backgroundColor: thumbUncheckedHoveredBackground,\n                selectors: {\n                  [HighContrastSelector]: {\n                    borderColor: 'Highlight',\n                  },\n                },\n              },\n            ],\n          },\n        },\n        checked && [\n          {\n            background: pillCheckedBackground,\n            borderColor: 'transparent',\n            justifyContent: 'flex-end',\n          },\n          {\n            selectors: {\n              ':hover': [\n                {\n                  backgroundColor: pillCheckedHoveredBackground,\n                  borderColor: 'transparent',\n                  selectors: {\n                    [HighContrastSelector]: {\n                      backgroundColor: 'Highlight',\n                    },\n                  },\n                },\n              ],\n              [HighContrastSelector]: {\n                backgroundColor: 'Highlight',\n                ...getHighContrastNoAdjustStyle(),\n              },\n            },\n          },\n        ],\n      ],\n      disabled && [\n        {\n          cursor: 'default',\n        },\n        !checked && [\n          {\n            borderColor: pillBorderDisabledColor,\n          },\n        ],\n        checked && [\n          {\n            backgroundColor: pillCheckedDisabledBackground,\n            borderColor: 'transparent',\n            justifyContent: 'flex-end',\n          },\n        ],\n      ],\n      !disabled && {\n        selectors: {\n          '&:hover': {\n            selectors: {\n              [HighContrastSelector]: {\n                borderColor: 'Highlight',\n              },\n            },\n          },\n        },\n      },\n    ],\n\n    thumb: [\n      'ms-Toggle-thumb',\n      {\n        display: 'block',\n        width: DEFAULT_THUMB_SIZE,\n        height: DEFAULT_THUMB_SIZE,\n        borderRadius: '50%',\n        transition: 'all 0.1s ease',\n        backgroundColor: thumbBackground,\n        /* Border is added to handle high contrast mode for Firefox */\n        borderColor: 'transparent',\n        borderWidth: DEFAULT_THUMB_SIZE / 2,\n        borderStyle: 'solid',\n        boxSizing: 'border-box',\n      },\n      !disabled &&\n        checked && [\n          {\n            backgroundColor: thumbCheckedBackground,\n            selectors: {\n              [HighContrastSelector]: {\n                backgroundColor: 'Window',\n                borderColor: 'Window',\n              },\n            },\n          },\n        ],\n      disabled && [\n        !checked && [\n          {\n            backgroundColor: thumbDisabledBackground,\n          },\n        ],\n        checked && [\n          {\n            backgroundColor: thumbCheckedDisabledBackground,\n          },\n        ],\n      ],\n    ],\n\n    text: [\n      'ms-Toggle-stateText',\n      {\n        selectors: {\n          // Workaround: make rules more specific than Label rules.\n          '&&': {\n            padding: '0',\n            margin: '0 8px',\n            userSelect: 'none',\n            fontWeight: FontWeights.regular,\n          },\n        },\n      },\n      disabled && {\n        selectors: {\n          '&&': {\n            color: textDisabledColor,\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'GrayText',\n              },\n            },\n          },\n        },\n      },\n    ],\n  };\n};\n",
    "import { IObjectWithKey, ISelection, SELECTION_CHANGE, SelectionMode } from './Selection.types';\nimport { EventGroup } from '../EventGroup';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionOptions<TItem = IObjectWithKey> {\n  onSelectionChanged?: () => void;\n  /** Custom logic to generate item keys. Required if `TItem` does not have a `key` property. */\n  getKey?: (item: TItem, index?: number) => string | number;\n  canSelectItem?: (item: TItem, index?: number) => boolean;\n  selectionMode?: SelectionMode;\n  items?: TItem[];\n}\n\n/**\n * Selection options with required `getKey` property.\n * {@docCategory Selection}\n */\nexport type ISelectionOptionsWithRequiredGetKey<TItem> = ISelectionOptions<TItem> &\n  Required<Pick<ISelectionOptions<TItem>, 'getKey'>>;\n\n/**\n * {@docCategory Selection}\n */\nexport class Selection<TItem = IObjectWithKey> implements ISelection<TItem> {\n  /** Number of items selected. Do not modify. */\n  public count: number;\n  public readonly mode: SelectionMode;\n\n  private _getKey: (item: TItem, index?: number) => string | number;\n  private _canSelectItem: (item: TItem, index?: number) => boolean;\n\n  private _changeEventSuppressionCount: number;\n  private _items: TItem[];\n  private _selectedItems: TItem[] | null;\n  private _selectedIndices: number[] | undefined;\n  private _isAllSelected: boolean;\n  private _exemptedIndices: { [index: string]: boolean };\n  private _exemptedCount: number;\n  private _keyToIndexMap: { [key: string]: number };\n  private _anchoredIndex: number;\n  private _onSelectionChanged: (() => void) | undefined;\n  private _hasChanged: boolean;\n  private _unselectableIndices: { [index: string]: boolean };\n  private _unselectableCount: number;\n  private _isModal: boolean;\n\n  /**\n   * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options\n   * object with a `getKey` implementation. Providing options is optional otherwise.\n   * (At most one `options` object is accepted.)\n   */\n  constructor(\n    ...options: TItem extends IObjectWithKey // If the item type has a built-in key...\n      ? [] | [ISelectionOptions<TItem>] // Then the arguments can be empty or have the options without `getKey`\n      : [ISelectionOptionsWithRequiredGetKey<TItem>] // Otherwise, arguments require options with `getKey`.\n  ) {\n    const { onSelectionChanged, getKey, canSelectItem = () => true, items, selectionMode = SelectionMode.multiple } =\n      options[0] || ({} as ISelectionOptions<TItem>);\n\n    this.mode = selectionMode;\n\n    this._getKey = getKey || defaultGetKey;\n\n    this._changeEventSuppressionCount = 0;\n    this._exemptedCount = 0;\n    this._anchoredIndex = 0;\n    this._unselectableCount = 0;\n\n    this._onSelectionChanged = onSelectionChanged;\n    this._canSelectItem = canSelectItem;\n\n    this._isModal = false;\n\n    this.setItems(items || [], true);\n\n    this.count = this.getSelectedCount();\n  }\n\n  public canSelectItem(item: TItem, index?: number): boolean {\n    if (typeof index === 'number' && index < 0) {\n      return false;\n    }\n\n    return this._canSelectItem(item, index);\n  }\n\n  public getKey(item: TItem, index?: number): string {\n    const key = this._getKey(item, index);\n\n    return typeof key === 'number' || key ? `${key}` : '';\n  }\n\n  public setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void {\n    this._changeEventSuppressionCount += isEnabled ? -1 : 1;\n\n    if (this._changeEventSuppressionCount === 0 && this._hasChanged) {\n      this._hasChanged = false;\n\n      if (!suppressChange) {\n        this._change();\n      }\n    }\n  }\n\n  public isModal(): boolean {\n    return this._isModal;\n  }\n\n  public setModal(isModal: boolean): void {\n    if (this._isModal !== isModal) {\n      this.setChangeEvents(false);\n\n      this._isModal = isModal;\n\n      if (!isModal) {\n        this.setAllSelected(false);\n      }\n\n      this._change();\n\n      this.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * Selection needs the items, call this method to set them. If the set\n   * of items is the same, this will re-evaluate selection and index maps.\n   * Otherwise, shouldClear should be set to true, so that selection is\n   * cleared.\n   */\n  public setItems(items: TItem[], shouldClear: boolean = true): void {\n    const newKeyToIndexMap: { [key: string]: number } = {};\n    const newUnselectableIndices: { [key: string]: boolean } = {};\n    let hasSelectionChanged = false;\n\n    this.setChangeEvents(false);\n\n    // Reset the unselectable count.\n    this._unselectableCount = 0;\n\n    // Build lookup table for quick selection evaluation.\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n\n      if (item) {\n        const key = this.getKey(item, i);\n\n        if (key) {\n          newKeyToIndexMap[key] = i;\n        }\n      }\n\n      newUnselectableIndices[i] = item && !this.canSelectItem(item);\n      if (newUnselectableIndices[i]) {\n        this._unselectableCount++;\n      }\n    }\n\n    if (shouldClear || items.length === 0) {\n      this._setAllSelected(false, true);\n    }\n\n    // Check the exemption list for discrepencies.\n    const newExemptedIndicies: { [key: string]: boolean } = {};\n    let newExemptedCount = 0;\n\n    for (const indexProperty in this._exemptedIndices) {\n      if (this._exemptedIndices.hasOwnProperty(indexProperty)) {\n        const index = Number(indexProperty);\n        const item = this._items[index];\n        const exemptKey = item ? this.getKey(item, Number(index)) : undefined;\n        const newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;\n\n        if (newIndex === undefined) {\n          // The item has likely been replaced or removed.\n          hasSelectionChanged = true;\n        } else {\n          // We know the new index of the item. update the existing exemption table.\n          newExemptedIndicies[newIndex] = true;\n          newExemptedCount++;\n          hasSelectionChanged = hasSelectionChanged || newIndex !== index;\n        }\n      }\n    }\n\n    if (this._items && this._exemptedCount === 0 && items.length !== this._items.length && this._isAllSelected) {\n      // If everything was selected but the number of items has changed, selection has changed.\n      hasSelectionChanged = true;\n    }\n\n    this._exemptedIndices = newExemptedIndicies;\n    this._exemptedCount = newExemptedCount;\n    this._keyToIndexMap = newKeyToIndexMap;\n    this._unselectableIndices = newUnselectableIndices;\n    this._items = items;\n    this._selectedItems = null;\n\n    if (hasSelectionChanged) {\n      this._updateCount();\n      this._change();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public getItems(): TItem[] {\n    return this._items;\n  }\n\n  public getSelection(): TItem[] {\n    if (!this._selectedItems) {\n      this._selectedItems = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedItems.push(items[i]);\n          }\n        }\n      }\n    }\n\n    return this._selectedItems;\n  }\n\n  public getSelectedCount(): number {\n    return this._isAllSelected\n      ? this._items.length - this._exemptedCount - this._unselectableCount\n      : this._exemptedCount;\n  }\n\n  public getSelectedIndices(): number[] {\n    if (!this._selectedIndices) {\n      this._selectedIndices = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedIndices.push(i);\n          }\n        }\n      }\n    }\n\n    return this._selectedIndices;\n  }\n\n  public isRangeSelected(fromIndex: number, count: number): boolean {\n    if (count === 0) {\n      return false;\n    }\n\n    const endIndex = fromIndex + count;\n\n    for (let i = fromIndex; i < endIndex; i++) {\n      if (!this.isIndexSelected(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isAllSelected(): boolean {\n    let selectableCount = this._items.length - this._unselectableCount;\n\n    // In single mode, we can only have a max of 1 item.\n    if (this.mode === SelectionMode.single) {\n      selectableCount = Math.min(selectableCount, 1);\n    }\n\n    return (\n      (this.count > 0 && this._isAllSelected && this._exemptedCount === 0) ||\n      (!this._isAllSelected && this._exemptedCount === selectableCount && selectableCount > 0)\n    );\n  }\n\n  public isKeySelected(key: string): boolean {\n    const index = this._keyToIndexMap[key];\n\n    return this.isIndexSelected(index);\n  }\n\n  public isIndexSelected(index: number): boolean {\n    return !!(\n      (this.count > 0 && this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index]) ||\n      (!this._isAllSelected && this._exemptedIndices[index])\n    );\n  }\n\n  public setAllSelected(isAllSelected: boolean): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void {\n    const index = this._keyToIndexMap[key];\n\n    if (index >= 0) {\n      this.setIndexSelected(index, isSelected, shouldAnchor);\n    }\n  }\n\n  public setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    // Clamp the index.\n    index = Math.min(Math.max(0, index), this._items.length - 1);\n\n    // No-op on out of bounds selections.\n    if (index < 0 || index >= this._items.length) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n\n    const isExempt = this._exemptedIndices[index];\n    const canSelect = !this._unselectableIndices[index];\n\n    if (canSelect) {\n      if (isSelected && this.mode === SelectionMode.single) {\n        // If this is single-select, the previous selection should be removed.\n        this._setAllSelected(false, true);\n      }\n\n      // Determine if we need to remove the exemption.\n      if (isExempt && ((isSelected && this._isAllSelected) || (!isSelected && !this._isAllSelected))) {\n        delete this._exemptedIndices[index];\n        this._exemptedCount--;\n      }\n\n      // Determine if we need to add the exemption.\n      if (!isExempt && ((isSelected && !this._isAllSelected) || (!isSelected && this._isAllSelected))) {\n        this._exemptedIndices[index] = true;\n        this._exemptedCount++;\n      }\n\n      if (shouldAnchor) {\n        this._anchoredIndex = index;\n      }\n    }\n\n    this._updateCount();\n\n    this.setChangeEvents(true);\n  }\n\n  public selectToKey(key: string, clearSelection?: boolean): void {\n    this.selectToIndex(this._keyToIndexMap[key], clearSelection);\n  }\n\n  public selectToIndex(index: number, clearSelection?: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    if (this.mode === SelectionMode.single) {\n      this.setIndexSelected(index, true, true);\n      return;\n    }\n\n    const anchorIndex = this._anchoredIndex || 0;\n    let startIndex = Math.min(index, anchorIndex);\n    const endIndex = Math.max(index, anchorIndex);\n\n    this.setChangeEvents(false);\n\n    if (clearSelection) {\n      this._setAllSelected(false, true);\n    }\n\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, true, false);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public toggleAllSelected(): void {\n    this.setAllSelected(!this.isAllSelected());\n  }\n\n  public toggleKeySelected(key: string): void {\n    this.setKeySelected(key, !this.isKeySelected(key), true);\n  }\n\n  public toggleIndexSelected(index: number): void {\n    this.setIndexSelected(index, !this.isIndexSelected(index), true);\n  }\n\n  public toggleRangeSelected(fromIndex: number, count: number): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    const isRangeSelected = this.isRangeSelected(fromIndex, count);\n    const endIndex = fromIndex + count;\n\n    if (this.mode === SelectionMode.single && count > 1) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n    for (let i = fromIndex; i < endIndex; i++) {\n      this.setIndexSelected(i, !isRangeSelected, false);\n    }\n    this.setChangeEvents(true);\n  }\n\n  private _updateCount(preserveModalState: boolean = false): void {\n    const count = this.getSelectedCount();\n\n    if (count !== this.count) {\n      this.count = count;\n      this._change();\n    }\n\n    if (!this.count && !preserveModalState) {\n      this.setModal(false);\n    }\n  }\n\n  private _setAllSelected(isAllSelected: boolean, preserveModalState: boolean = false): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount(preserveModalState);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  private _change(): void {\n    if (this._changeEventSuppressionCount === 0) {\n      this._selectedItems = null;\n      this._selectedIndices = undefined;\n\n      EventGroup.raise(this, SELECTION_CHANGE);\n\n      if (this._onSelectionChanged) {\n        this._onSelectionChanged();\n      }\n    } else {\n      this._hasChanged = true;\n    }\n  }\n}\n\nfunction defaultGetKey<TItem = IObjectWithKey>(item: TItem, index?: number): string | number {\n  // 0 may be used as a key\n  const { key = `${index}` } = (item || {}) as IObjectWithKey;\n  return key;\n}\n",
    "import * as React from 'react';\nimport { GroupedListBase } from './GroupedList.base';\nimport { IList, IListProps } from '../../List';\nimport { IFocusZoneProps } from '../../FocusZone';\nimport { IRefObject, IRenderFunction } from '../../Utilities';\nimport { IDragDropContext, IDragDropEvents, IDragDropHelper } from '../../utilities/dragdrop/index';\nimport { ISelection, SelectionMode } from '../../utilities/selection/index';\nimport { IViewport } from '../../utilities/decorators/withViewport';\nimport { ITheme, IStyle } from '../../Styling';\nimport { IStyleFunctionOrObject } from '../../Utilities';\nimport { IGroupHeaderProps } from './GroupHeader.types';\nimport { IGroupShowAllProps } from './GroupShowAll.types';\nimport { IGroupFooterProps } from './GroupFooter.types';\n\n/**\n * {@docCategory GroupedList}\n */\nexport enum CollapseAllVisibility {\n  hidden = 0,\n  visible = 1,\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list props don't change, but the list still\n   * needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change, you can\n   * call this to force a re-evaluation. Be aware that this can be an expensive operation and should be done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Toggles the collapsed state of all the groups in the list.\n   */\n  toggleCollapseAll: (allCollapsed: boolean) => void;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListProps extends React.ClassAttributes<GroupedListBase> {\n  /**\n   * Theme that is passed in from Higher Order Component\n   */\n  theme?: ITheme;\n\n  /**\n   * Style function to be passed in to override the themed or default styles\n   */\n  styles?: IStyleFunctionOrObject<IGroupedListStyleProps, IGroupedListStyles>;\n\n  /**\n   * Optional callback to access the IGroupedList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IGroupedList>;\n\n  /** Optional class name to add to the root element. */\n  className?: string;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to groups and rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Optional grouping instructions. */\n  groups?: IGroup[];\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional properties to pass through to the FocusZone. */\n  focusZoneProps?: IFocusZoneProps;\n\n  /** Optional properties to pass through to the list components being rendered. */\n  listProps?: IListProps;\n\n  /** Optional properties to pass through to the root list component being rendered. */\n  rootListProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Override the default role for GroupedList.  */\n  role?: string;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Optional callback when the group expand state changes between all collapsed and at least one group is expanded. */\n  onGroupExpandStateChanged?: (isSomeGroupExpanded: boolean) => void;\n\n  /**\n   * boolean to control if pages containing unchanged items should be cached, this is a perf optimization\n   * The same property in List.Props\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /**\n   * Optional function to override default group height calculation used by list virtualization.\n   */\n  getGroupHeight?: (group: IGroup, groupIndex: number) => number;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroup {\n  /**\n   * Unique identifier for the group.\n   */\n  key: string;\n\n  /**\n   * Display name for the group, rendered on the header.\n   */\n  name: string;\n\n  /**\n   * Start index for the group within the given items.\n   */\n  startIndex: number;\n\n  /**\n   * How many items should be rendered within the group.\n   */\n  count: number;\n\n  /**\n   * Nested groups, if any.\n   */\n  children?: IGroup[];\n\n  /**\n   * Number indicating the level of nested groups.\n   */\n  level?: number;\n\n  /**\n   * Deprecated at 1.0.0, selection state will be controled by the selection store only.\n   * @deprecated At 1.0.0, selection state wil be controlled by the selection store only.\n   */\n  isSelected?: boolean;\n\n  /**\n   * If all the items in the group are collapsed.\n   */\n  isCollapsed?: boolean;\n\n  /**\n   * If the items within the group are summarized or showing all.\n   */\n  isShowingAll?: boolean;\n\n  /**\n   * If drag/drop is enabled for the group header.\n   */\n  isDropEnabled?: boolean;\n\n  /**\n   * Arbitrary data required to be preserved by the caller.\n   */\n  data?: any;\n\n  /**\n   * Optional accessibility label (aria-label) attribute that will be stamped on to the element.\n   * If none is specified, the arai-label attribute will contain the group name\n   */\n  ariaLabel?: string;\n\n  /**\n   * Optional flag to indicate the group has more data to load than the current group count indicated.\n   * This can be used to indicate that a plus should be rendered next to the group count in the header.\n   */\n  hasMoreData?: boolean;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupRenderProps {\n  /** Boolean indicating if all groups are in collapsed state. */\n  isAllGroupsCollapsed?: boolean;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Callback for when all groups are expanded or collapsed. */\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** Information to pass in to the group Show all footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /**\n   * Override which allows the caller to provide a custom header.\n   */\n  onRenderHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /**\n   * Override which allows the caller to provide a custom Show All link.\n   */\n  onRenderShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /**\n   * Override which allows the caller to provide a custom footer.\n   */\n  onRenderFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Flag to indicate whether to ignore the collapsing icon on header.\n   * @defaultvalue CollapseAllVisibility.visible\n   */\n  collapseAllVisibility?: CollapseAllVisibility;\n\n  /**\n   * Boolean indicating if empty groups are shown\n   * @defaultvalue false\n   */\n  showEmptyGroups?: boolean;\n\n  /**\n   * Override which allows the caller to provide a custom aria role\n   */\n  role?: string;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupDividerProps {\n  componentRef?: IRefObject<{}>;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Callback to determine if a group has missing items and needs to load them from the server. */\n  isGroupLoading?: (group: IGroup) => boolean;\n\n  /** Text shown on group headers to indicate the group is being loaded. */\n  loadingText?: string;\n\n  /** The group to be rendered by the header. */\n  group?: IGroup;\n\n  /** The index of the group. */\n  groupIndex?: number;\n\n  /** The indent level of the group. */\n  groupLevel?: number;\n\n  /** Defines the number of columns a group header needs to span in the case of a grid or treegrid */\n  ariaColSpan?: number;\n\n  /** Defines the number of items in the current set of listitems or treeitems */\n  ariaSetSize?: number;\n\n  /** Defines an element's number or position in the current set of listitems or treeitems */\n  ariaPosInSet?: number;\n\n  /** Defines the number of items in the current set of grid items */\n  ariaRowCount?: number;\n\n  /** Defines an element's number or position in the current set of grid items */\n  ariaRowIndex?: number;\n\n  /**\n   * Width corresponding to a single level.\n   * This is multiplied by the groupLevel to get the full spacer width for the group.\n   */\n  indentWidth?: number;\n\n  /** If all items in the group are selected. */\n  selected?: boolean;\n\n  /**\n   * Deprecated at v.65.1 and will be removed by v 1.0. Use `selected` instead.\n   * @deprecated Use `selected` instead.\n   */\n  isSelected?: boolean;\n\n  /** A reference to the viewport in which the header is rendered. */\n  viewport?: IViewport;\n\n  /** The selection mode of the list the group lives within. */\n  selectionMode?: SelectionMode;\n\n  /** Text to display for the group footer. */\n  footerText?: string;\n\n  /** Text to display for the group \"Show All\" link. */\n  showAllLinkText?: string;\n\n  /** Callback for when the group \"Show All\" link is clicked */\n  onToggleSummarize?: (group: IGroup) => void;\n\n  /** Callback for when the group header is clicked. */\n  onGroupHeaderClick?: (group: IGroup) => void;\n\n  /** Callback for when the \"keyup\" event is fired on the group header . */\n  onGroupHeaderKeyUp?: (ev: React.KeyboardEvent<HTMLElement>, group: IGroup) => void;\n\n  /** Callback for when the group is expanded or collapsed. */\n  onToggleCollapse?: (group: IGroup) => void;\n\n  /** Callback for when the group is selected. */\n  onToggleSelectGroup?: (group: IGroup) => void;\n\n  /** Determines if the group selection check box is shown for collapsed groups. */\n  isCollapsedGroupSelectVisible?: boolean;\n\n  /** Override which allows the caller to provider a custom renderer for the GroupHeader title. */\n  onRenderTitle?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Props for expand/collapse button\n   * @deprecated Use {@link IGroupHeaderProps.expandButtonProps} instead.\n   */\n  expandButtonProps?: React.HTMLAttributes<HTMLButtonElement>;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n\n  /** Custom className */\n  className?: string;\n\n  /** Theme provided by the Higher Order Component */\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport type IGroupedListStyleProps = Required<Pick<IGroupedListProps, 'theme'>> &\n  Pick<IGroupedListProps, 'className'> & {\n    /** whether or not the group is collapsed */\n    isCollapsed?: boolean;\n\n    /** Whether the group is in compact mode or not */\n    compact?: boolean;\n  };\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListStyles {\n  root: IStyle;\n  group: IStyle;\n  groupIsDropping: IStyle;\n}\n",
    "import * as React from 'react';\nimport { IGroupSpacerProps } from './GroupSpacer.types';\n\nexport const SPACER_WIDTH = 36;\n\nexport const GroupSpacer: React.FunctionComponent<IGroupSpacerProps> = props => {\n  const { count, indentWidth = SPACER_WIDTH, role = 'presentation' } = props;\n  const width = count * indentWidth;\n\n  return count > 0 ? (\n    <span className={'ms-GroupSpacer'} style={{ display: 'inline-block', width }} role={role} />\n  ) : null;\n};\n",
    "import {\n  labelProperties,\n  audioProperties,\n  videoProperties,\n  olProperties,\n  liProperties,\n  anchorProperties,\n  buttonProperties,\n  inputProperties,\n  textAreaProperties,\n  selectProperties,\n  optionProperties,\n  tableProperties,\n  trProperties,\n  thProperties,\n  tdProperties,\n  colGroupProperties,\n  colProperties,\n  formProperties,\n  iframeProperties,\n  imgProperties,\n  htmlElementProperties,\n  getNativeProps,\n} from './properties';\nimport * as React from 'react';\n\nconst nativeElementMap: Record<string, Record<string, number>> = {\n  label: labelProperties,\n  audio: audioProperties,\n  video: videoProperties,\n  ol: olProperties,\n  li: liProperties,\n  a: anchorProperties,\n  button: buttonProperties,\n  input: inputProperties,\n  textarea: textAreaProperties,\n  select: selectProperties,\n  option: optionProperties,\n  table: tableProperties,\n  tr: trProperties,\n  th: thProperties,\n  td: tdProperties,\n  colGroup: colGroupProperties,\n  col: colProperties,\n  form: formProperties,\n  iframe: iframeProperties,\n  img: imgProperties,\n};\n\n/**\n * Given an element tagname and user props, filters the props to only allowed props for the given\n * element type.\n * @param tagName - Tag name (e.g. \"div\")\n * @param props - Props object\n * @param excludedPropNames - List of props to disallow\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getNativeElementProps<TAttributes extends React.HTMLAttributes<any>>(\n  tagName: string,\n  props: {},\n  excludedPropNames?: string[],\n): TAttributes {\n  const allowedPropNames = (tagName && nativeElementMap[tagName]) || htmlElementProperties;\n\n  return getNativeProps(props, allowedPropNames, excludedPropNames);\n}\n",
    "import * as React from 'react';\nimport { ICheckProps } from './Check.types';\nimport { Icon, FontIcon } from '../../Icon';\nimport { classNamesFunction } from '../../Utilities';\nimport { ICheckStyleProps, ICheckStyles } from './Check.types';\n\nconst getClassNames = classNamesFunction<ICheckStyleProps, ICheckStyles>();\n\nexport const CheckBase: React.FunctionComponent<ICheckProps> = props => {\n  const { checked = false, className, theme, styles, useFastIcons = true } = props;\n\n  const classNames = getClassNames(styles!, { theme: theme!, className, checked });\n  const IconComponent = useFastIcons ? FontIcon : Icon;\n\n  return (\n    <div className={classNames.root}>\n      <IconComponent iconName=\"CircleRing\" className={classNames.circle} />\n      <IconComponent iconName=\"StatusCircleCheckmark\" className={classNames.check} />\n    </div>\n  );\n};\nCheckBase.displayName = 'CheckBase';\n",
    "import { ICheckStyleProps, ICheckStyles } from './Check.types';\nimport {\n  HighContrastSelector,\n  IStyle,\n  getGlobalClassNames,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL } from '../../Utilities';\n\nexport const CheckGlobalClassNames = {\n  root: 'ms-Check',\n  circle: 'ms-Check-circle',\n  check: 'ms-Check-check',\n  /** Must be manually applied to the parent element of the check. */\n  checkHost: 'ms-Check-checkHost',\n};\n\nexport const getStyles = (props: ICheckStyleProps): ICheckStyles => {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height = props.checkBoxHeight || '18px', checked, className, theme } = props;\n\n  const { palette, semanticColors, fonts } = theme;\n  const isRTL = getRTL(theme);\n\n  const classNames = getGlobalClassNames(CheckGlobalClassNames, theme);\n\n  const sharedCircleCheck: IStyle = {\n    fontSize: height,\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    width: height,\n    height: height,\n    textAlign: 'center',\n    verticalAlign: 'middle',\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      {\n        // lineHeight currently needs to be a string to output without 'px'\n        lineHeight: '1',\n        width: height,\n        height: height,\n        verticalAlign: 'top',\n        position: 'relative',\n        userSelect: 'none',\n\n        selectors: {\n          ':before': {\n            content: '\"\"',\n            position: 'absolute',\n            top: '1px',\n            right: '1px',\n            bottom: '1px',\n            left: '1px',\n            borderRadius: '50%',\n            opacity: 1,\n            background: semanticColors.bodyBackground,\n          },\n\n          [`.${classNames.checkHost}:hover &, .${classNames.checkHost}:focus &, &:hover, &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n\n      checked && [\n        'is-checked',\n        {\n          selectors: {\n            ':before': {\n              background: palette.themePrimary,\n              opacity: 1,\n              selectors: {\n                [HighContrastSelector]: {\n                  background: 'Window',\n                },\n              },\n            },\n          },\n        },\n      ],\n      className,\n    ],\n\n    circle: [\n      classNames.circle,\n      sharedCircleCheck,\n\n      {\n        color: palette.neutralSecondary,\n\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'WindowText',\n          },\n        },\n      },\n\n      checked && {\n        color: palette.white,\n      },\n    ],\n\n    check: [\n      classNames.check,\n      sharedCircleCheck,\n\n      {\n        opacity: 0,\n        color: palette.neutralSecondary,\n        fontSize: IconFontSizes.medium,\n        left: isRTL ? '-0.5px' : '.5px', // for centering the check icon inside the circle.\n\n        selectors: {\n          ':hover': {\n            opacity: 1,\n          },\n\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      checked && {\n        opacity: 1,\n        color: palette.white,\n        fontWeight: 900,\n\n        selectors: {\n          [HighContrastSelector]: {\n            border: 'none',\n            color: 'WindowText',\n          },\n        },\n      },\n    ],\n\n    checkHost: classNames.checkHost,\n  };\n};\n",
    "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ICheckProps, ICheckStyleProps, ICheckStyles } from './Check.types';\nimport { CheckBase } from './Check.base';\nimport { getStyles } from './Check.styles';\n\nexport const Check: React.FunctionComponent<ICheckProps> = styled<ICheckProps, ICheckStyleProps, ICheckStyles>(\n  CheckBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Check',\n  },\n  true,\n);\n",
    "import { IDetailsRowStyleProps, IDetailsRowStyles, ICellStyleProps } from './DetailsRow.types';\nimport {\n  AnimationClassNames,\n  AnimationStyles,\n  HighContrastSelector,\n  IStyle,\n  getFocusStyle,\n  getGlobalClassNames,\n  FontWeights,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\n\nexport const DetailsRowGlobalClassNames = {\n  root: 'ms-DetailsRow',\n  // TODO: in Fabric 7.0 lowercase the 'Compact' for consistency across other components.\n  compact: 'ms-DetailsList--Compact',\n  cell: 'ms-DetailsRow-cell',\n  cellAnimation: 'ms-DetailsRow-cellAnimation',\n  cellCheck: 'ms-DetailsRow-cellCheck',\n  check: 'ms-DetailsRow-check',\n  cellMeasurer: 'ms-DetailsRow-cellMeasurer',\n  listCellFirstChild: 'ms-List-cell:first-child',\n  isContentUnselectable: 'is-contentUnselectable',\n  isSelected: 'is-selected',\n  isCheckVisible: 'is-check-visible',\n  isRowHeader: 'is-row-header',\n  fields: 'ms-DetailsRow-fields',\n};\nconst IsFocusableSelector = \"[data-is-focusable='true']\";\n\nexport const DEFAULT_CELL_STYLE_PROPS: ICellStyleProps = {\n  cellLeftPadding: 12,\n  cellRightPadding: 8,\n  cellExtraRightPadding: 24,\n};\n\n// Source of default row heights to share.\nexport const DEFAULT_ROW_HEIGHTS = {\n  rowHeight: 42,\n  compactRowHeight: 32,\n};\n\n// Constant values\nconst values = {\n  ...DEFAULT_ROW_HEIGHTS,\n  rowVerticalPadding: 11,\n  compactRowVerticalPadding: 6,\n};\n\nexport const getDetailsRowStyles = (props: IDetailsRowStyleProps): IDetailsRowStyles => {\n  const {\n    theme,\n    isSelected,\n    canSelect,\n    droppingClassName,\n    anySelected,\n    isCheckVisible,\n    checkboxCellClassName,\n    compact,\n    className,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    enableUpdateAnimations,\n    disabled,\n  } = props;\n\n  const { palette, fonts } = theme;\n  const {\n    neutralPrimary,\n    white,\n    neutralSecondary,\n    neutralLighter,\n    neutralLight,\n    neutralDark,\n    neutralQuaternaryAlt,\n  } = palette;\n  const { focusBorder } = theme.semanticColors;\n\n  const classNames = getGlobalClassNames(DetailsRowGlobalClassNames, theme);\n\n  const colors = {\n    // Default\n    defaultHeaderText: neutralPrimary,\n    defaultMetaText: neutralSecondary,\n    defaultBackground: white,\n\n    // Default Hover\n    defaultHoverHeaderText: neutralDark,\n    defaultHoverMetaText: neutralPrimary,\n    defaultHoverBackground: neutralLighter,\n\n    // Selected\n    selectedHeaderText: neutralDark,\n    selectedMetaText: neutralPrimary,\n    selectedBackground: neutralLight,\n\n    // Selected Hover\n    selectedHoverHeaderText: neutralDark,\n    selectedHoverMetaText: neutralPrimary,\n    selectedHoverBackground: neutralQuaternaryAlt,\n\n    // Focus\n    focusHeaderText: neutralDark,\n    focusMetaText: neutralPrimary,\n    focusBackground: neutralLight,\n    focusHoverBackground: neutralQuaternaryAlt,\n  };\n\n  const rowHighContrastFocus = {\n    top: 2,\n    right: 2,\n    bottom: 2,\n    left: 2,\n  };\n\n  // Selected row styles\n  const selectedStyles: IStyle = [\n    getFocusStyle(theme, {\n      inset: -1,\n      borderColor: focusBorder,\n      outlineColor: white,\n      highContrastStyle: rowHighContrastFocus,\n    }),\n    classNames.isSelected,\n    {\n      color: colors.selectedMetaText,\n      background: colors.selectedBackground,\n      borderBottom: `1px solid ${white}`,\n      selectors: {\n        '&:before': {\n          position: 'absolute',\n          display: 'block',\n          top: -1,\n          height: 1,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          content: '',\n          borderTop: `1px solid ${white}`,\n        },\n\n        // Selected State hover\n        '&:hover': {\n          background: colors.selectedHoverBackground,\n          color: colors.selectedHoverMetaText,\n          selectors: {\n            // Selected State hover meta cell\n            [`.${classNames.cell} ${HighContrastSelector}`]: {\n              color: 'HighlightText',\n              selectors: {\n                '> a': {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Selected State hover Header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.selectedHoverHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Ensure high-contrast mode overrides default hover background\n            [HighContrastSelector]: {\n              background: 'Highlight',\n            },\n          },\n        },\n\n        // Focus state\n        '&:focus': {\n          background: colors.focusBackground,\n          selectors: {\n            // Selected State hover meta cell\n            [`.${classNames.cell}`]: {\n              color: colors.focusMetaText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                  selectors: {\n                    '> a': {\n                      color: 'HighlightText',\n                    },\n                  },\n                },\n              },\n            },\n\n            // Row header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.focusHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Ensure high-contrast mode overrides default focus background\n            [HighContrastSelector]: {\n              background: 'Highlight',\n            },\n          },\n        },\n\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n          selectors: {\n            a: {\n              color: 'HighlightText',\n            },\n          },\n        },\n\n        // Focus and hover state\n        '&:focus:hover': {\n          background: colors.focusHoverBackground,\n        },\n      },\n    },\n  ];\n\n  const cannotSelectStyles: IStyle = [\n    classNames.isContentUnselectable,\n    {\n      userSelect: 'none',\n      cursor: 'default',\n    },\n  ];\n\n  const rootCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    border: 0,\n  };\n\n  const cellCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    paddingTop: values.compactRowVerticalPadding,\n    paddingBottom: values.compactRowVerticalPadding,\n    paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n  };\n\n  const defaultCellStyles: IStyle = [\n    getFocusStyle(theme, { inset: -1 }),\n    classNames.cell,\n    {\n      display: 'inline-block',\n      position: 'relative',\n      boxSizing: 'border-box',\n      minHeight: values.rowHeight,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      paddingTop: values.rowVerticalPadding,\n      paddingBottom: values.rowVerticalPadding,\n      paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n      selectors: {\n        '& > button': {\n          maxWidth: '100%',\n        },\n\n        [IsFocusableSelector]: getFocusStyle(theme, { inset: -1, borderColor: neutralSecondary, outlineColor: white }),\n      },\n    },\n\n    isSelected && {\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n          selectors: {\n            a: {\n              color: 'HighlightText',\n            },\n          },\n        },\n      },\n    },\n\n    compact && cellCompactStyles,\n    disabled && { opacity: 0.5 },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      AnimationClassNames.fadeIn400,\n      droppingClassName,\n      theme.fonts.small,\n      isCheckVisible && classNames.isCheckVisible,\n      getFocusStyle(theme, { borderColor: focusBorder, outlineColor: white }),\n      {\n        borderBottom: `1px solid ${neutralLighter}`,\n        background: colors.defaultBackground,\n        color: colors.defaultMetaText,\n        // This ensures that the row always tries to consume is minimum width and does not compress.\n        display: 'inline-flex',\n        minWidth: '100%',\n        minHeight: values.rowHeight,\n        whiteSpace: 'nowrap',\n        padding: 0,\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        textAlign: 'left',\n        selectors: {\n          [`.${classNames.listCellFirstChild} &:before`]: {\n            display: 'none',\n          },\n\n          '&:hover': {\n            background: colors.defaultHoverBackground,\n            color: colors.defaultHoverMetaText,\n            selectors: {\n              [`.${classNames.isRowHeader}`]: {\n                color: colors.defaultHoverHeaderText,\n              },\n            },\n          },\n\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n        },\n      },\n      isSelected && selectedStyles,\n      !canSelect && cannotSelectStyles,\n      compact && rootCompactStyles,\n      className,\n    ],\n\n    cellUnpadded: {\n      paddingRight: `${cellStyleProps.cellRightPadding}px`,\n    },\n\n    cellPadded: {\n      paddingRight: `${cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding}px`,\n      selectors: {\n        [`&.${classNames.cellCheck}`]: {\n          paddingRight: 0,\n        },\n      },\n    },\n\n    cell: defaultCellStyles,\n    cellAnimation: enableUpdateAnimations && AnimationStyles.slideLeftIn40,\n    cellMeasurer: [\n      classNames.cellMeasurer,\n      {\n        overflow: 'visible',\n        whiteSpace: 'nowrap',\n      },\n    ],\n    checkCell: [\n      defaultCellStyles,\n      classNames.cellCheck,\n      checkboxCellClassName,\n      {\n        padding: 0,\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        flexShrink: 0,\n      },\n    ],\n    checkCover: {\n      position: 'absolute',\n      top: -1,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      display: anySelected ? 'block' : 'none',\n    },\n    fields: [\n      classNames.fields,\n      {\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n    isRowHeader: [\n      classNames.isRowHeader,\n      {\n        color: colors.defaultHeaderText,\n        fontSize: fonts.medium.fontSize,\n      },\n      isSelected && {\n        color: colors.selectedHeaderText,\n        fontWeight: FontWeights.semibold,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'HighlightText',\n          },\n        },\n      },\n    ],\n    isMultiline: [\n      defaultCellStyles,\n      {\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n        textOverflow: 'clip',\n      },\n    ],\n    check: [classNames.check],\n  };\n};\n",
    "import { IDetailsHeaderStyleProps, IDetailsHeaderStyles } from './DetailsHeader.types';\nimport {\n  getFocusStyle,\n  focusClear,\n  IStyle,\n  getGlobalClassNames,\n  HighContrastSelector,\n  hiddenContentStyle,\n  ITheme,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL, IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { ICellStyleProps } from './DetailsRow.types';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPANDER_WIDTH } from '../GroupedList/GroupSpacer';\n\nconst GlobalClassNames = {\n  tooltipHost: 'ms-TooltipHost',\n  root: 'ms-DetailsHeader',\n  cell: 'ms-DetailsHeader-cell',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintCaretStyle: 'ms-DetailsHeader-dropHintCaretStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVertical: 'ms-DetailsColumn-gripperBarVertical',\n  checkTooltip: 'ms-DetailsHeader-checkTooltip',\n  check: 'ms-DetailsHeader-check',\n};\n\nexport const HEADER_HEIGHT = 42;\n\nexport const getCellStyles = (props: { theme: ITheme; cellStyleProps?: ICellStyleProps }): IStyle => {\n  const { theme, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return [\n    classNames.cell,\n    getFocusStyle(theme),\n    {\n      color: semanticColors.bodyText,\n      position: 'relative',\n      display: 'inline-block',\n      boxSizing: 'border-box',\n      padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n      lineHeight: 'inherit',\n      margin: '0',\n      height: HEADER_HEIGHT,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      textAlign: 'left',\n    },\n  ];\n};\n\nexport const getStyles = (props: IDetailsHeaderStyleProps): IDetailsHeaderStyles => {\n  const {\n    theme,\n    className,\n    isAllSelected,\n    isResizingColumn,\n    isSizing,\n    isAllCollapsed,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const cellSizerFadeInStyles: IStyle = {\n    opacity: 1,\n    transition: 'opacity 0.3s linear',\n  };\n\n  const cellStyles = getCellStyles(props);\n\n  return {\n    root: [\n      classNames.root,\n      fonts.small,\n      {\n        display: 'inline-block',\n        background: colors.headerBackgroundColor,\n        position: 'relative',\n        minWidth: '100%',\n        verticalAlign: 'top',\n        height: HEADER_HEIGHT,\n        lineHeight: HEADER_HEIGHT,\n        whiteSpace: 'nowrap',\n        boxSizing: 'content-box',\n        paddingBottom: '1px',\n        paddingTop: '16px',\n        borderBottom: `1px solid ${semanticColors.bodyDivider}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`& .${classNames.tooltipHost} .${classNames.checkTooltip}`]: {\n            display: 'block',\n          },\n        },\n      },\n      isAllSelected && classNames.isAllSelected,\n      isResizingColumn && classNames.isResizingColumn,\n      className,\n    ],\n\n    check: [\n      classNames.check,\n      {\n        height: HEADER_HEIGHT,\n      },\n      {\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n\n    cellWrapperPadded: {\n      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n    },\n\n    cellIsCheck: [\n      cellStyles,\n      classNames.cellIsCheck,\n      {\n        position: 'relative',\n        padding: 0,\n        margin: 0,\n        display: 'inline-flex',\n        alignItems: 'center',\n        border: 'none',\n      },\n      isAllSelected && {\n        opacity: 1,\n      },\n    ],\n\n    cellIsGroupExpander: [\n      cellStyles,\n      {\n        display: 'inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        padding: 0,\n        border: 'none',\n        width: GROUP_EXPANDER_WIDTH, // align with GroupedList's first expandIcon cell width.\n        color: palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: palette.neutralLighter,\n          },\n          ':active': {\n            backgroundColor: palette.neutralLight,\n          },\n        },\n      },\n    ],\n\n    cellIsActionable: {\n      selectors: {\n        ':hover': {\n          color: semanticColors.bodyText,\n          background: semanticColors.listHeaderBackgroundHovered,\n        },\n        ':active': {\n          background: semanticColors.listHeaderBackgroundPressed,\n        },\n      },\n    },\n    cellIsEmpty: {\n      textOverflow: 'clip',\n    },\n\n    cellSizer: [\n      classNames.cellSizer,\n      focusClear(),\n      {\n        display: 'inline-block',\n        position: 'relative',\n        cursor: 'ew-resize',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 'inherit',\n        background: 'transparent',\n        zIndex: 1,\n        width: 16,\n        selectors: {\n          ':after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            width: 1,\n            background: colors.resizerColor,\n            opacity: 0,\n            left: '50%',\n          },\n          ':focus:after': cellSizerFadeInStyles,\n          ':hover:after': cellSizerFadeInStyles,\n          [`&.${classNames.isResizing}:after`]: [\n            cellSizerFadeInStyles,\n            {\n              boxShadow: '0 0 5px 0 rgba(0, 0, 0, 0.4)',\n            },\n          ],\n        },\n      },\n    ],\n\n    cellIsResizing: classNames.isResizing,\n\n    cellSizerStart: {\n      margin: '0 -8px',\n    },\n\n    cellSizerEnd: {\n      margin: 0,\n      marginLeft: -16,\n    },\n\n    collapseButton: [\n      classNames.collapseButton,\n      {\n        transformOrigin: '50% 50%',\n        transition: 'transform .1s linear',\n      },\n      isAllCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n            },\n          ]\n        : {\n            transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n          },\n    ],\n\n    checkTooltip: classNames.checkTooltip,\n\n    sizingOverlay: isSizing && {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      cursor: 'ew-resize',\n      background: 'rgba(255, 255, 255, 0)',\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'transparent',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    dropHintCircleStyle: [\n      classNames.dropHintCircleStyle,\n      {\n        display: 'inline-block',\n        visibility: 'hidden',\n        position: 'absolute',\n        bottom: 0,\n        height: 9,\n        width: 9,\n        borderRadius: '50%',\n        marginLeft: -5,\n        top: 34,\n        overflow: 'visible',\n        zIndex: 10,\n        border: `1px solid ${palette.themePrimary}`,\n        background: palette.white,\n      },\n    ],\n\n    dropHintCaretStyle: [\n      classNames.dropHintCaretStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        top: -28,\n        left: -6.5,\n        fontSize: fonts.medium.fontSize,\n        color: palette.themePrimary,\n        overflow: 'visible',\n        zIndex: 10,\n      },\n    ],\n\n    dropHintLineStyle: [\n      classNames.dropHintLineStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 42,\n        width: 1,\n        background: palette.themePrimary,\n        zIndex: 10,\n      },\n    ],\n\n    dropHintStyle: {\n      display: 'inline-block',\n      position: 'absolute',\n    },\n  };\n};\n",
    "import { getGlobalClassNames, getFocusStyle } from '../../Styling';\nimport { IDetailsRowCheckStyleProps, IDetailsRowCheckStyles } from './DetailsRowCheck.types';\nimport { DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\nimport { HEADER_HEIGHT } from './DetailsHeader.styles';\nimport { CheckGlobalClassNames } from '../Check/Check.styles';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsRow-check',\n  isDisabled: 'ms-DetailsRow-check--isDisabled',\n  isHeader: 'ms-DetailsRow-check--isHeader',\n};\n\nexport const CHECK_CELL_WIDTH = 48;\n\nexport const getStyles = (props: IDetailsRowCheckStyleProps): IDetailsRowCheckStyles => {\n  const { theme, className, isHeader, selected, anySelected, canSelect, compact, isVisible } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n  const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\n\n  const height = isHeader ? HEADER_HEIGHT : compact ? compactRowHeight : rowHeight;\n\n  const isCheckVisible = isVisible || selected || anySelected;\n\n  return {\n    root: [classNames.root, className],\n\n    check: [\n      !canSelect && classNames.isDisabled,\n      isHeader && classNames.isHeader,\n      getFocusStyle(theme),\n      theme.fonts.small,\n      CheckGlobalClassNames.checkHost,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: 'default',\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        opacity: isCheckVisible ? 1 : 0,\n        height: height,\n        width: CHECK_CELL_WIDTH,\n        padding: 0,\n        margin: 0,\n      },\n    ],\n\n    isDisabled: [],\n  };\n};\n",
    "import * as React from 'react';\nimport {\n  IDetailsRowCheckProps,\n  IDetailsCheckboxProps,\n  IDetailsRowCheckStyleProps,\n  IDetailsRowCheckStyles,\n} from './DetailsRowCheck.types';\nimport { css, styled, classNamesFunction, getNativeElementProps } from '../../Utilities';\nimport { Check } from '../../Check';\nimport { getStyles } from './DetailsRowCheck.styles';\nimport { composeRenderFunction } from '@uifabric/utilities';\nimport { ITheme } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>();\n\nconst DetailsRowCheckBase: React.FunctionComponent<IDetailsRowCheckProps> = props => {\n  const {\n    isVisible = false,\n    canSelect = false,\n    anySelected = false,\n    selected = false,\n    isHeader = false,\n    className,\n    checkClassName,\n    styles,\n    theme,\n    compact,\n    onRenderDetailsCheckbox,\n    useFastIcons = true, // must be removed from buttonProps\n    ...buttonProps\n  } = props;\n  const defaultCheckboxRender = useFastIcons ? _fastDefaultCheckboxRender : _defaultCheckboxRender;\n\n  const onRenderCheckbox = onRenderDetailsCheckbox\n    ? composeRenderFunction(onRenderDetailsCheckbox, defaultCheckboxRender)\n    : defaultCheckboxRender;\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    canSelect,\n    selected,\n    anySelected,\n    className,\n    isHeader,\n    isVisible,\n    compact,\n  });\n\n  const detailsCheckboxProps: IDetailsCheckboxProps = {\n    checked: selected,\n    theme,\n  };\n\n  const divProps = getNativeElementProps('div', buttonProps, ['aria-label', 'aria-labelledby', 'aria-describedby']);\n\n  return canSelect ? (\n    <div\n      {...buttonProps}\n      role=\"checkbox\"\n      // eslint-disable-next-line deprecation/deprecation\n      className={css(classNames.root, classNames.check)}\n      aria-checked={selected}\n      data-selection-toggle={true}\n      data-automationid=\"DetailsRowCheck\"\n      tabIndex={-1}\n    >\n      {onRenderCheckbox(detailsCheckboxProps)}\n    </div>\n  ) : (\n    // eslint-disable-next-line deprecation/deprecation\n    <div {...divProps} className={css(classNames.root, classNames.check)} />\n  );\n};\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n\nfunction _defaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <Check checked={checkboxProps.checked} />;\n}\n\nfunction _fastDefaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n}\n\nexport const DetailsRowCheck = styled<IDetailsRowCheckProps, IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>(\n  DetailsRowCheckBase,\n  getStyles,\n  undefined,\n  { scope: 'DetailsRowCheck' },\n  true,\n);\n",
    "import * as React from 'react';\r\nimport { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { CollapseAllVisibility } from '../../GroupedList';\r\nimport { ITheme, IStyle } from '../../Styling';\r\nimport { DetailsHeaderBase } from './DetailsHeader.base';\r\nimport { IColumn, DetailsListLayoutMode, IColumnReorderOptions, ColumnDragEndLocation } from './DetailsList.types';\r\nimport { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\r\nimport { ISelection, SelectionMode } from '../../utilities/selection/index';\r\nimport { IDetailsCheckboxProps } from './DetailsRowCheck.types';\r\nimport { IDetailsColumnRenderTooltipProps } from './DetailsColumn.types';\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDetailsHeader {\r\n  /** sets focus into the header */\r\n  focus: () => boolean;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDetailsHeaderBaseProps extends React.ClassAttributes<DetailsHeaderBase>, IDetailsItemProps {\r\n  /** Theme from the Higher Order Component */\r\n  theme?: ITheme;\r\n\r\n  /** Call to provide customized styling that will layer on top of the variant rules. */\r\n  styles?: IStyleFunctionOrObject<IDetailsHeaderStyleProps, IDetailsHeaderStyles>;\r\n\r\n  /** Ref to the component itself */\r\n  componentRef?: IRefObject<IDetailsHeader>;\r\n\r\n  /** Layout mode - fixedColumns or justified */\r\n  layoutMode: DetailsListLayoutMode;\r\n\r\n  /** Callback for when column sizing has changed */\r\n  onColumnIsSizingChanged?: (column: IColumn, isSizing: boolean) => void;\r\n\r\n  /** Callback for when column is resized */\r\n  onColumnResized?: (column: IColumn, newWidth: number, columnIndex: number) => void;\r\n\r\n  /** Callback for when column is automatically resized */\r\n  onColumnAutoResized?: (column: IColumn, columnIndex: number) => void;\r\n\r\n  /** Callback for when the column is clicked */\r\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\r\n\r\n  /** Callback for when the column needs to show a context menu */\r\n  onColumnContextMenu?: (column: IColumn, ev: React.MouseEvent<HTMLElement>) => void;\r\n\r\n  /** Callback to render a tooltip for the column header */\r\n  onRenderColumnHeaderTooltip?: IRenderFunction<IDetailsColumnRenderTooltipProps>;\r\n\r\n  /** Whether to collapse for all visibility */\r\n  collapseAllVisibility?: CollapseAllVisibility;\r\n\r\n  /** Whether or not all is collapsed */\r\n  isAllCollapsed?: boolean;\r\n\r\n  /** Callback for when collapse all is toggled */\r\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\r\n\r\n  /** ariaLabel for the entire header */\r\n  ariaLabel?: string;\r\n\r\n  /** ariaLabel for expand/collapse group button */\r\n  ariaLabelForToggleAllGroupsButton?: string;\r\n\r\n  /** ariaLabel for the header checkbox that selects or deselects everything */\r\n  ariaLabelForSelectAllCheckbox?: string;\r\n\r\n  /** ariaLabel for the selection column */\r\n  ariaLabelForSelectionColumn?: string;\r\n\r\n  /** Select all button visibility */\r\n  selectAllVisibility?: SelectAllVisibility;\r\n\r\n  /** Column reordering options */\r\n  columnReorderOptions?: IColumnReorderOptions;\r\n\r\n  /** Column reordering options */\r\n  columnReorderProps?: IColumnReorderHeaderProps;\r\n\r\n  /** Minimum pixels to be moved before dragging is registered */\r\n  minimumPixelsForDrag?: number;\r\n\r\n  /** Overriding class name */\r\n  className?: string;\r\n\r\n  /** If provided, can be used to render a custom checkbox */\r\n  onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;\r\n\r\n  /**\r\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\r\n   * but are still customizable via class names.\r\n   * @defaultvalue true\r\n   */\r\n  useFastIcons?: boolean;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDetailsHeaderProps extends IDetailsHeaderBaseProps {\r\n  /**\r\n   * Column metadata\r\n   */\r\n  columns: IColumn[];\r\n\r\n  /**\r\n   * Selection from utilities\r\n   */\r\n  selection: ISelection;\r\n\r\n  /**\r\n   * Selection mode\r\n   */\r\n  selectionMode: SelectionMode;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport enum SelectAllVisibility {\r\n  none = 0,\r\n  hidden = 1,\r\n  visible = 2,\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDetailsHeaderState {\r\n  columnResizeDetails?: IColumnResizeDetails;\r\n  isAllSelected?: boolean;\r\n  isSizing?: boolean;\r\n  isAllCollapsed?: boolean;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IColumnResizeDetails {\r\n  columnIndex: number;\r\n  originX?: number;\r\n  columnMinWidth: number;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IColumnReorderHeaderProps extends IColumnReorderOptions {\r\n  /** Callback to notify the column dragEnd event to List\r\n   * Need this to check whether the dragEnd has happened on\r\n   * corresponding list or outside of the list\r\n   */\r\n  onColumnDragEnd?: (props: { dropLocation?: ColumnDragEndLocation }, event: MouseEvent) => void;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDropHintDetails {\r\n  originX: number; // X index of dropHint Element relative to header\r\n  startX: number; // start index of the range for the current drophint\r\n  endX: number; // end index of the range for the current drophint\r\n  dropHintElementRef: HTMLElement; // Reference for drophint to change the style when needed\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport type IDetailsHeaderStyleProps = Required<Pick<IDetailsHeaderProps, 'theme'>> &\r\n  Pick<IDetailsHeaderProps, 'className'> & {\r\n    /** Whether to hide select all checkbox */\r\n    isSelectAllHidden?: boolean;\r\n\r\n    /** Whether the \"select all\" checkbox is checked */\r\n    isAllSelected?: boolean;\r\n\r\n    /** Is column being resized */\r\n    isResizingColumn?: boolean;\r\n\r\n    /** Are all columns collapsed */\r\n    isAllCollapsed?: boolean;\r\n\r\n    /** Whether the header is sizing */\r\n    isSizing?: boolean;\r\n\r\n    /** Whether checkbox is hidden  */\r\n    isCheckboxHidden?: boolean;\r\n\r\n    cellStyleProps?: ICellStyleProps;\r\n  };\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDetailsHeaderStyles {\r\n  root: IStyle;\r\n  check: IStyle;\r\n\r\n  /**\r\n   * @deprecated Not used\r\n   */\r\n  cellWrapperPadded: IStyle;\r\n  cellIsCheck: IStyle;\r\n\r\n  /**\r\n   * @deprecated Not used\r\n   */\r\n  cellIsActionable: IStyle;\r\n\r\n  /**\r\n   * @deprecated Not used\r\n   */\r\n  cellIsEmpty: IStyle;\r\n  cellSizer: IStyle;\r\n  cellSizerStart: IStyle;\r\n  cellSizerEnd: IStyle;\r\n  cellIsResizing: IStyle;\r\n  cellIsGroupExpander: IStyle;\r\n  collapseButton: IStyle;\r\n  checkTooltip: IStyle;\r\n  sizingOverlay: IStyle;\r\n  dropHintCircleStyle: IStyle;\r\n  dropHintCaretStyle: IStyle;\r\n  dropHintLineStyle: IStyle;\r\n  dropHintStyle: IStyle;\r\n  accessibleLabel: IStyle;\r\n}\r\n",
    "import { EventGroup, getDocument } from '../../Utilities';\nimport { IDragDropHelper, IDragDropTarget, IDragDropOptions, IDragDropEvent, IDragDropContext } from './interfaces';\nimport { ISelection } from '../../utilities/selection/interfaces';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nexport interface IDragDropHelperParams {\n  selection: ISelection;\n  minimumPixelsForDrag?: number;\n}\n\nexport class DragDropHelper implements IDragDropHelper {\n  private _dragEnterCounts: { [key: string]: number };\n  private _isDragging: boolean;\n  private _dragData: {\n    eventTarget: EventTarget | null;\n    clientX: number;\n    clientY: number;\n    dataTransfer?: DataTransfer;\n    dropTarget?: IDragDropTarget;\n    dragTarget?: IDragDropTarget;\n  } | null;\n  private _selection: ISelection;\n  private _activeTargets: {\n    [key: string]: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n  };\n  private _events: EventGroup;\n  private _lastId: number;\n  private _initialized: boolean;\n\n  constructor(params: IDragDropHelperParams) {\n    this._selection = params.selection;\n    this._dragEnterCounts = {};\n    this._activeTargets = {};\n    this._lastId = 0;\n    // To make this class cheap to create, which allows simplifying some logic elsewhere,\n    // only initialize the event group and global event handlers as needed.\n    this._initialized = false;\n  }\n\n  public dispose(): void {\n    if (this._events) {\n      this._events.dispose();\n    }\n  }\n\n  public subscribe(\n    root: HTMLElement,\n    events: EventGroup,\n    dragDropOptions: IDragDropOptions,\n  ): {\n    key: string;\n    dispose(): void;\n  } {\n    if (!this._initialized) {\n      this._events = new EventGroup(this);\n\n      const doc = getDocument();\n\n      // clear drag data when mouse up, use capture event to ensure it will be run\n      if (doc) {\n        this._events.on(doc.body, 'mouseup', this._onMouseUp.bind(this), true);\n        this._events.on(doc, 'mouseup', this._onDocumentMouseUp.bind(this), true);\n      }\n\n      this._initialized = true;\n    }\n\n    const { key = `${++this._lastId}` } = dragDropOptions;\n\n    const handlers: {\n      callback: (context: IDragDropContext, event?: any) => void;\n      eventName: string;\n    }[] = [];\n\n    let onDragStart: (event: DragEvent) => void;\n    let onDragLeave: (event: DragEvent) => void;\n    let onDragEnter: (event: DragEvent) => void;\n    let onDragEnd: (event: DragEvent) => void;\n    let onDrop: (event: DragEvent) => void;\n    let onDragOver: (event: DragEvent) => void;\n    let onMouseDown: (event: MouseEvent) => void;\n\n    let isDraggable: boolean;\n    let isDroppable: boolean;\n\n    let activeTarget: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n\n    if (dragDropOptions && root) {\n      const { eventMap, context, updateDropState } = dragDropOptions;\n\n      const dragDropTarget: IDragDropTarget = {\n        root: root,\n        options: dragDropOptions,\n        key: key,\n      };\n\n      isDraggable = this._isDraggable(dragDropTarget);\n      isDroppable = this._isDroppable(dragDropTarget);\n\n      if (isDraggable || isDroppable) {\n        if (eventMap) {\n          for (const event of eventMap) {\n            const handler = {\n              callback: event.callback.bind(null, context),\n              eventName: event.eventName,\n            };\n\n            handlers.push(handler);\n\n            this._events.on(root, handler.eventName, handler.callback);\n          }\n        }\n      }\n\n      if (isDroppable) {\n        // If the target is droppable, wire up global event listeners to track drop-related events.\n        onDragLeave = (event: DragEvent) => {\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]--;\n            if (this._dragEnterCounts[key] === 0) {\n              updateDropState(false /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnter = (event: DragEvent) => {\n          event.preventDefault(); // needed for IE\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]++;\n            if (this._dragEnterCounts[key] === 1) {\n              updateDropState(true /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnd = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n        };\n\n        onDrop = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n\n          if (dragDropOptions.onDrop) {\n            dragDropOptions.onDrop(dragDropOptions.context.data, event);\n          }\n        };\n\n        onDragOver = (event: DragEvent) => {\n          event.preventDefault();\n          if (dragDropOptions.onDragOver) {\n            dragDropOptions.onDragOver(dragDropOptions.context.data, event);\n          }\n        };\n\n        this._dragEnterCounts[key] = 0;\n\n        // dragenter and dragleave will be fired when hover to the child element\n        // but we only want to change state when enter or leave the current element\n        // use the count to ensure it.\n        events.on(root, 'dragenter', onDragEnter);\n        events.on(root, 'dragleave', onDragLeave);\n        events.on(root, 'dragend', onDragEnd);\n        events.on(root, 'drop', onDrop);\n        events.on(root, 'dragover', onDragOver);\n      }\n\n      if (isDraggable) {\n        // If the target is draggable, wire up local event listeners for mouse events.\n        onMouseDown = this._onMouseDown.bind(this, dragDropTarget);\n        onDragEnd = this._onDragEnd.bind(this, dragDropTarget);\n\n        // We need to add in data so that on Firefox we show the ghost element when dragging\n        onDragStart = (event: DragEvent) => {\n          const options = dragDropOptions;\n          if (options && options.onDragStart) {\n            options.onDragStart(options.context.data, options.context.index, this._selection.getSelection(), event);\n          }\n          this._isDragging = true;\n          if (event.dataTransfer) {\n            event.dataTransfer.setData('id', root.id);\n          }\n        };\n\n        events.on(root, 'dragstart', onDragStart);\n        events.on(root, 'mousedown', onMouseDown);\n        events.on(root, 'dragend', onDragEnd);\n      }\n\n      activeTarget = {\n        target: dragDropTarget,\n        dispose: () => {\n          if (this._activeTargets[key] === activeTarget) {\n            delete this._activeTargets[key];\n          }\n\n          if (root) {\n            for (const handler of handlers) {\n              this._events.off(root, handler.eventName, handler.callback);\n            }\n\n            if (isDroppable) {\n              events.off(root, 'dragenter', onDragEnter);\n              events.off(root, 'dragleave', onDragLeave);\n              events.off(root, 'dragend', onDragEnd);\n              events.off(root, 'dragover', onDragOver);\n              events.off(root, 'drop', onDrop);\n            }\n\n            if (isDraggable) {\n              events.off(root, 'dragstart', onDragStart);\n              events.off(root, 'mousedown', onMouseDown);\n              events.off(root, 'dragend', onDragEnd);\n            }\n          }\n        },\n      };\n\n      this._activeTargets[key] = activeTarget;\n    }\n\n    return {\n      key: key,\n      dispose: () => {\n        if (activeTarget) {\n          activeTarget.dispose();\n        }\n      },\n    };\n  }\n\n  public unsubscribe(root: HTMLElement, key: string): void {\n    const activeTarget = this._activeTargets[key];\n\n    if (activeTarget) {\n      activeTarget.dispose();\n    }\n  }\n\n  private _onDragEnd(target: IDragDropTarget, event: DragEvent): void {\n    const { options } = target;\n    if (options.onDragEnd) {\n      options.onDragEnd(options.context.data, event);\n    }\n  }\n\n  /**\n   * clear drag data when mouse up on body\n   */\n  private _onMouseUp(event: MouseEvent): void {\n    this._isDragging = false;\n    if (this._dragData) {\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n\n        if (activeTarget.target.root) {\n          this._events.off(activeTarget.target.root, 'mousemove');\n          this._events.off(activeTarget.target.root, 'mouseleave');\n        }\n      }\n\n      if (this._dragData.dropTarget) {\n        // raise dragleave event to let dropTarget know it need to remove dropping style\n        EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n        EventGroup.raise(this._dragData.dropTarget.root, 'drop');\n      }\n    }\n    this._dragData = null;\n  }\n\n  /**\n   * clear drag data when mouse up outside of the document\n   */\n  private _onDocumentMouseUp(event: MouseEvent): void {\n    const doc = getDocument();\n\n    if (doc && event.target === doc.documentElement) {\n      this._onMouseUp(event);\n    }\n  }\n\n  /**\n   * when mouse move over a new drop target while dragging some items,\n   * fire dragleave on the old target and fire dragenter to the new target\n   * The target will handle style change on dragenter and dragleave events.\n   */\n  private _onMouseMove(target: IDragDropTarget, event: MouseEvent): void {\n    const {\n      // use buttons property here since ev.button in some edge case is not updating well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = MOUSEMOVE_PRIMARY_BUTTON,\n    } = event;\n\n    if (this._dragData && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onMouseUp(event);\n      return;\n    }\n\n    const { root, key } = target;\n    if (this._isDragging) {\n      if (this._isDroppable(target)) {\n        // we can have nested drop targets in the DOM, like a folder inside a group. In that case, when we drag into\n        // the inner target (folder), we first set dropTarget to the inner element. But the same event is bubbled to the\n        // outer target too, and we need to prevent the outer one from taking over.\n        // So, check if the last dropTarget is not a child of the current.\n\n        if (this._dragData) {\n          if (\n            this._dragData.dropTarget &&\n            this._dragData.dropTarget.key !== key &&\n            !this._isChild(root, this._dragData.dropTarget.root)\n          ) {\n            if (this._dragEnterCounts[this._dragData.dropTarget.key] > 0) {\n              EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n              EventGroup.raise(root, 'dragenter');\n              this._dragData.dropTarget = target;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * when mouse leave a target while dragging some items, fire dragleave to the target\n   */\n  private _onMouseLeave(target: IDragDropTarget, event: MouseEvent): void {\n    if (this._isDragging) {\n      if (this._dragData && this._dragData.dropTarget && this._dragData.dropTarget.key === target.key) {\n        EventGroup.raise(target.root, 'dragleave');\n        this._dragData.dropTarget = undefined;\n      }\n    }\n  }\n\n  /**\n   * when mouse down on a draggable item, we start to track dragdata.\n   */\n  private _onMouseDown(target: IDragDropTarget, event: MouseEvent): void {\n    if (event.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    if (this._isDraggable(target)) {\n      this._dragData = {\n        clientX: event.clientX,\n        clientY: event.clientY,\n        eventTarget: event.target,\n        dragTarget: target,\n      };\n\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n        if (activeTarget.target.root) {\n          this._events.on(activeTarget.target.root, 'mousemove', this._onMouseMove.bind(this, activeTarget.target));\n          this._events.on(activeTarget.target.root, 'mouseleave', this._onMouseLeave.bind(this, activeTarget.target));\n        }\n      }\n    } else {\n      this._dragData = null;\n    }\n  }\n\n  /**\n   * determine whether the child target is a descendant of the parent\n   */\n  private _isChild(parentElement: HTMLElement, childElement: HTMLElement): boolean {\n    while (childElement && childElement.parentElement) {\n      if (childElement.parentElement === parentElement) {\n        return true;\n      }\n      childElement = childElement.parentElement;\n    }\n    return false;\n  }\n\n  private _isDraggable(target: IDragDropTarget): boolean {\n    const { options } = target;\n    return !!(options.canDrag && options.canDrag(options.context.data));\n  }\n\n  private _isDroppable(target: IDragDropTarget): boolean {\n    // TODO: take the drag item into consideration to prevent dragging an item into the same group\n    const { options } = target;\n    const dragContext =\n      this._dragData && this._dragData.dragTarget ? this._dragData.dragTarget.options.context : undefined;\n    return !!(options.canDrop && options.canDrop(options.context, dragContext));\n  }\n}\n",
    "import * as React from 'react';\nimport { Icon, FontIcon } from '../../Icon';\nimport { IProcessedStyleSet } from '../../Styling';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  Async,\n  IDisposable,\n  classNamesFunction,\n  composeRenderFunction,\n} from '../../Utilities';\nimport { ColumnActionsMode } from './DetailsList.types';\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnRenderTooltipProps,\n  IDetailsColumnFilterIconProps,\n} from './DetailsColumn.types';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nconst getClassNames = classNamesFunction<IDetailsColumnStyleProps, IDetailsColumnStyles>();\nconst TRANSITION_DURATION_DRAG = 200; // ms\nconst TRANSITION_DURATION_DROP = 1500; // ms\nconst CLASSNAME_ADD_INTERVAL = 20; // ms\n\nconst defaultOnRenderHeader = (classNames: IProcessedStyleSet<IDetailsColumnStyles>) => (\n  props?: IDetailsColumnProps,\n): JSX.Element | null => {\n  if (!props) {\n    return null;\n  }\n\n  if (props.column.isIconOnly) {\n    return <span className={classNames.accessibleLabel}>{props.column.name}</span>;\n  }\n\n  return <>{props.column.name}</>;\n};\n\n/**\n * Component for rendering columns in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport class DetailsColumnBase extends React.Component<IDetailsColumnProps> {\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _dragDropSubscription: IDisposable;\n  private _classNames: IProcessedStyleSet<IDetailsColumnStyles>;\n\n  constructor(props: IDetailsColumnProps) {\n    super(props);\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      column,\n      columnIndex,\n      parentId,\n      isDraggable,\n      styles,\n      theme,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      useFastIcons = true,\n    } = this.props;\n    const { onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip } = this.props;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      headerClassName: column.headerClassName,\n      iconClassName: column.iconClassName,\n      isActionable: column.columnActionsMode !== ColumnActionsMode.disabled,\n      isEmpty: !column.name,\n      isIconVisible: column.isSorted || column.isGrouped || column.isFiltered,\n      isPadded: column.isPadded,\n      isIconOnly: column.isIconOnly,\n      cellStyleProps,\n      transitionDurationDrag: TRANSITION_DURATION_DRAG,\n      transitionDurationDrop: TRANSITION_DURATION_DROP,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    const onRenderFilterIcon = column.onRenderFilterIcon\n      ? composeRenderFunction(column.onRenderFilterIcon, this._onRenderFilterIcon(this._classNames))\n      : this._onRenderFilterIcon(this._classNames);\n\n    const onRenderHeader = column.onRenderHeader\n      ? composeRenderFunction(column.onRenderHeader, defaultOnRenderHeader(this._classNames))\n      : defaultOnRenderHeader(this._classNames);\n\n    return (\n      <>\n        <div\n          key={column.key}\n          ref={this._root}\n          role={'columnheader'}\n          aria-sort={column.isSorted ? (column.isSortedDescending ? 'descending' : 'ascending') : 'none'}\n          aria-colindex={columnIndex}\n          className={classNames.root}\n          data-is-draggable={isDraggable}\n          draggable={isDraggable}\n          style={{\n            width:\n              column.calculatedWidth! +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          }}\n          data-automationid={'ColumnsHeaderColumn'}\n          data-item-key={column.key}\n        >\n          {isDraggable && (\n            <IconComponent iconName=\"GripperBarVertical\" className={classNames.gripperBarVerticalStyle} />\n          )}\n          {onRenderColumnHeaderTooltip(\n            {\n              hostClassName: classNames.cellTooltip,\n              id: `${parentId}-${column.key}-tooltip`,\n              setAriaDescribedBy: false,\n              column,\n              content: column.columnActionsMode !== ColumnActionsMode.disabled ? column.ariaLabel : '',\n              children: (\n                <span\n                  id={`${parentId}-${column.key}`}\n                  aria-label={column.isIconOnly ? column.name : undefined}\n                  aria-labelledby={column.isIconOnly ? undefined : `${parentId}-${column.key}-name`}\n                  className={classNames.cellTitle}\n                  data-is-focusable={column.columnActionsMode !== ColumnActionsMode.disabled}\n                  role={\n                    column.columnActionsMode !== ColumnActionsMode.disabled &&\n                    (column.onColumnClick !== undefined || this.props.onColumnClick !== undefined)\n                      ? 'button'\n                      : undefined\n                  }\n                  aria-describedby={\n                    !this.props.onRenderColumnHeaderTooltip && this._hasAccessibleLabel()\n                      ? `${parentId}-${column.key}-tooltip`\n                      : undefined\n                  }\n                  onContextMenu={this._onColumnContextMenu}\n                  onClick={this._onColumnClick}\n                  aria-haspopup={column.columnActionsMode === ColumnActionsMode.hasDropdown}\n                  aria-expanded={\n                    column.columnActionsMode === ColumnActionsMode.hasDropdown ? !!column.isMenuOpen : undefined\n                  }\n                >\n                  <span id={`${parentId}-${column.key}-name`} className={classNames.cellName}>\n                    {(column.iconName || column.iconClassName) && (\n                      <IconComponent className={classNames.iconClassName} iconName={column.iconName} />\n                    )}\n\n                    {onRenderHeader(this.props)}\n                  </span>\n\n                  {column.isFiltered && <IconComponent className={classNames.nearIcon} iconName=\"Filter\" />}\n\n                  {column.isSorted && (\n                    <IconComponent\n                      className={classNames.sortIcon}\n                      iconName={column.isSortedDescending ? 'SortDown' : 'SortUp'}\n                    />\n                  )}\n\n                  {column.isGrouped && <IconComponent className={classNames.nearIcon} iconName=\"GroupedDescending\" />}\n\n                  {column.columnActionsMode === ColumnActionsMode.hasDropdown &&\n                    !column.isIconOnly &&\n                    onRenderFilterIcon({\n                      'aria-hidden': true,\n                      columnProps: this.props,\n                      className: classNames.filterChevron,\n                      iconName: 'ChevronDown',\n                    })}\n                </span>\n              ),\n            },\n            this._onRenderColumnHeaderTooltip,\n          )}\n        </div>\n        {!this.props.onRenderColumnHeaderTooltip ? this._renderAccessibleLabel() : null}\n      </>\n    );\n  }\n\n  public componentDidMount(): void {\n    if (this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    const classNames = this._classNames;\n\n    if (this.props.isDropped) {\n      if (this._root.current) {\n        this._root.current.classList.add(classNames.borderAfterDropping);\n\n        this._async.setTimeout(() => {\n          if (this._root.current) {\n            this._root.current.classList.add(classNames.noBorderAfterDropping);\n          }\n        }, CLASSNAME_ADD_INTERVAL);\n      }\n\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.remove(classNames.borderAfterDropping);\n          this._root.current.classList.remove(classNames.noBorderAfterDropping);\n        }\n      }, TRANSITION_DURATION_DROP + CLASSNAME_ADD_INTERVAL);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public componentDidUpdate(): void {\n    if (!this._dragDropSubscription && this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    if (this._dragDropSubscription && !this.props.isDraggable) {\n      this._dragDropSubscription.dispose();\n      this._events.off(this._root.current, 'mousedown');\n      delete this._dragDropSubscription;\n    }\n  }\n\n  private _onRenderFilterIcon = (classNames: IProcessedStyleSet<IDetailsColumnStyles>) => (\n    props: IDetailsColumnFilterIconProps,\n  ): JSX.Element => {\n    const { columnProps, ...iconProps } = props;\n    const IconComponent = columnProps?.useFastIcons ? FontIcon : Icon;\n\n    return <IconComponent {...iconProps} />;\n  };\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: IDetailsColumnRenderTooltipProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  private _onColumnClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnClick, column } = this.props;\n\n    if (column.columnActionsMode === ColumnActionsMode.disabled) {\n      return;\n    }\n\n    if (column.onColumnClick) {\n      column.onColumnClick(ev, column);\n    }\n\n    if (onColumnClick) {\n      onColumnClick(ev, column);\n    }\n  };\n\n  private _getColumnDragDropOptions(): IDragDropOptions {\n    const { columnIndex } = this.props;\n    const options = {\n      selectionIndex: columnIndex,\n      context: { data: columnIndex, index: columnIndex },\n      canDrag: () => this.props.isDraggable!,\n      canDrop: () => false,\n      onDragStart: this._onDragStart,\n      updateDropState: () => undefined,\n      onDrop: () => undefined,\n      onDragEnd: this._onDragEnd,\n    };\n    return options;\n  }\n\n  private _hasAccessibleLabel(): boolean {\n    const { column } = this.props;\n\n    return !!(\n      column.ariaLabel ||\n      column.filterAriaLabel ||\n      column.sortAscendingAriaLabel ||\n      column.sortDescendingAriaLabel ||\n      column.groupAriaLabel\n    );\n  }\n\n  private _renderAccessibleLabel(): JSX.Element | null {\n    const { column, parentId } = this.props;\n    const classNames = this._classNames;\n\n    return this._hasAccessibleLabel() && !this.props.onRenderColumnHeaderTooltip ? (\n      <label\n        key={`${column.key}_label`}\n        id={`${parentId}-${column.key}-tooltip`}\n        className={classNames.accessibleLabel}\n      >\n        {column.ariaLabel}\n        {(column.isFiltered && column.filterAriaLabel) || null}\n        {(column.isSorted &&\n          (column.isSortedDescending ? column.sortDescendingAriaLabel : column.sortAscendingAriaLabel)) ||\n          null}\n        {(column.isGrouped && column.groupAriaLabel) || null}\n      </label>\n    ) : null;\n  }\n\n  private _onDragStart = (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (itemIndex) {\n      this._updateHeaderDragInfo(itemIndex);\n      this._root.current!.classList.add(classNames.borderWhileDragging);\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.add(classNames.noBorderWhileDragging);\n        }\n      }, CLASSNAME_ADD_INTERVAL);\n    }\n  };\n\n  private _onDragEnd = (item?: any, event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (event) {\n      this._updateHeaderDragInfo(-1, event);\n    }\n    this._root.current!.classList.remove(classNames.borderWhileDragging);\n    this._root.current!.classList.remove(classNames.noBorderWhileDragging);\n  };\n\n  private _updateHeaderDragInfo = (itemIndex: number, event?: MouseEvent) => {\n    /* eslint-disable deprecation/deprecation */\n    if (this.props.setDraggedItemIndex) {\n      this.props.setDraggedItemIndex(itemIndex);\n    }\n    /* eslint-enable deprecation/deprecation */\n    if (this.props.updateDragInfo) {\n      this.props.updateDragInfo({ itemIndex }, event);\n    }\n  };\n\n  private _onColumnContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnContextMenu, column } = this.props;\n    if (column.onColumnContextMenu) {\n      column.onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n    if (onColumnContextMenu) {\n      onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const { isDraggable } = this.props;\n    // Ignore anything except the primary button.\n    if (isDraggable && ev.button === MOUSEDOWN_PRIMARY_BUTTON) {\n      ev.stopPropagation();\n    }\n  };\n\n  private _addDragDropHandling() {\n    this._dragDropSubscription = this.props.dragDropHelper!.subscribe(\n      this._root.current!,\n      this._events,\n      this._getColumnDragDropOptions(),\n    );\n\n    // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n    this._events.on(this._root.current, 'mousedown', this._onRootMouseDown);\n  }\n}\n",
    "import { IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\nimport { getFocusStyle, getGlobalClassNames, hiddenContentStyle, IStyle, FontWeights } from '../../Styling';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { getCellStyles } from './DetailsHeader.styles';\n\nconst GlobalClassNames = {\n  isActionable: 'is-actionable',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  isEmpty: 'is-empty',\n  isIconVisible: 'is-icon-visible',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVerticalStyle: 'ms-DetailsColumn-gripperBar',\n  nearIcon: 'ms-DetailsColumn-nearIcon',\n};\n\nexport const getStyles = (props: IDetailsColumnStyleProps): IDetailsColumnStyles => {\n  const {\n    theme,\n    headerClassName,\n    iconClassName,\n    isActionable,\n    isEmpty,\n    isIconVisible,\n    isPadded,\n    isIconOnly,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    transitionDurationDrag,\n    transitionDurationDrop,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    dropdownChevronForegroundColor: palette.neutralSecondary,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const nearIconStyle: IStyle = {\n    color: colors.iconForegroundColor,\n    opacity: 1,\n    paddingLeft: 8,\n  };\n\n  const borderWhileDragging: IStyle = {\n    outline: `1px solid ${palette.themePrimary}`,\n  };\n\n  const borderAfterDragOrDrop: IStyle = {\n    outlineColor: 'transparent',\n  };\n\n  return {\n    root: [\n      getCellStyles(props),\n      fonts.small,\n      isActionable && [\n        classNames.isActionable,\n        {\n          selectors: {\n            ':hover': {\n              color: semanticColors.bodyText,\n              background: semanticColors.listHeaderBackgroundHovered,\n            },\n            ':active': {\n              background: semanticColors.listHeaderBackgroundPressed,\n            },\n          },\n        },\n      ],\n      isEmpty && [\n        classNames.isEmpty,\n        {\n          textOverflow: 'clip',\n        },\n      ],\n      isIconVisible && classNames.isIconVisible,\n      isPadded && {\n        paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n      },\n      {\n        selectors: {\n          ':hover i[data-icon-name=\"GripperBarVertical\"]': {\n            display: 'block',\n          },\n        },\n      },\n      headerClassName,\n    ],\n\n    gripperBarVerticalStyle: {\n      display: 'none',\n      position: 'absolute',\n      textAlign: 'left',\n      color: palette.neutralTertiary,\n      left: 1,\n    },\n\n    nearIcon: [classNames.nearIcon, nearIconStyle],\n\n    sortIcon: [\n      nearIconStyle,\n      {\n        paddingLeft: 4,\n        position: 'relative',\n        top: 1,\n      },\n    ],\n\n    iconClassName: [\n      {\n        color: colors.iconForegroundColor,\n        opacity: 1,\n      },\n      iconClassName,\n    ],\n\n    filterChevron: [\n      classNames.filterChevron,\n      {\n        color: colors.dropdownChevronForegroundColor,\n        paddingLeft: 6,\n        verticalAlign: 'middle',\n        fontSize: fonts.small.fontSize,\n      },\n    ],\n\n    cellTitle: [\n      classNames.cellTitle,\n      getFocusStyle(theme),\n      {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'stretch',\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n        padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n        ...(isIconOnly\n          ? {\n              alignContent: 'flex-end',\n              maxHeight: '100%',\n              flexWrap: 'wrap-reverse',\n            }\n          : {}),\n      },\n    ],\n\n    cellName: [\n      classNames.cellName,\n      {\n        flex: '0 1 auto',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontWeight: FontWeights.semibold,\n        fontSize: fonts.medium.fontSize,\n      },\n      isIconOnly && {\n        selectors: {\n          [`.${classNames.nearIcon}`]: {\n            paddingLeft: 0,\n          },\n        },\n      },\n    ],\n\n    cellTooltip: {\n      display: 'block',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    borderWhileDragging: borderWhileDragging,\n\n    noBorderWhileDragging: [borderAfterDragOrDrop, { transition: `outline ${transitionDurationDrag}ms ease` }],\n\n    borderAfterDropping: borderWhileDragging,\n\n    noBorderAfterDropping: [borderAfterDragOrDrop, { transition: `outline  ${transitionDurationDrop}ms ease` }],\n  };\n};\n",
    "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IDetailsColumnProps, IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\nimport { DetailsColumnBase } from './DetailsColumn.base';\nimport { getStyles } from './DetailsColumn.styles';\n\nexport { IDetailsColumnProps };\n\nexport const DetailsColumn: React.FunctionComponent<IDetailsColumnProps> = styled<\n  IDetailsColumnProps,\n  IDetailsColumnStyleProps,\n  IDetailsColumnStyles\n>(DetailsColumnBase, getStyles, undefined, { scope: 'DetailsColumn' });\n",
    "import * as React from 'react';\r\nimport { IProcessedStyleSet } from '../../Styling';\r\nimport {\r\n  initializeComponentRef,\r\n  EventGroup,\r\n  IDisposable,\r\n  css,\r\n  getRTL,\r\n  getId,\r\n  KeyCodes,\r\n  classNamesFunction,\r\n} from '../../Utilities';\r\nimport {\r\n  IColumn,\r\n  IDetailsHeaderBaseProps,\r\n  IColumnDragDropDetails,\r\n  ColumnDragEndLocation,\r\n  CheckboxVisibility,\r\n} from './DetailsList.types';\r\nimport { IFocusZone, FocusZone, FocusZoneDirection } from '../../FocusZone';\r\nimport { Icon, FontIcon } from '../../Icon';\r\nimport { Layer } from '../../Layer';\r\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\r\nimport { CollapseAllVisibility } from '../../GroupedList';\r\nimport { DetailsRowCheck } from './DetailsRowCheck';\r\nimport { ITooltipHostProps } from '../../Tooltip';\r\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\r\nimport { IDragDropOptions, DragDropHelper } from '../../utilities/dragdrop/index';\r\nimport { DetailsColumn, IDetailsColumnProps } from '../../components/DetailsList/DetailsColumn';\r\nimport {\r\n  SelectAllVisibility,\r\n  IDropHintDetails,\r\n  IColumnReorderHeaderProps,\r\n  IDetailsHeaderState,\r\n} from './DetailsHeader.types';\r\nimport { IDetailsHeaderStyleProps, IDetailsHeaderStyles, IDetailsHeader } from './DetailsHeader.types';\r\n\r\nconst getClassNames = classNamesFunction<IDetailsHeaderStyleProps, IDetailsHeaderStyles>();\r\n\r\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\r\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\r\n\r\nconst NO_COLUMNS: IColumn[] = [];\r\n\r\nexport class DetailsHeaderBase extends React.Component<IDetailsHeaderBaseProps, IDetailsHeaderState>\r\n  implements IDetailsHeader {\r\n  public static defaultProps = {\r\n    selectAllVisibility: SelectAllVisibility.visible,\r\n    collapseAllVisibility: CollapseAllVisibility.visible,\r\n    useFastIcons: true,\r\n  };\r\n\r\n  private _classNames: IProcessedStyleSet<IDetailsHeaderStyles>;\r\n  private _rootElement = React.createRef<HTMLElement>();\r\n  private _events: EventGroup;\r\n  private _rootComponent = React.createRef<IFocusZone>();\r\n  private _id: string;\r\n  private _draggedColumnIndex = -1;\r\n  private _dropHintDetails: { [key: number]: IDropHintDetails } = {};\r\n  private _dragDropHelper: DragDropHelper;\r\n  private _currentDropHintIndex: number;\r\n  private _subscriptionObject: IDisposable;\r\n  private _onDropIndexInfo: {\r\n    sourceIndex: number;\r\n    targetIndex: number;\r\n  };\r\n\r\n  constructor(props: IDetailsHeaderBaseProps) {\r\n    super(props);\r\n\r\n    initializeComponentRef(this);\r\n    this._events = new EventGroup(this);\r\n\r\n    this.state = {\r\n      columnResizeDetails: undefined,\r\n      isAllCollapsed: this.props.isAllCollapsed,\r\n      isAllSelected: !!this.props.selection && this.props.selection.isAllSelected(),\r\n    };\r\n\r\n    this._onDropIndexInfo = {\r\n      sourceIndex: -1,\r\n      targetIndex: -1,\r\n    };\r\n    this._id = getId('header');\r\n    this._currentDropHintIndex = -1;\r\n\r\n    // The drag drop handler won't do any work until subscribe() is called,\r\n    // so always set it up for convenience\r\n    this._dragDropHelper = new DragDropHelper({\r\n      selection: {\r\n        getSelection: () => {\r\n          return;\r\n        },\r\n      } as ISelection,\r\n      minimumPixelsForDrag: this.props.minimumPixelsForDrag,\r\n    });\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    const { selection } = this.props;\r\n\r\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\r\n\r\n    // this._rootElement.current will be null in tests using react-test-renderer\r\n    if (this._rootElement.current) {\r\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\r\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\r\n\r\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\r\n\r\n      if (this._getColumnReorderProps()) {\r\n        this._subscriptionObject = this._dragDropHelper.subscribe(\r\n          this._rootElement.current,\r\n          this._events,\r\n          this._getHeaderDragDropOptions(),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void {\r\n    if (this._getColumnReorderProps()) {\r\n      if (!this._subscriptionObject && this._rootElement.current) {\r\n        this._subscriptionObject = this._dragDropHelper.subscribe(\r\n          this._rootElement.current,\r\n          this._events,\r\n          this._getHeaderDragDropOptions(),\r\n        );\r\n      }\r\n    } else if (this._subscriptionObject) {\r\n      this._subscriptionObject.dispose();\r\n      delete this._subscriptionObject;\r\n    }\r\n\r\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\r\n      const { columns: previousColumns = NO_COLUMNS } = prevProps;\r\n      const { columns = NO_COLUMNS } = this.props;\r\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\r\n        this._onDropIndexInfo = {\r\n          sourceIndex: -1,\r\n          targetIndex: -1,\r\n        };\r\n      }\r\n    }\r\n\r\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\r\n      this.setState({ isAllCollapsed: this.props.isAllCollapsed });\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    if (this._subscriptionObject) {\r\n      this._subscriptionObject.dispose();\r\n      delete this._subscriptionObject;\r\n    }\r\n\r\n    this._dragDropHelper.dispose();\r\n\r\n    this._events.dispose();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      columns = NO_COLUMNS,\r\n      ariaLabel,\r\n      ariaLabelForToggleAllGroupsButton,\r\n      ariaLabelForSelectAllCheckbox,\r\n      selectAllVisibility,\r\n      ariaLabelForSelectionColumn,\r\n      indentWidth,\r\n      onColumnClick,\r\n      onColumnContextMenu,\r\n      onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip,\r\n      styles,\r\n      selectionMode,\r\n      theme,\r\n      onRenderDetailsCheckbox,\r\n      groupNestingDepth,\r\n      useFastIcons,\r\n      checkboxVisibility,\r\n      className,\r\n    } = this.props;\r\n    const { isAllSelected, columnResizeDetails, isSizing, isAllCollapsed } = this.state;\r\n    const showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\r\n    const isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\r\n    const isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\r\n\r\n    const columnReorderProps = this._getColumnReorderProps();\r\n    const frozenColumnCountFromStart =\r\n      columnReorderProps && columnReorderProps.frozenColumnCountFromStart\r\n        ? columnReorderProps.frozenColumnCountFromStart\r\n        : 0;\r\n    const frozenColumnCountFromEnd =\r\n      columnReorderProps && columnReorderProps.frozenColumnCountFromEnd\r\n        ? columnReorderProps.frozenColumnCountFromEnd\r\n        : 0;\r\n\r\n    this._classNames = getClassNames(styles, {\r\n      theme: theme!,\r\n      isAllSelected,\r\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\r\n      isResizingColumn: !!columnResizeDetails && isSizing,\r\n      isSizing,\r\n      isAllCollapsed,\r\n      isCheckboxHidden,\r\n      className,\r\n    });\r\n\r\n    const classNames = this._classNames;\r\n    const IconComponent = useFastIcons ? FontIcon : Icon;\r\n\r\n    const isRTL = getRTL(theme);\r\n    return (\r\n      <FocusZone\r\n        role=\"row\"\r\n        aria-label={ariaLabel}\r\n        className={classNames.root}\r\n        componentRef={this._rootComponent}\r\n        elementRef={this._rootElement}\r\n        onMouseMove={this._onRootMouseMove}\r\n        data-automationid=\"DetailsHeader\"\r\n        direction={FocusZoneDirection.horizontal}\r\n      >\r\n        {showCheckbox\r\n          ? [\r\n              <div\r\n                key=\"__checkbox\"\r\n                className={classNames.cellIsCheck}\r\n                aria-labelledby={`${this._id}-check`}\r\n                onClick={!isCheckboxHidden ? this._onSelectAllClicked : undefined}\r\n                aria-colindex={1}\r\n                role={'columnheader'}\r\n              >\r\n                {onRenderColumnHeaderTooltip(\r\n                  {\r\n                    hostClassName: classNames.checkTooltip,\r\n                    id: `${this._id}-checkTooltip`,\r\n                    setAriaDescribedBy: false,\r\n                    content: ariaLabelForSelectAllCheckbox,\r\n                    children: (\r\n                      <DetailsRowCheck\r\n                        id={`${this._id}-check`}\r\n                        aria-label={\r\n                          selectionMode === SelectionMode.multiple\r\n                            ? ariaLabelForSelectAllCheckbox\r\n                            : ariaLabelForSelectionColumn\r\n                        }\r\n                        data-is-focusable={!isCheckboxHidden || undefined}\r\n                        isHeader={true}\r\n                        selected={isAllSelected}\r\n                        anySelected={false}\r\n                        canSelect={!isCheckboxHidden}\r\n                        className={classNames.check}\r\n                        onRenderDetailsCheckbox={onRenderDetailsCheckbox}\r\n                        useFastIcons={useFastIcons}\r\n                        isVisible={isCheckboxAlwaysVisible}\r\n                      />\r\n                    ),\r\n                  },\r\n                  this._onRenderColumnHeaderTooltip,\r\n                )}\r\n              </div>,\r\n              !this.props.onRenderColumnHeaderTooltip ? (\r\n                ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (\r\n                  <label\r\n                    key=\"__checkboxLabel\"\r\n                    id={`${this._id}-checkTooltip`}\r\n                    className={classNames.accessibleLabel}\r\n                    aria-hidden={true}\r\n                  >\r\n                    {ariaLabelForSelectAllCheckbox}\r\n                  </label>\r\n                ) : ariaLabelForSelectionColumn && isCheckboxHidden ? (\r\n                  <label\r\n                    key=\"__checkboxLabel\"\r\n                    id={`${this._id}-checkTooltip`}\r\n                    className={classNames.accessibleLabel}\r\n                    aria-hidden={true}\r\n                  >\r\n                    {ariaLabelForSelectionColumn}\r\n                  </label>\r\n                ) : null\r\n              ) : null,\r\n            ]\r\n          : null}\r\n        {groupNestingDepth! > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible ? (\r\n          <div\r\n            className={classNames.cellIsGroupExpander}\r\n            onClick={this._onToggleCollapseAll}\r\n            data-is-focusable={true}\r\n            aria-label={ariaLabelForToggleAllGroupsButton}\r\n            aria-expanded={!isAllCollapsed}\r\n            role=\"columnheader\"\r\n          >\r\n            <IconComponent\r\n              className={classNames.collapseButton}\r\n              iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'}\r\n            />\r\n          </div>\r\n        ) : null}\r\n        <GroupSpacer indentWidth={indentWidth} role=\"gridcell\" count={groupNestingDepth! - 1} />\r\n        {columns.map((column: IColumn, columnIndex: number) => {\r\n          const _isDraggable = columnReorderProps\r\n            ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd\r\n            : false;\r\n          return [\r\n            columnReorderProps &&\r\n              (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&\r\n              this._renderDropHint(columnIndex),\r\n            <DetailsColumn\r\n              column={column}\r\n              styles={column.styles}\r\n              key={column.key}\r\n              columnIndex={(showCheckbox ? 2 : 1) + columnIndex}\r\n              parentId={this._id}\r\n              isDraggable={_isDraggable}\r\n              updateDragInfo={this._updateDragInfo}\r\n              dragDropHelper={this._dragDropHelper}\r\n              onColumnClick={onColumnClick}\r\n              onColumnContextMenu={onColumnContextMenu}\r\n              // Do not render tooltips by default, but allow for override via props.\r\n              onRenderColumnHeaderTooltip={this.props.onRenderColumnHeaderTooltip}\r\n              isDropped={this._onDropIndexInfo.targetIndex === columnIndex}\r\n              cellStyleProps={this.props.cellStyleProps}\r\n              useFastIcons={useFastIcons}\r\n            />,\r\n            this._renderColumnDivider(columnIndex),\r\n          ];\r\n        })}\r\n        {columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length)}\r\n        {isSizing && (\r\n          <Layer>\r\n            <div\r\n              className={classNames.sizingOverlay}\r\n              onMouseMove={this._onSizerMouseMove}\r\n              onMouseUp={this._onSizerMouseUp}\r\n            />\r\n          </Layer>\r\n        )}\r\n      </FocusZone>\r\n    );\r\n  }\r\n\r\n  /** Set focus to the active thing in the focus area. */\r\n  public focus(): boolean {\r\n    return !!this._rootComponent.current?.focus();\r\n  }\r\n\r\n  /**\r\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\r\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\r\n   * (because drag/drop handling will only be set up if reorder props are given).\r\n   */\r\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\r\n    const { columnReorderOptions, columnReorderProps } = this.props;\r\n    return columnReorderProps || (columnReorderOptions && { ...columnReorderOptions, onColumnDragEnd: undefined });\r\n  }\r\n\r\n  private _getHeaderDragDropOptions(): IDragDropOptions {\r\n    const options = {\r\n      selectionIndex: 1,\r\n      context: { data: this, index: 0 },\r\n      canDrag: () => false,\r\n      canDrop: () => true,\r\n      onDragStart: () => undefined,\r\n      updateDropState: this._updateDroppingState,\r\n      onDrop: this._onDrop,\r\n      onDragEnd: () => undefined,\r\n      onDragOver: this._onDragOver,\r\n    };\r\n    return options;\r\n  }\r\n\r\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\r\n    if (this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\r\n      this._resetDropHints();\r\n    }\r\n  };\r\n\r\n  private _isValidCurrentDropHintIndex() {\r\n    return this._currentDropHintIndex >= 0;\r\n  }\r\n\r\n  private _onDragOver = (item: any, event: DragEvent): void => {\r\n    if (this._draggedColumnIndex >= 0) {\r\n      event.stopPropagation();\r\n      this._computeDropHintToBeShown(event.clientX);\r\n    }\r\n  };\r\n\r\n  private _onDrop = (item?: any, event?: DragEvent): void => {\r\n    // Safe to assume this is defined since we're handling a drop event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n\r\n    // Target index will not get changed if draggeditem is after target item.\r\n    if (this._draggedColumnIndex >= 0 && event) {\r\n      const targetIndex =\r\n        this._draggedColumnIndex > this._currentDropHintIndex\r\n          ? this._currentDropHintIndex\r\n          : this._currentDropHintIndex - 1;\r\n      const isValidDrop = this._isValidCurrentDropHintIndex();\r\n      event.stopPropagation();\r\n      if (isValidDrop) {\r\n        this._onDropIndexInfo.sourceIndex = this._draggedColumnIndex;\r\n        this._onDropIndexInfo.targetIndex = targetIndex;\r\n\r\n        if (columnReorderProps.onColumnDrop) {\r\n          const dragDropDetails: IColumnDragDropDetails = {\r\n            draggedIndex: this._draggedColumnIndex,\r\n            targetIndex: targetIndex,\r\n          };\r\n          columnReorderProps.onColumnDrop(dragDropDetails);\r\n          /* eslint-disable deprecation/deprecation */\r\n        } else if (columnReorderProps.handleColumnReorder) {\r\n          columnReorderProps.handleColumnReorder(this._draggedColumnIndex, targetIndex);\r\n          /* eslint-enable deprecation/deprecation */\r\n        }\r\n      }\r\n    }\r\n\r\n    this._resetDropHints();\r\n    this._dropHintDetails = {};\r\n    this._draggedColumnIndex = -1;\r\n  };\r\n\r\n  /**\r\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\r\n   */\r\n  private _isCheckboxColumnHidden(): boolean {\r\n    const { selectionMode, checkboxVisibility } = this.props;\r\n\r\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\r\n  }\r\n\r\n  private _updateDragInfo = (props: { itemIndex: number }, event?: MouseEvent) => {\r\n    // Safe to assume this is defined since we're handling a drag event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n    const itemIndex = props.itemIndex;\r\n    if (itemIndex >= 0) {\r\n      // Column index is set based on the checkbox\r\n      this._draggedColumnIndex = this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\r\n      this._getDropHintPositions();\r\n      if (columnReorderProps.onColumnDragStart) {\r\n        columnReorderProps.onColumnDragStart(true);\r\n      }\r\n    } else if (event && this._draggedColumnIndex >= 0) {\r\n      this._resetDropHints();\r\n      this._draggedColumnIndex = -1;\r\n      this._dropHintDetails = {};\r\n      if (columnReorderProps.onColumnDragEnd) {\r\n        const columnDragEndLocation = this._isEventOnHeader(event);\r\n        columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);\r\n      }\r\n    }\r\n  };\r\n\r\n  private _resetDropHints(): void {\r\n    if (this._currentDropHintIndex >= 0) {\r\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\r\n      this._currentDropHintIndex = -1;\r\n    }\r\n  }\r\n\r\n  private _updateDropHintElement(element: HTMLElement, displayProperty: string) {\r\n    (element.childNodes[1] as HTMLElement).style.display = displayProperty;\r\n    (element.childNodes[0] as HTMLElement).style.display = displayProperty;\r\n  }\r\n\r\n  private _getDropHintPositions = (): void => {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    // Safe to assume this is defined since we're handling a drag/drop event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n    let prevX = 0;\r\n    let prevMid = 0;\r\n    let prevRef: HTMLElement;\r\n    const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\r\n    const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\r\n\r\n    for (let i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\r\n      if (this._rootElement.current) {\r\n        const dropHintElement = this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0] as HTMLElement;\r\n        if (dropHintElement) {\r\n          if (i === frozenColumnCountFromStart) {\r\n            prevX = dropHintElement.offsetLeft;\r\n            prevMid = dropHintElement.offsetLeft;\r\n            prevRef = dropHintElement;\r\n          } else {\r\n            const newMid = (dropHintElement.offsetLeft + prevX!) / 2;\r\n            this._dropHintDetails[i - 1] = {\r\n              originX: prevX,\r\n              startX: prevMid!,\r\n              endX: newMid,\r\n              dropHintElementRef: prevRef!,\r\n            };\r\n            prevMid = newMid;\r\n            prevRef = dropHintElement;\r\n            prevX = dropHintElement.offsetLeft;\r\n            if (i === columns.length - frozenColumnCountFromEnd) {\r\n              this._dropHintDetails[i] = {\r\n                originX: prevX,\r\n                startX: prevMid!,\r\n                endX: dropHintElement.offsetLeft,\r\n                dropHintElementRef: prevRef,\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\r\n   */\r\n  private _computeDropHintToBeShown = (clientX: number): void => {\r\n    const isRtl = getRTL(this.props.theme);\r\n    if (this._rootElement.current) {\r\n      const clientRect = this._rootElement.current.getBoundingClientRect();\r\n      const headerOriginX = clientRect.left;\r\n      const eventXRelativePosition = clientX - headerOriginX;\r\n      const currentDropHintIndex = this._currentDropHintIndex;\r\n      if (this._isValidCurrentDropHintIndex()) {\r\n        if (\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex!].startX,\r\n            this._dropHintDetails[currentDropHintIndex!].endX,\r\n          )\r\n        ) {\r\n          return;\r\n        }\r\n      }\r\n      const { columns = NO_COLUMNS } = this.props;\r\n      // Safe to assume this is defined since we're handling a drag/drop event\r\n      const columnReorderProps = this._getColumnReorderProps()!;\r\n      const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\r\n      const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\r\n\r\n      const currentIndex: number = frozenColumnCountFromStart;\r\n      const lastValidColumn = columns.length - frozenColumnCountFromEnd;\r\n      let indexToUpdate = -1;\r\n      if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[currentIndex].endX)) {\r\n        indexToUpdate = currentIndex;\r\n      } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[lastValidColumn].startX)) {\r\n        indexToUpdate = lastValidColumn;\r\n      } else if (this._isValidCurrentDropHintIndex()) {\r\n        if (\r\n          this._dropHintDetails[currentDropHintIndex! + 1] &&\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex! + 1].startX,\r\n            this._dropHintDetails[currentDropHintIndex! + 1].endX,\r\n          )\r\n        ) {\r\n          indexToUpdate = currentDropHintIndex! + 1;\r\n        } else if (\r\n          this._dropHintDetails[currentDropHintIndex! - 1] &&\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex! - 1].startX,\r\n            this._dropHintDetails[currentDropHintIndex! - 1].endX,\r\n          )\r\n        ) {\r\n          indexToUpdate = currentDropHintIndex! - 1;\r\n        }\r\n      }\r\n      if (indexToUpdate === -1) {\r\n        let startIndex = frozenColumnCountFromStart;\r\n        let endIndex = lastValidColumn;\r\n        while (startIndex < endIndex) {\r\n          const middleIndex = Math.ceil((endIndex + startIndex!) / 2);\r\n          if (\r\n            _liesBetween(\r\n              isRtl,\r\n              eventXRelativePosition,\r\n              this._dropHintDetails[middleIndex].startX,\r\n              this._dropHintDetails[middleIndex].endX,\r\n            )\r\n          ) {\r\n            indexToUpdate = middleIndex;\r\n            break;\r\n          } else if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\r\n            endIndex = middleIndex;\r\n          } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\r\n            startIndex = middleIndex;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (indexToUpdate === this._draggedColumnIndex || indexToUpdate === this._draggedColumnIndex + 1) {\r\n        if (this._isValidCurrentDropHintIndex()) {\r\n          this._resetDropHints();\r\n        }\r\n      } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\r\n        this._resetDropHints();\r\n        this._updateDropHintElement(this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\r\n        this._currentDropHintIndex = indexToUpdate;\r\n      }\r\n    }\r\n  };\r\n\r\n  private _isEventOnHeader(event: MouseEvent): ColumnDragEndLocation | undefined {\r\n    if (this._rootElement.current) {\r\n      const clientRect = this._rootElement.current.getBoundingClientRect();\r\n      if (\r\n        event.clientX > clientRect.left &&\r\n        event.clientX < clientRect.right &&\r\n        event.clientY > clientRect.top &&\r\n        event.clientY < clientRect.bottom\r\n      ) {\r\n        return ColumnDragEndLocation.header;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _renderColumnSizer = ({ columnIndex }: IDetailsColumnProps): JSX.Element | null => {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    const column = columns[columnIndex];\r\n    const { columnResizeDetails } = this.state;\r\n    const classNames = this._classNames;\r\n\r\n    return column.isResizable ? (\r\n      <div\r\n        key={`${column.key}_sizer`}\r\n        aria-hidden={true}\r\n        role=\"button\"\r\n        data-is-focusable={false}\r\n        onClick={_stopPropagation}\r\n        data-sizer-index={columnIndex}\r\n        onBlur={this._onSizerBlur}\r\n        className={css(\r\n          classNames.cellSizer,\r\n          columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd,\r\n          {\r\n            [classNames.cellIsResizing]: columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,\r\n          },\r\n        )}\r\n        onDoubleClick={this._onSizerDoubleClick.bind(this, columnIndex)}\r\n      />\r\n    ) : null;\r\n  };\r\n\r\n  private _renderColumnDivider(columnIndex: number): JSX.Element | null {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    const column = columns[columnIndex];\r\n    const { onRenderDivider } = column;\r\n    return onRenderDivider\r\n      ? onRenderDivider({ column, columnIndex }, this._renderColumnSizer)\r\n      : this._renderColumnSizer({ column, columnIndex });\r\n  }\r\n\r\n  private _renderDropHint(dropHintIndex: number): JSX.Element {\r\n    const classNames = this._classNames;\r\n    const IconComponent = this.props.useFastIcons ? FontIcon : Icon;\r\n    return (\r\n      <div key={'dropHintKey'} className={classNames.dropHintStyle} id={`columnDropHint_${dropHintIndex}`}>\r\n        <div\r\n          role=\"presentation\"\r\n          key={`dropHintCircleKey`}\r\n          className={classNames.dropHintCaretStyle}\r\n          data-is-focusable={false}\r\n          data-sizer-index={dropHintIndex}\r\n          aria-hidden={true}\r\n        >\r\n          <IconComponent iconName={'CircleShapeSolid'} />\r\n        </div>\r\n        <div\r\n          key={`dropHintLineKey`}\r\n          aria-hidden={true}\r\n          data-is-focusable={false}\r\n          data-sizer-index={dropHintIndex}\r\n          className={classNames.dropHintLineStyle}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: ITooltipHostProps): JSX.Element => {\r\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\r\n  };\r\n\r\n  /**\r\n   * double click on the column sizer will auto ajust column width\r\n   * to fit the longest content among current rendered rows.\r\n   *\r\n   * @param columnIndex - index of the column user double clicked\r\n   * @param ev - mouse double click event\r\n   */\r\n  private _onSizerDoubleClick(columnIndex: number, ev: React.MouseEvent<HTMLElement>): void {\r\n    const { onColumnAutoResized, columns = NO_COLUMNS } = this.props;\r\n    if (onColumnAutoResized) {\r\n      onColumnAutoResized(columns[columnIndex], columnIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the select all toggle is clicked.\r\n   */\r\n  private _onSelectAllClicked = (): void => {\r\n    const { selection } = this.props;\r\n\r\n    if (selection) {\r\n      selection.toggleAllSelected();\r\n    }\r\n  };\r\n\r\n  private _onRootMouseDown = (ev: MouseEvent): void => {\r\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\r\n    const columnIndex = Number(columnIndexAttr);\r\n    const { columns = NO_COLUMNS } = this.props;\r\n\r\n    if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\r\n      // Ignore anything except the primary button.\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      columnResizeDetails: {\r\n        columnIndex: columnIndex,\r\n        columnMinWidth: columns[columnIndex].calculatedWidth!,\r\n        originX: ev.clientX,\r\n      },\r\n    });\r\n\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  };\r\n\r\n  private _onRootMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const { columnResizeDetails, isSizing } = this.state;\r\n\r\n    if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\r\n      this.setState({ isSizing: true });\r\n    }\r\n  };\r\n\r\n  private _onRootKeyDown = (ev: KeyboardEvent): void => {\r\n    const { columnResizeDetails, isSizing } = this.state;\r\n    const { columns = NO_COLUMNS, onColumnResized } = this.props;\r\n\r\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\r\n\r\n    if (!columnIndexAttr || isSizing) {\r\n      return;\r\n    }\r\n\r\n    const columnIndex = Number(columnIndexAttr);\r\n\r\n    if (!columnResizeDetails) {\r\n      // eslint-disable-next-line deprecation/deprecation\r\n      if (ev.which === KeyCodes.enter) {\r\n        this.setState({\r\n          columnResizeDetails: {\r\n            columnIndex: columnIndex,\r\n            columnMinWidth: columns[columnIndex].calculatedWidth!,\r\n          },\r\n        });\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n      }\r\n    } else {\r\n      let increment: number | undefined;\r\n\r\n      // eslint-disable-next-line deprecation/deprecation\r\n      if (ev.which === KeyCodes.enter) {\r\n        this.setState({\r\n          columnResizeDetails: undefined,\r\n        });\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n        // eslint-disable-next-line deprecation/deprecation\r\n      } else if (ev.which === KeyCodes.left) {\r\n        increment = getRTL(this.props.theme) ? 1 : -1;\r\n        // eslint-disable-next-line deprecation/deprecation\r\n      } else if (ev.which === KeyCodes.right) {\r\n        increment = getRTL(this.props.theme) ? -1 : 1;\r\n      }\r\n\r\n      if (increment) {\r\n        if (!ev.shiftKey) {\r\n          increment *= 10;\r\n        }\r\n\r\n        this.setState({\r\n          columnResizeDetails: {\r\n            ...columnResizeDetails,\r\n            columnMinWidth: columnResizeDetails.columnMinWidth + increment,\r\n          },\r\n        });\r\n\r\n        if (onColumnResized) {\r\n          onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\r\n        }\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * mouse move event handler in the header\r\n   * it will set isSizing state to true when user clicked on the sizer and move the mouse.\r\n   *\r\n   * @param ev - mouse move event\r\n   */\r\n  private _onSizerMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const {\r\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\r\n      // but firefox doesn't support it, so we set the default value when it is not defined.\r\n      buttons,\r\n    } = ev;\r\n    const { onColumnIsSizingChanged, onColumnResized, columns = NO_COLUMNS } = this.props;\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\r\n      // cancel mouse down event and return early when the primary button is not pressed\r\n      this._onSizerMouseUp(ev);\r\n      return;\r\n    }\r\n\r\n    if (ev.clientX !== columnResizeDetails!.originX) {\r\n      if (onColumnIsSizingChanged) {\r\n        onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], true);\r\n      }\r\n    }\r\n\r\n    if (onColumnResized) {\r\n      let movement = ev.clientX - columnResizeDetails!.originX!;\r\n\r\n      if (getRTL(this.props.theme)) {\r\n        movement = -movement;\r\n      }\r\n\r\n      onColumnResized(\r\n        columns[columnResizeDetails!.columnIndex],\r\n        columnResizeDetails!.columnMinWidth + movement,\r\n        columnResizeDetails!.columnIndex,\r\n      );\r\n    }\r\n  };\r\n\r\n  private _onSizerBlur = (ev: React.FocusEvent<HTMLElement>): void => {\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    if (columnResizeDetails) {\r\n      this.setState({\r\n        columnResizeDetails: undefined,\r\n        isSizing: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * mouse up event handler in the header\r\n   * clear the resize related state.\r\n   * This is to ensure we can catch double click event\r\n   *\r\n   * @param ev - mouse up event\r\n   */\r\n  private _onSizerMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const { columns = NO_COLUMNS, onColumnIsSizingChanged } = this.props;\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    this.setState({\r\n      columnResizeDetails: undefined,\r\n      isSizing: false,\r\n    });\r\n\r\n    if (onColumnIsSizingChanged) {\r\n      onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], false);\r\n    }\r\n  };\r\n\r\n  private _onSelectionChanged(): void {\r\n    const isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\r\n\r\n    if (this.state.isAllSelected !== isAllSelected) {\r\n      this.setState({\r\n        isAllSelected: isAllSelected,\r\n      });\r\n    }\r\n  }\r\n\r\n  private _onToggleCollapseAll = (): void => {\r\n    const { onToggleCollapseAll } = this.props;\r\n    const newCollapsed = !this.state.isAllCollapsed;\r\n    this.setState({\r\n      isAllCollapsed: newCollapsed,\r\n    });\r\n    if (onToggleCollapseAll) {\r\n      onToggleCollapseAll(newCollapsed);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _liesBetween(rtl: boolean, target: number, left: number, right: number): boolean {\r\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\r\n}\r\nfunction _isBefore(rtl: boolean, a: number, b: number): boolean {\r\n  return rtl ? a >= b : a <= b;\r\n}\r\nfunction _isAfter(rtl: boolean, a: number, b: number): boolean {\r\n  return rtl ? a <= b : a >= b;\r\n}\r\n\r\nfunction _stopPropagation(ev: React.MouseEvent<HTMLElement>): void {\r\n  ev.stopPropagation();\r\n}\r\n",
    "import * as React from 'react';\r\nimport { styled } from '../../Utilities';\r\nimport {\r\n  IDetailsHeaderProps,\r\n  IDetailsHeaderBaseProps,\r\n  IDetailsHeaderStyleProps,\r\n  IDetailsHeaderStyles,\r\n} from './DetailsHeader.types';\r\nimport { DetailsHeaderBase } from './DetailsHeader.base';\r\nimport { getStyles } from './DetailsHeader.styles';\r\n\r\nexport { IDetailsHeaderProps, IDetailsHeaderBaseProps };\r\n\r\nexport const DetailsHeader: React.FunctionComponent<IDetailsHeaderBaseProps> = styled<\r\n  IDetailsHeaderBaseProps,\r\n  IDetailsHeaderStyleProps,\r\n  IDetailsHeaderStyles\r\n>(DetailsHeaderBase, getStyles, undefined, { scope: 'DetailsHeader' });\r\n",
    "import * as React from 'react';\nimport { IColumn } from './DetailsList.types';\nimport { css } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps> = props => {\n  const {\n    columns,\n    columnStartIndex,\n    rowClassNames,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    item,\n    itemIndex,\n    onRenderItemColumn,\n    getCellValueKey,\n    cellsByColumn,\n    enableUpdateAnimations,\n    rowHeaderId,\n  } = props;\n\n  const cellValueKeysRef = React.useRef<{\n    [columnKey: string]: string | undefined;\n  }>();\n\n  const cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n\n  return (\n    <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n      {columns.map((column, columnIndex) => {\n        const width: string | number =\n          typeof column.calculatedWidth === 'undefined'\n            ? 'auto'\n            : column.calculatedWidth +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n        const { onRender = onRenderItemColumn, getValueKey = getCellValueKey } = column;\n        const cellContentsRender =\n          cellsByColumn && column.key in cellsByColumn\n            ? cellsByColumn[column.key]\n            : onRender\n            ? onRender(item, itemIndex, column)\n            : getCellText(item, column);\n\n        const previousValueKey = cellValueKeys[column.key];\n\n        const cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n\n        let showAnimation = false;\n\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n          showAnimation = true;\n        }\n\n        cellValueKeys[column.key] = cellValueKey;\n\n        // generate a key that auto-dirties when content changes, to force the container to re-render,\n        // to trigger animation\n        const key = `${column.key}${cellValueKey !== undefined ? `-${cellValueKey}` : ''}`;\n        return (\n          <div\n            key={key}\n            id={column.isRowHeader ? rowHeaderId : undefined}\n            role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n            aria-readonly\n            aria-colindex={columnIndex + columnStartIndex + 1}\n            className={css(\n              column.className,\n              column.isMultiline && rowClassNames.isMultiline,\n              column.isRowHeader && rowClassNames.isRowHeader,\n              rowClassNames.cell,\n              column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n              showAnimation && rowClassNames.cellAnimation,\n            )}\n            style={{ width }}\n            data-automationid=\"DetailsRowCell\"\n            data-automation-key={column.key}\n          >\n            {cellContentsRender}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n",
    "import * as React from 'react';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  IDisposable,\n  css,\n  shallowCompare,\n  getNativeProps,\n  divProperties,\n} from '../../Utilities';\nimport { IColumn, CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection, IFocusZone } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\nimport { IDetailsRowBaseProps } from './DetailsRow.types';\nimport { IDetailsRowCheckProps } from './DetailsRowCheck.types';\nimport { IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport { classNamesFunction, getId } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { IProcessedStyleSet } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowStyleProps, IDetailsRowStyles>();\n\nexport interface IDetailsRowSelectionState {\n  isSelected: boolean;\n  isSelectionModal: boolean;\n}\n\nexport interface IDetailsRowState {\n  selectionState: IDetailsRowSelectionState;\n  columnMeasureInfo?: {\n    index: number;\n    column: IColumn;\n    onMeasureDone: (measuredWidth: number) => void;\n  };\n  isDropping?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsRowBase extends React.Component<IDetailsRowBaseProps, IDetailsRowState> {\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLElement>();\n  private _cellMeasurer = React.createRef<HTMLSpanElement>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _droppingClassNames: string;\n  /** Whether this.props.onDidMount has been called */\n  private _onDidMountCalled: boolean;\n  private _dragDropSubscription: IDisposable;\n\n  private _classNames: IProcessedStyleSet<IDetailsRowStyles>;\n  private _rowClassNames: IDetailsRowFieldsProps['rowClassNames'];\n  private _ariaRowDescriptionId: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsRowBaseProps,\n    previousState: IDetailsRowState,\n  ): IDetailsRowState {\n    return {\n      ...previousState,\n      selectionState: getSelectionState(nextProps),\n    };\n  }\n\n  constructor(props: IDetailsRowBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false,\n    };\n\n    this._droppingClassNames = '';\n  }\n  public componentDidMount(): void {\n    const { dragDropHelper, selection, item, onDidMount } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getRowDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IDetailsRowBaseProps) {\n    const state = this.state;\n    const { item, onDidMount } = this.props;\n    const { columnMeasureInfo } = state;\n\n    if (\n      this.props.itemIndex !== previousProps.itemIndex ||\n      this.props.item !== previousProps.item ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getRowDragDropOptions(),\n        );\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      const newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n\n      this.setState({\n        columnMeasureInfo: undefined,\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { item, onWillUnmount } = this.props;\n\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  }\n\n  public shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean {\n    if (this.props.useReducedRowRenderer) {\n      const newSelectionState = getSelectionState(nextProps);\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      columns = NO_COLUMNS,\n      dragDropEvents,\n      item,\n      itemIndex,\n      flatIndexOffset = 2,\n      id,\n      onRenderCheck = this._onRenderCheck,\n      onRenderDetailsCheckbox,\n      onRenderItemColumn,\n      getCellValueKey,\n      selectionMode,\n      rowWidth = 0,\n      checkboxVisibility,\n      getRowAriaLabel,\n      getRowAriaDescription,\n      getRowAriaDescribedBy,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      rowFieldsAs: RowFields = DetailsRowFields,\n      selection,\n      indentWidth,\n      enableUpdateAnimations,\n      compact,\n      theme,\n      styles,\n      cellsByColumn,\n      groupNestingDepth,\n      useFastIcons = true,\n      cellStyleProps,\n      disabled = false,\n    } = this.props;\n    const { columnMeasureInfo, isDropping } = this.state;\n    const { isSelected = false, isSelectionModal = false } = this.state.selectionState;\n    const isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    const droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    const ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    const ariaRowDescription = getRowAriaDescription ? getRowAriaDescription(item) : undefined;\n    const ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    const canSelect = !!selection && selection.canSelectItem(item, itemIndex) && !disabled;\n    const isContentUnselectable = selectionMode === SelectionMode.multiple;\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    const ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n\n    this._classNames = {\n      ...this._classNames,\n      ...getClassNames(styles, {\n        theme: theme!,\n        isSelected,\n        canSelect: !isContentUnselectable,\n        anySelected: isSelectionModal,\n        checkboxCellClassName,\n        droppingClassName,\n        className,\n        compact,\n        enableUpdateAnimations,\n        cellStyleProps,\n        disabled,\n      }),\n    };\n\n    const rowClassNames: IDetailsRowFieldsProps['rowClassNames'] = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields,\n    };\n\n    // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    const rowFields = (\n      <RowFields\n        rowClassNames={this._rowClassNames}\n        rowHeaderId={`${id}-header`}\n        cellsByColumn={cellsByColumn}\n        columns={columns}\n        item={item}\n        itemIndex={itemIndex}\n        columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0)}\n        onRenderItemColumn={onRenderItemColumn}\n        getCellValueKey={getCellValueKey}\n        enableUpdateAnimations={enableUpdateAnimations}\n        cellStyleProps={cellStyleProps}\n      />\n    );\n\n    const defaultRole = 'row';\n    const role = this.props.role ? this.props.role : defaultRole;\n    this._ariaRowDescriptionId = getId('DetailsRow-description');\n\n    return (\n      <FocusZone\n        data-is-focusable={true}\n        {...getNativeProps(this.props, divProperties)}\n        {...(typeof isDraggable === 'boolean'\n          ? {\n              'data-is-draggable': isDraggable, // This data attribute is used by some host applications.\n              draggable: isDraggable,\n            }\n          : {})}\n        direction={FocusZoneDirection.horizontal}\n        elementRef={this._root}\n        componentRef={this._focusZone}\n        role={role}\n        aria-label={ariaLabel}\n        aria-disabled={disabled || undefined}\n        aria-describedby={ariaRowDescription ? this._ariaRowDescriptionId : ariaDescribedBy}\n        className={this._classNames.root}\n        data-selection-index={itemIndex}\n        data-selection-touch-invoke={true}\n        data-selection-disabled={disabled || undefined}\n        data-item-index={itemIndex}\n        aria-rowindex={groupNestingDepth ? undefined : itemIndex + flatIndexOffset}\n        aria-level={(groupNestingDepth && groupNestingDepth + 1) || undefined}\n        data-automationid=\"DetailsRow\"\n        style={{ minWidth: rowWidth }}\n        aria-selected={ariaSelected}\n        allowFocusRoot={true}\n      >\n        {ariaRowDescription ? (\n          <span key=\"description\" role=\"presentation\" hidden={true} id={this._ariaRowDescriptionId}>\n            {ariaRowDescription}\n          </span>\n        ) : null}\n        {showCheckbox && (\n          <div role=\"gridcell\" aria-colindex={1} data-selection-toggle={true} className={this._classNames.checkCell}>\n            {onRenderCheck({\n              id: id ? `${id}-checkbox` : undefined,\n              selected: isSelected,\n              anySelected: isSelectionModal,\n              'aria-label': checkButtonAriaLabel,\n              'aria-labelledby': id ? `${id}-checkbox ${id}-header` : undefined,\n              canSelect,\n              compact,\n              className: this._classNames.check,\n              theme,\n              isVisible: checkboxVisibility === CheckboxVisibility.always,\n              onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n              useFastIcons,\n            })}\n          </div>\n        )}\n\n        <GroupSpacer\n          indentWidth={indentWidth}\n          role=\"gridcell\"\n          count={groupNestingDepth! - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0)}\n        />\n\n        {item && rowFields}\n        {columnMeasureInfo && (\n          <span\n            role=\"presentation\"\n            className={css(this._classNames.cellMeasurer, this._classNames.cell)}\n            ref={this._cellMeasurer}\n          >\n            <RowFields\n              rowClassNames={this._rowClassNames}\n              rowHeaderId={`${id}-header`}\n              columns={[columnMeasureInfo.column]}\n              item={item}\n              itemIndex={itemIndex}\n              columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length}\n              onRenderItemColumn={onRenderItemColumn}\n              getCellValueKey={getCellValueKey}\n            />\n          </span>\n        )}\n\n        <span\n          role=\"checkbox\"\n          className={this._classNames.checkCover}\n          aria-checked={isSelected}\n          data-selection-toggle={true}\n        />\n      </FocusZone>\n    );\n  }\n\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n  public measureCell(index: number, onMeasureDone: (width: number) => void): void {\n    const { columns = NO_COLUMNS } = this.props;\n    const column: IColumn = { ...columns[index] };\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n\n    delete column.calculatedWidth;\n\n    this.setState({\n      columnMeasureInfo: {\n        index,\n        column,\n        onMeasureDone,\n      },\n    });\n  }\n\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    return !!this._focusZone.current?.focus(forceIntoFirstElement);\n  }\n\n  protected _onRenderCheck(props: IDetailsRowCheckProps) {\n    return <DetailsRowCheck {...props} />;\n  }\n\n  private _onSelectionChanged = (): void => {\n    const selectionState = getSelectionState(this.props);\n\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\n      this.setState({\n        selectionState: selectionState,\n      });\n    }\n  };\n\n  private _getRowDragDropOptions(): IDragDropOptions {\n    const { item, itemIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: { data: item, index: itemIndex },\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents!.onDrop,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n\n    return options;\n  }\n\n  /**\n   * update isDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * when change to true, that means drag enter. we will add default dropping class name\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n   *\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\n   *\n   * @param newValue - New isDropping state value\n   * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, item } = this.props;\n\n    if (!newValue) {\n      if (dragDropEvents!.onDragLeave) {\n        dragDropEvents!.onDragLeave(item, event);\n      }\n    } else if (dragDropEvents!.onDragEnter) {\n      this._droppingClassNames = dragDropEvents!.onDragEnter(item, event);\n    }\n\n    if (isDropping !== newValue) {\n      this.setState({ isDropping: newValue });\n    }\n  };\n}\n\nfunction getSelectionState(props: IDetailsRowBaseProps): IDetailsRowSelectionState {\n  const { itemIndex, selection } = props;\n\n  return {\n    isSelected: !!selection?.isIndexSelected(itemIndex),\n    isSelectionModal: !!selection?.isModal?.(),\n  };\n}\n",
    "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IDetailsRowProps, IDetailsRowBaseProps, IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport { DetailsRowBase } from './DetailsRow.base';\nimport { getDetailsRowStyles } from './DetailsRow.styles';\n\nexport { IDetailsRowProps, IDetailsRowBaseProps };\n\nexport const DetailsRow: React.FunctionComponent<IDetailsRowBaseProps> = styled<\n  IDetailsRowBaseProps,\n  IDetailsRowStyleProps,\n  IDetailsRowStyles\n>(DetailsRowBase, getDetailsRowStyles, undefined, {\n  scope: 'DetailsRow',\n});\n",
    "import * as React from 'react';\nimport { ITheme, IStyle } from '../../Styling';\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Spinner}\n */\nexport interface ISpinner {}\n\n/**\n * Spinner component props.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the ISpinner interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ISpinner>;\n\n  /**\n   * Deprecated and will be removed at \\>= 2.0.0. Use `SpinnerSize` instead.\n   * @deprecated Use `SpinnerSize` instead.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  type?: SpinnerType;\n\n  /**\n   * The size of Spinner to render. \\{ extraSmall, small, medium, large \\}\n   * @defaultvalue SpinnerType.medium\n   */\n  size?: SpinnerSize;\n\n  /**\n   * The label to show next to the Spinner. Label updates will be announced to the screen readers.\n   * Use ariaLive to control politeness level.\n   */\n  label?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the Spinner.\n   */\n  className?: string;\n\n  /**\n   * Politeness setting for label update announcement.\n   * @defaultvalue polite\n   */\n  ariaLive?: 'assertive' | 'polite' | 'off';\n\n  /**\n   * Alternative status label for screen reader\n   */\n  ariaLabel?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>;\n\n  /**\n   * The position of the label in regards of the spinner animation.\n   * @defaultvalue SpinnerLabelPosition.bottom\n   */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Possible variations of the spinner circle size.\n * {@docCategory Spinner}\n */\nexport enum SpinnerSize {\n  /**\n   * 12px Spinner diameter\n   */\n  xSmall = 0,\n\n  /**\n   * 16px Spinner diameter\n   */\n  small = 1,\n\n  /**\n   * 20px Spinner diameter\n   */\n  medium = 2,\n\n  /**\n   * 28px Spinner diameter\n   */\n  large = 3,\n}\n\n/**\n * Possible locations of the label in regards to the spinner\n * @defaultvalue bottom\n * {@docCategory Spinner}\n */\nexport type SpinnerLabelPosition = 'top' | 'right' | 'bottom' | 'left';\n\n/**\n * Deprecated at v2.0.0, use `SpinnerSize` instead.\n * @deprecated Use `SpinnerSize` instead.\n * {@docCategory Spinner}\n */\nexport enum SpinnerType {\n  /**\n   * Deprecated and will be removed at \\>= 2.0.0. Use `SpinnerSize.medium` instead.\n   * @deprecated Use `SpinnerSize.medium` instead.\n   */\n  normal = 0,\n\n  /**\n   * Deprecated and will be removed at \\>= 2.0.0. Use `SpinnerSize.large` instead.\n   * @deprecated Use `SpinnerSize.large` instead.\n   */\n  large = 1,\n}\n\n/**\n * The props needed to construct styles.\n * This represents the simplified set of immutable things which control the class names.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyleProps {\n  /** Theme provided by High-Order Component. */\n  theme: ITheme;\n\n  /** Size of the spinner animation. */\n  size?: SpinnerSize;\n\n  /** CSS class name for the component attached to the root stylable area. */\n  className?: string;\n\n  /** Position of the label in regards to the spinner animation. */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Represents the stylable areas of the control.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyles {\n  /** Styles for the root element. Refers to the wrapper containing both the circle and the label. */\n  root?: IStyle;\n\n  /** Styles for the spinner circle animation. */\n  circle?: IStyle;\n\n  /** Styles for the label accompanying the circle. */\n  label?: IStyle;\n\n  /** Styles for the hidden helper element to aid with screen readers. */\n  screenReaderText?: IStyle;\n}\n",
    "import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  KeyCodes,\n  elementContains,\n  findScrollableParent,\n  getParent,\n  getDocument,\n  getWindow,\n  isElementTabbable,\n  css,\n  initializeComponentRef,\n  FocusRects,\n} from '../../Utilities';\nimport { ISelection, SelectionMode, IObjectWithKey } from './interfaces';\n\n// Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\n\nconst SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\nconst SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nconst SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nconst SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\nconst SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME = 'data-selection-touch-invoke';\nconst SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\nconst SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZone {\n  /**\n   * Method to ignore subsequent focus.\n   */\n  ignoreNextFocus: () => void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneProps extends React.ClassAttributes<SelectionZone> {\n  /**\n   * Reference to the component interface.\n   */\n  componentRef?: () => void;\n  /**\n   * Required {@link ISelection} instance bound to the {@link SelectionZone}.\n   */\n  selection: ISelection;\n  /**\n   * @deprecated No longer in use, focus is now managed by {@link FocusZone}.\n   */\n  layout?: {};\n  /**\n   * The mode of Selection, where the value is one of\n   * 'none', 'single', or 'multiple'.\n   *\n   * @defaultvalue {@link SelectionMode.multiple}\n   */\n  selectionMode?: SelectionMode;\n  /**\n   * If true, selection is preserved on outer click.\n   */\n  selectionPreservedOnEmptyClick?: boolean;\n  /**\n   * If true, disables automatic selection on input elements.\n   */\n  disableAutoSelectOnInputElements?: boolean;\n  /**\n   * If true, modal selection is enabled on touch event.\n   */\n  enterModalOnTouch?: boolean;\n  /**\n   * Determines whether elements with the attribute `data-selection-touch-invoke` should be used as invocation targets\n   * for an item if the user is using touch.\n   *\n   * @defaultvalue false\n   */\n  enableTouchInvocationTarget?: boolean;\n  /**\n   * Determines if an item is selected on focus.\n   *\n   * @defaultvalue true\n   */\n  isSelectedOnFocus?: boolean;\n  /**\n   * Optional callback for when an item is\n   * invoked via ENTER or double-click.\n   */\n  onItemInvoked?: (item?: IObjectWithKey, index?: number, ev?: Event) => void;\n  /**\n   * Optional callback for when an\n   * item's contextual menu action occurs.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n  /**\n   * Additional CSS class(es) to apply to the SelectionZone.\n   */\n  className?: string;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneState {\n  isModal: boolean | undefined;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport class SelectionZone extends React.Component<ISelectionZoneProps, ISelectionZoneState> {\n  public static defaultProps = {\n    isSelectedOnFocus: true,\n    selectionMode: SelectionMode.multiple,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _isCtrlPressed: boolean;\n  private _isShiftPressed: boolean;\n  private _isMetaPressed: boolean;\n  private _isTabPressed: boolean;\n  private _shouldHandleFocus: boolean;\n  private _shouldHandleFocusTimeoutId: number | undefined;\n  private _isTouch: boolean;\n  private _isTouchTimeoutId: number | undefined;\n\n  public static getDerivedStateFromProps(\n    nextProps: ISelectionZoneProps,\n    prevState: ISelectionZoneState,\n  ): ISelectionZoneState {\n    const isModal = nextProps.selection.isModal && nextProps.selection.isModal();\n\n    return {\n      ...prevState,\n      isModal,\n    };\n  }\n\n  constructor(props: ISelectionZoneProps) {\n    super(props);\n\n    this._events = new EventGroup(this);\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    const { selection } = this.props;\n\n    // Reflect the initial modal state of selection into the state.\n    const isModal = selection.isModal && selection.isModal();\n\n    this.state = {\n      isModal,\n    };\n  }\n\n  public componentDidMount(): void {\n    const win = getWindow(this._root.current);\n\n    // Track the latest modifier keys globally.\n    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\n    this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);\n    this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);\n\n    // Subscribe to the selection to keep modal state updated.\n    this._events.on(this.props.selection, 'change', this._onSelectionChange);\n  }\n\n  public render(): JSX.Element {\n    const { isModal } = this.state;\n\n    return (\n      <div\n        className={css('ms-SelectionZone', this.props.className, {\n          'ms-SelectionZone--modal': !!isModal,\n        })}\n        ref={this._root}\n        onKeyDown={this._onKeyDown}\n        onMouseDown={this._onMouseDown}\n        onKeyDownCapture={this._onKeyDownCapture}\n        onClick={this._onClick}\n        role=\"presentation\"\n        onDoubleClick={this._onDoubleClick}\n        onContextMenu={this._onContextMenu}\n        onMouseDownCapture={this._onMouseDownCapture}\n        onFocusCapture={this._onFocus}\n        data-selection-is-modal={isModal ? true : undefined}\n      >\n        {this.props.children}\n        <FocusRects />\n      </div>\n    );\n  }\n\n  public componentDidUpdate(previousProps: ISelectionZoneProps): void {\n    const { selection } = this.props;\n\n    if (selection !== previousProps.selection) {\n      // Whenever selection changes, update the subscripton to keep modal state updated.\n      this._events.off(previousProps.selection);\n      this._events.on(selection, 'change', this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  /**\n   * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\n   * react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has\n   * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\n   * focus event that occurs. This method does that.\n   */\n  public ignoreNextFocus = (): void => {\n    this._handleNextFocus(false);\n  };\n\n  private _onSelectionChange = (): void => {\n    const { selection } = this.props;\n\n    const isModal = selection.isModal && selection.isModal();\n\n    this.setState({\n      isModal,\n    });\n  };\n\n  private _onMouseDownCapture = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    if (document.activeElement !== target && !elementContains(document.activeElement as HTMLElement, target)) {\n      this.ignoreNextFocus();\n      return;\n    }\n\n    if (!elementContains(target, this._root.current)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n        this.ignoreNextFocus();\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  /**\n   * When we focus an item, for single/multi select scenarios, we should try to select it immediately\n   * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\n   * specially.\n   */\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (this._shouldHandleFocus && selectionMode !== SelectionMode.none) {\n      const isToggle = this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n      const itemRoot = this._findItemRoot(target);\n\n      if (!isToggle && itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (isToggleModifierPressed) {\n          // set anchor only.\n          selection.setIndexSelected(index, selection.isIndexSelected(index), true);\n          if (this.props.enterModalOnTouch && this._isTouch && selection.setModal) {\n            selection.setModal(true);\n            this._setIsTouch(false);\n          }\n        } else {\n          if (this.props.isSelectedOnFocus) {\n            this._onItemSurfaceClick(ev, index);\n          }\n        }\n      }\n    }\n\n    this._handleNextFocus(false);\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    // No-op if selection is disabled\n    if (this._isSelectionDisabled(target)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        break;\n      } else if (itemRoot) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (\n          (target === itemRoot || this._shouldAutoSelect(target)) &&\n          !this._isShiftPressed &&\n          !this._isCtrlPressed &&\n          !this._isMetaPressed\n        ) {\n          this._onInvokeMouseDown(ev, this._getItemIndex(itemRoot));\n          break;\n        } else if (\n          this.props.disableAutoSelectOnInputElements &&\n          (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')\n        ) {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onTouchStartCapture = (ev: React.TouchEvent<HTMLElement>): void => {\n    this._setIsTouch(true);\n  };\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { enableTouchInvocationTarget = false } = this.props;\n\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        if (!isSelectionDisabled) {\n          this._onToggleAllClick(ev);\n        }\n        break;\n      } else if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          if (!isSelectionDisabled) {\n            if (this._isShiftPressed) {\n              this._onItemSurfaceClick(ev, index);\n            } else {\n              this._onToggleClick(ev, index);\n            }\n          }\n          break;\n        } else if (\n          (this._isTouch &&\n            enableTouchInvocationTarget &&\n            this._hasAttribute(target, SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME)) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          // Items should be invokable even if selection is disabled.\n          this._onInvokeClick(ev, index);\n          break;\n        } else if (target === itemRoot) {\n          if (!isSelectionDisabled) {\n            this._onItemSurfaceClick(ev, index);\n          }\n          break;\n        } else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n\n    const { onItemContextMenu, selection } = this.props;\n    if (onItemContextMenu) {\n      const itemRoot = this._findItemRoot(target);\n\n      if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        this._onInvokeMouseDown(ev, index);\n\n        const skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);\n\n        // In order to keep back compat, if the value here is undefined, then we should still\n        // call preventDefault(). Only in the case where true is explicitly returned should\n        // the call be skipped.\n        if (!skipPreventDefault) {\n          ev.preventDefault();\n        }\n      }\n    }\n  };\n\n  private _isSelectionDisabled(target: HTMLElement): boolean {\n    if (this._getSelectionMode() === SelectionMode.none) {\n      return true;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\n        return true;\n      }\n      target = getParent(target) as HTMLElement;\n    }\n\n    return false;\n  }\n\n  /**\n   * In multi selection, if you double click within an item's root (but not within the invoke element or\n   * input elements), we should execute the invoke handler.\n   */\n  private _onDoubleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    const { onItemInvoked } = this.props;\n    const itemRoot = this._findItemRoot(target);\n\n    if (itemRoot && onItemInvoked && !this._isInputElement(target)) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (\n          this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          break;\n        } else if (target === itemRoot) {\n          this._onInvokeClick(ev, index);\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onKeyDownCapture = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    this._handleNextFocus(true);\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean | undefined => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    const { selection } = this.props;\n    const isSelectAllKey = ev.which === KeyCodes.a && (this._isCtrlPressed || this._isMetaPressed);\n    const isClearSelectionKey = ev.which === KeyCodes.escape;\n\n    // Ignore key downs from input elements.\n    if (this._isInputElement(target)) {\n      // A key was pressed while an item in this zone was focused.\n      return;\n    }\n\n    const selectionMode = this._getSelectionMode();\n\n    // If ctrl-a is pressed, select all (if all are not already selected.)\n    if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(true);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    // If escape is pressed, clear selection (if any are selected.)\n    if (isClearSelectionKey && selection.getSelectedCount() > 0) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(false);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    const itemRoot = this._findItemRoot(target);\n\n    // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\n    if (itemRoot) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\n          // so we can no-op for any keydowns in this case.\n          break;\n        } else if (this._shouldAutoSelect(target)) {\n          if (!isSelectionDisabled) {\n            // If the event went to an element which should trigger auto-select, select it and then let\n            // the default behavior kick in.\n            this._onInvokeMouseDown(ev, index);\n          }\n          break;\n        } else if (\n          (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) &&\n          (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT')\n        ) {\n          return false;\n        } else if (target === itemRoot) {\n          if (ev.which === KeyCodes.enter) {\n            // Items should be invokable even if selection is disabled.\n            this._onInvokeClick(ev, index);\n            ev.preventDefault();\n            return;\n          } else if (ev.which === KeyCodes.space) {\n            if (!isSelectionDisabled) {\n              this._onToggleClick(ev, index);\n            }\n            ev.preventDefault();\n            return;\n          }\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n    }\n  };\n\n  private _onToggleAllClick(ev: React.MouseEvent<HTMLElement>): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleAllSelected();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  }\n\n  private _onToggleClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    selection.setChangeEvents(false);\n\n    if (this.props.enterModalOnTouch && this._isTouch && !selection.isIndexSelected(index) && selection.setModal) {\n      selection.setModal(true);\n      this._setIsTouch(false);\n    }\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleIndexSelected(index);\n    } else if (selectionMode === SelectionMode.single) {\n      const isSelected = selection.isIndexSelected(index);\n      const isModal = selection.isModal && selection.isModal();\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, !isSelected, true);\n      if (isModal && selection.setModal) {\n        // Since the above call to setAllSelected(false) clears modal state,\n        // restore it. This occurs because the SelectionMode of the Selection\n        // may differ from the SelectionZone.\n        selection.setModal(true);\n      }\n    } else {\n      selection.setChangeEvents(true);\n      return;\n    }\n\n    selection.setChangeEvents(true);\n\n    ev.stopPropagation();\n\n    // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\n    // for checkboxes if you use a checkbox for the toggle.\n  }\n\n  private _onInvokeClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection, onItemInvoked } = this.props;\n\n    if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onItemSurfaceClick(ev: React.SyntheticEvent<HTMLElement>, index: number): void {\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      if (this._isShiftPressed && !this._isTabPressed) {\n        selection.selectToIndex(index, !isToggleModifierPressed);\n      } else if (isToggleModifierPressed) {\n        selection.toggleIndexSelected(index);\n      } else {\n        this._clearAndSelectIndex(index);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      this._clearAndSelectIndex(index);\n    }\n  }\n\n  private _onInvokeMouseDown(\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    index: number,\n  ): void {\n    const { selection } = this.props;\n\n    // Only do work if item is not selected.\n    if (selection.isIndexSelected(index)) {\n      return;\n    }\n\n    this._clearAndSelectIndex(index);\n  }\n\n  /**\n   * To avoid high startup cost of traversing the DOM on component mount,\n   * defer finding the scrollable parent until a click interaction.\n   *\n   * The styles will probably already calculated since we're running in a click handler,\n   * so this is less likely to cause layout thrashing then doing it in mount.\n   */\n  private _findScrollParentAndTryClearOnEmptyClick(ev: MouseEvent) {\n    const scrollParent = findScrollableParent(this._root.current) as HTMLElement;\n    // unbind this handler and replace binding with a binding on the actual scrollable parent\n    this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);\n\n    // If we clicked inside the scrollable parent, call through to the handler on this click.\n    if ((scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target)) || scrollParent === ev.target) {\n      this._tryClearOnEmptyClick(ev);\n    }\n  }\n\n  private _tryClearOnEmptyClick(ev: MouseEvent): void {\n    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target as HTMLElement)) {\n      this.props.selection.setAllSelected(false);\n    }\n  }\n\n  private _clearAndSelectIndex(index: number): void {\n    const { selection } = this.props;\n    const isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\n\n    if (!isAlreadySingleSelected) {\n      const isModal = selection.isModal && selection.isModal();\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, true, true);\n      if (isModal || (this.props.enterModalOnTouch && this._isTouch)) {\n        if (selection.setModal) {\n          selection.setModal(true);\n        }\n        if (this._isTouch) {\n          this._setIsTouch(false);\n        }\n      }\n      selection.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * We need to track the modifier key states so that when focus events occur, which do not contain\n   * modifier states in the Event object, we know how to behave.\n   */\n  private _updateModifiers(ev: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\n    this._isShiftPressed = ev.shiftKey;\n    this._isCtrlPressed = ev.ctrlKey;\n    this._isMetaPressed = ev.metaKey;\n\n    const keyCode = (ev as React.KeyboardEvent<HTMLElement>).keyCode;\n    this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;\n  }\n\n  private _findItemRoot(target: HTMLElement): HTMLElement | undefined {\n    const { selection } = this.props;\n\n    while (target !== this._root.current) {\n      const indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n      const index = Number(indexValue);\n\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n\n    if (target === this._root.current) {\n      return undefined;\n    }\n\n    return target;\n  }\n\n  private _getItemIndex(itemRoot: HTMLElement): number {\n    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));\n  }\n\n  private _shouldAutoSelect(element: HTMLElement): boolean {\n    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);\n  }\n\n  private _hasAttribute(element: HTMLElement, attributeName: string): boolean {\n    let isToggle = false;\n\n    while (!isToggle && element !== this._root.current) {\n      isToggle = element.getAttribute(attributeName) === 'true';\n      element = getParent(element) as HTMLElement;\n    }\n\n    return isToggle;\n  }\n\n  private _isInputElement(element: HTMLElement): boolean {\n    return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';\n  }\n\n  private _isNonHandledClick(element: HTMLElement): boolean {\n    const doc = getDocument();\n\n    if (doc && element) {\n      while (element && element !== doc.documentElement) {\n        if (isElementTabbable(element)) {\n          return false;\n        }\n\n        element = getParent(element) as HTMLElement;\n      }\n    }\n\n    return true;\n  }\n\n  private _handleNextFocus(handleFocus: boolean): void {\n    if (this._shouldHandleFocusTimeoutId) {\n      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\n      this._shouldHandleFocusTimeoutId = undefined;\n    }\n\n    this._shouldHandleFocus = handleFocus;\n\n    if (handleFocus) {\n      this._async.setTimeout(() => {\n        this._shouldHandleFocus = false;\n      }, 100);\n    }\n  }\n\n  private _setIsTouch(isTouch: boolean): void {\n    if (this._isTouchTimeoutId) {\n      this._async.clearTimeout(this._isTouchTimeoutId);\n      this._isTouchTimeoutId = undefined;\n    }\n\n    this._isTouch = true;\n\n    if (isTouch) {\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 300);\n    }\n  }\n\n  private _getSelectionMode(): SelectionMode {\n    const { selection } = this.props;\n\n    const { selectionMode = selection ? selection.mode : SelectionMode.none } = this.props;\n\n    return selectionMode;\n  }\n}\n",
    "import { IGroupedListStyleProps, IGroupedListStyles } from './GroupedList.types';\nimport { getGlobalClassNames, AnimationVariables } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupedList',\n  compact: 'ms-GroupedList--Compact',\n  group: 'ms-GroupedList-group',\n  link: 'ms-Link',\n  listCell: 'ms-List-cell',\n};\n\nconst beziers = {\n  easeInOutSine: 'cubic-bezier(0.445, 0.050, 0.550, 0.950)',\n};\n\nexport const getStyles = (props: IGroupedListStyleProps): IGroupedListStyles => {\n  const { theme, className, compact } = props;\n  const { palette } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        selectors: {\n          [`.${classNames.listCell}`]: {\n            minHeight: 38, // be consistent with DetailsList styles\n          },\n        },\n      },\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32, // be consistent with DetailsList styles\n            },\n          },\n        },\n      ],\n      className,\n    ],\n    group: [\n      classNames.group,\n      {\n        transition: `background-color ${AnimationVariables.durationValue2} ${beziers.easeInOutSine}`,\n      },\n    ],\n    groupIsDropping: {\n      backgroundColor: palette.neutralLight,\n    },\n  };\n};\n",
    "import { IGroupHeaderStyleProps, IGroupHeaderStyles } from './GroupHeader.types';\nimport {\n  getGlobalClassNames,\n  getFocusStyle,\n  IStyle,\n  AnimationVariables,\n  FontWeights,\n  IconFontSizes,\n} from '../../Styling';\nimport { getRTL, IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from '../DetailsList/DetailsRow.styles';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as EXPAND_BUTTON_WIDTH } from './GroupSpacer';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupHeader',\n  compact: 'ms-GroupHeader--compact',\n  check: 'ms-GroupHeader-check',\n  dropIcon: 'ms-GroupHeader-dropIcon',\n  expand: 'ms-GroupHeader-expand',\n  isCollapsed: 'is-collapsed',\n  title: 'ms-GroupHeader-title',\n  isSelected: 'is-selected',\n  iconTag: 'ms-Icon--Tag',\n  group: 'ms-GroupedList-group',\n  isDropping: 'is-dropping',\n};\n\nconst beziers = {\n  easeOutCirc: 'cubic-bezier(0.075, 0.820, 0.165, 1.000)',\n  easeOutSine: 'cubic-bezier(0.390, 0.575, 0.565, 1.000)',\n  easeInBack: 'cubic-bezier(0.600, -0.280, 0.735, 0.045)',\n};\n\nconst DEFAULT_GROUP_HEADER_HEIGHT = 48;\nconst COMPACT_GROUP_HEADER_HEIGHT = 40;\n\nexport const getStyles = (props: IGroupHeaderStyleProps): IGroupHeaderStyles => {\n  const { theme, className, selected, isCollapsed, compact } = props;\n  // padding from the source to align GroupHeader title with DetailsRow's first cell.\n  const { cellLeftPadding } = DEFAULT_CELL_STYLE_PROPS;\n  const finalRowHeight = compact ? COMPACT_GROUP_HEADER_HEIGHT : DEFAULT_GROUP_HEADER_HEIGHT;\n\n  const { semanticColors, palette, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  const checkExpandResetStyles: IStyle = [\n    getFocusStyle(theme),\n    {\n      cursor: 'default',\n      background: 'none',\n      backgroundColor: 'transparent',\n      border: 'none',\n      padding: 0, // cancel default <button> padding\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      getFocusStyle(theme),\n      theme.fonts.medium,\n      {\n        // keep the border for height but color it so it's invisible.\n        borderBottom: `1px solid ${semanticColors.listBackground}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          ':hover': {\n            background: semanticColors.listItemBackgroundHovered,\n            color: semanticColors.actionLinkHovered,\n          },\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`:global(.${classNames.group}.${classNames.isDropping})`]: {\n            selectors: {\n              [`& > .${classNames.root} .${classNames.dropIcon}`]: {\n                transition:\n                  `transform ${AnimationVariables.durationValue4} ${beziers.easeOutCirc} ` +\n                  `opacity ${AnimationVariables.durationValue1} ${beziers.easeOutSine}`,\n                transitionDelay: AnimationVariables.durationValue3,\n                opacity: 1,\n                transform: `rotate(0.2deg) scale(1);`, // rotation prevents jittery motion in IE\n              },\n\n              [`.${classNames.check}`]: {\n                opacity: 0,\n              },\n            },\n          },\n        },\n      },\n      selected && [\n        classNames.isSelected,\n        {\n          background: semanticColors.listItemBackgroundChecked,\n          selectors: {\n            ':hover': {\n              background: semanticColors.listItemBackgroundCheckedHovered,\n            },\n            [`${classNames.check}`]: {\n              opacity: 1,\n            },\n          },\n        },\n      ],\n      compact && [classNames.compact, { border: 'none' }],\n      className,\n    ],\n    groupHeaderContainer: [\n      {\n        display: 'flex',\n        alignItems: 'center',\n        height: finalRowHeight,\n      },\n    ],\n    headerCount: [\n      {\n        padding: '0px 4px',\n      },\n    ],\n    check: [\n      classNames.check,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        // paddingTop and marginTop brought from the DetailsRow.styles.ts with explanation below.\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        opacity: 0,\n        width: CHECK_CELL_WIDTH,\n        height: finalRowHeight,\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n    expand: [\n      classNames.expand,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        width: EXPAND_BUTTON_WIDTH,\n        height: finalRowHeight,\n        color: selected ? palette.neutralPrimary : palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: selected ? palette.neutralQuaternary : palette.neutralLight,\n          },\n          ':active': {\n            backgroundColor: selected ? palette.neutralTertiaryAlt : palette.neutralQuaternaryAlt,\n          },\n        },\n      },\n    ],\n    expandIsCollapsed: [\n      isCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n              transformOrigin: '50% 50%',\n              transition: 'transform .1s linear',\n            },\n          ]\n        : {\n            transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n            transition: 'transform .1s linear',\n          },\n    ],\n    title: [\n      classNames.title,\n      {\n        paddingLeft: cellLeftPadding,\n        fontSize: compact ? fonts.medium.fontSize : fonts.mediumPlus.fontSize,\n        fontWeight: isCollapsed ? FontWeights.regular : FontWeights.semibold,\n        cursor: 'pointer',\n        outline: 0,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n      },\n    ],\n    dropIcon: [\n      classNames.dropIcon,\n      {\n        position: 'absolute',\n        left: -26,\n        fontSize: IconFontSizes.large,\n        color: palette.neutralSecondary,\n        transition:\n          `transform ${AnimationVariables.durationValue2} ${beziers.easeInBack}, ` +\n          `opacity ${AnimationVariables.durationValue4} ${beziers.easeOutSine}`,\n        opacity: 0,\n        transform: 'rotate(0.2deg) scale(0.65)', // rotation prevents jittery motion in IE\n        transformOrigin: '10px 10px',\n        selectors: {\n          [`:global(.${classNames.iconTag})`]: {\n            position: 'absolute',\n          },\n        },\n      },\n    ],\n  };\n};\n",
    "import * as React from 'react';\nimport { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles, SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\n\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\n\nexport class SpinnerBase extends React.Component<ISpinnerProps, any> {\n  public static defaultProps: ISpinnerProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom',\n  };\n\n  public render() {\n    // eslint-disable-next-line deprecation/deprecation\n    const { type, size, ariaLabel, ariaLive, styles, label, theme, className, labelPosition } = this.props;\n    const statusMessage = ariaLabel;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['size']);\n\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n    let styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      size: styleSize,\n      className,\n      labelPosition,\n    });\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div className={classNames.circle} />\n        {label && <div className={classNames.label}>{label}</div>}\n        {statusMessage && (\n          <div role=\"status\" aria-live={ariaLive}>\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{statusMessage}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n",
    "import { ISpinnerStyleProps, ISpinnerStyles, SpinnerSize } from './Spinner.types';\nimport {\n  hiddenContentStyle,\n  keyframes,\n  HighContrastSelector,\n  getGlobalClassNames,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\n\nconst GlobalClassNames = {\n  root: 'ms-Spinner',\n  circle: 'ms-Spinner-circle',\n  label: 'ms-Spinner-label',\n};\n\nconst spinAnimation = memoizeFunction(() =>\n  keyframes({\n    '0%': {\n      transform: 'rotate(0deg)',\n    },\n    '100%': {\n      transform: 'rotate(360deg)',\n    },\n  }),\n);\n\nexport const getStyles = (props: ISpinnerStyleProps): ISpinnerStyles => {\n  const { theme, size, className, labelPosition } = props;\n\n  const { palette } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },\n      labelPosition === 'top' && {\n        flexDirection: 'column-reverse',\n      },\n      labelPosition === 'right' && {\n        flexDirection: 'row',\n      },\n      labelPosition === 'left' && {\n        flexDirection: 'row-reverse',\n      },\n      className,\n    ],\n    circle: [\n      classNames.circle,\n      {\n        boxSizing: 'border-box',\n        borderRadius: '50%',\n        border: '1.5px solid ' + palette.themeLight,\n        borderTopColor: palette.themePrimary,\n        animationName: spinAnimation(),\n        animationDuration: '1.3s',\n        animationIterationCount: 'infinite',\n        animationTimingFunction: 'cubic-bezier(.53,.21,.29,.67)',\n        selectors: {\n          [HighContrastSelector]: {\n            borderTopColor: 'Highlight',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      size === SpinnerSize.xSmall && [\n        'ms-Spinner--xSmall',\n        {\n          width: 12,\n          height: 12,\n        },\n      ],\n      size === SpinnerSize.small && [\n        'ms-Spinner--small',\n        {\n          width: 16,\n          height: 16,\n        },\n      ],\n      size === SpinnerSize.medium && [\n        'ms-Spinner--medium',\n        {\n          width: 20,\n          height: 20,\n        },\n      ],\n      size === SpinnerSize.large && [\n        'ms-Spinner--large',\n        {\n          width: 28,\n          height: 28,\n        },\n      ],\n    ],\n    label: [\n      classNames.label,\n      theme.fonts.small,\n      {\n        color: palette.themePrimary,\n        margin: '8px 0 0',\n        textAlign: 'center',\n      },\n      labelPosition === 'top' && {\n        margin: '0 0 8px',\n      },\n      labelPosition === 'right' && {\n        margin: '0 0 0 8px',\n      },\n      labelPosition === 'left' && {\n        margin: '0 8px 0 0',\n      },\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n};\n",
    "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { SpinnerBase } from './Spinner.base';\nimport { getStyles } from './Spinner.styles';\nimport { ISpinnerProps, ISpinnerStyles, ISpinnerStyleProps } from './Spinner.types';\n\nexport const Spinner: React.FunctionComponent<ISpinnerProps> = styled<\n  ISpinnerProps,\n  ISpinnerStyleProps,\n  ISpinnerStyles\n>(SpinnerBase, getStyles, undefined, { scope: 'Spinner' });\n",
    "import * as React from 'react';\nimport { IProcessedStyleSet, ITheme } from '../../Styling';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n  private _id: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupHeaderProps,\n    previousState: IGroupHeaderState,\n  ): IGroupHeaderState {\n    if (nextProps.group) {\n      const newCollapsed = nextProps.group.isCollapsed;\n      const isGroupLoading = nextProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n\n      return {\n        ...previousState,\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      };\n    }\n\n    return previousState;\n  }\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this._id = getId('GroupHeader');\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel = 0,\n      viewport,\n      selectionMode,\n      loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderTitle = this._onRenderTitle,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      compact,\n      ariaPosInSet,\n      ariaSetSize,\n      useFastIcons,\n    } = this.props;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        onClick={this._onHeaderClick}\n        role=\"row\"\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        // aria-rowindex is omitted because the default calculated index\n        // is better than an incorrect declared index\n        data-is-focusable={true}\n        onKeyUp={this._onKeyUp}\n        aria-label={group.ariaLabel}\n        aria-labelledby={group.ariaLabel ? undefined : this._id}\n        aria-expanded={!this.state.isCollapsed}\n        aria-selected={canSelectGroup ? currentlySelected : undefined}\n        aria-level={groupLevel + 1}\n      >\n        <div className={this._classNames.groupHeaderContainer} role=\"presentation\">\n          {isSelectionCheckVisible ? (\n            <div role=\"gridcell\">\n              <button\n                data-is-focusable={false}\n                type=\"button\"\n                className={this._classNames.check}\n                role=\"checkbox\"\n                id={`${this._id}-check`}\n                aria-checked={currentlySelected}\n                aria-labelledby={`${this._id}-check ${this._id}`}\n                data-selection-toggle={true}\n                onClick={this._onToggleSelectGroupClick}\n                {...selectAllButtonProps}\n              >\n                {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n              </button>\n            </div>\n          ) : (\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={indentWidth} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon} role=\"presentation\">\n            <Icon iconName=\"Tag\" />\n          </div>\n          <div role=\"gridcell\">\n            <button\n              data-is-focusable={false}\n              type=\"button\"\n              className={this._classNames.expand}\n              onClick={this._onToggleClick}\n              aria-expanded={!this.state.isCollapsed}\n              {...expandButtonProps}\n            >\n              <Icon\n                className={this._classNames.expandIsCollapsed}\n                iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n              />\n            </button>\n          </div>\n\n          {onRenderTitle(this.props, this._onRenderTitle)}\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </div>\n      </div>\n    );\n  }\n\n  private _toggleCollapse = () => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n  };\n\n  private _onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { group, onGroupHeaderKeyUp } = this.props;\n\n    if (onGroupHeaderKeyUp) {\n      onGroupHeaderKeyUp(ev, group!);\n    }\n\n    if (!ev.defaultPrevented) {\n      const shouldOpen = this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n      const shouldClose = !this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, this.props.theme);\n      if (shouldClose || shouldOpen) {\n        this._toggleCollapse();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n\n  private _onToggleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._toggleCollapse();\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group, ariaColSpan } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.title} id={this._id} role=\"gridcell\" aria-colspan={ariaColSpan}>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </div>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n",
    "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupHeader.styles';\nimport { GroupHeaderBase } from './GroupHeader.base';\nimport { IGroupHeaderProps, IGroupHeaderStyles, IGroupHeaderStyleProps } from './GroupHeader.types';\nexport { IGroupHeaderProps };\n\nexport const GroupHeader: React.FunctionComponent<IGroupHeaderProps> = styled<\n  IGroupHeaderProps,\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles\n>(GroupHeaderBase, getStyles, undefined, {\n  scope: 'GroupHeader',\n});\n",
    "import { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nexport { IGroupShowAllProps };\n\nconst GlobalClassNames = {\n  root: 'ms-GroupShowAll',\n  link: 'ms-Link',\n};\n\nexport const getStyles = (props: IGroupShowAllStyleProps): IGroupShowAllStyles => {\n  const { theme } = props;\n  const { fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '10px 84px',\n        cursor: 'pointer',\n        selectors: {\n          [`.${classNames.link}`]: {\n            fontSize: fonts.small.fontSize,\n          },\n        },\n      },\n    ],\n  };\n};\n",
    "import * as React from 'react';\nimport { useCallback } from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { Link } from '../../Link';\nimport { IGroupShowAllProps } from './GroupShowAll.types';\nimport { IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\nimport { GroupSpacer } from './GroupSpacer';\n\nconst getClassNames = classNamesFunction<IGroupShowAllStyleProps, IGroupShowAllStyles>();\n\nexport const GroupShowAllBase: React.FunctionComponent<IGroupShowAllProps> = props => {\n  const { group, groupLevel, showAllLinkText = 'Show All', styles, theme, onToggleSummarize } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  const memoizedOnClick = useCallback(\n    (ev: React.MouseEvent<HTMLElement>) => {\n      onToggleSummarize!(group!);\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    },\n    [onToggleSummarize, group],\n  );\n\n  if (group) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer count={groupLevel!} />\n        <Link onClick={memoizedOnClick}>{showAllLinkText}</Link>\n      </div>\n    );\n  }\n\n  return null;\n};\n",
    "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupShowAll.styles';\nimport { GroupShowAllBase } from './GroupShowAll.base';\nimport { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\nexport { IGroupShowAllProps };\n\nexport const GroupShowAll: React.FunctionComponent<IGroupShowAllProps> = styled<\n  IGroupShowAllProps,\n  IGroupShowAllStyleProps,\n  IGroupShowAllStyles\n>(GroupShowAllBase, getStyles, undefined, { scope: 'GroupShowAll' });\n",
    "import { IGroupFooterStyleProps, IGroupFooterStyles } from './GroupFooter.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-groupFooter',\n};\n\nexport const getStyles = (props: IGroupFooterStyleProps): IGroupFooterStyles => {\n  const { theme, className } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      theme.fonts.medium,\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '5px 38px',\n      },\n      className,\n    ],\n  };\n};\n",
    "import * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { GroupSpacer } from './GroupSpacer';\nimport { IGroupFooterStyleProps, IGroupFooterStyles, IGroupFooterProps } from './GroupFooter.types';\nconst getClassNames = classNamesFunction<IGroupFooterStyleProps, IGroupFooterStyles>();\n\nexport const GroupFooterBase: React.FunctionComponent<IGroupFooterProps> = props => {\n  const { group, groupLevel, footerText, indentWidth, styles, theme } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  if (group && footerText) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n        {footerText}\n      </div>\n    );\n  }\n\n  return null;\n};\n",
    "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupFooter.styles';\nimport { GroupFooterBase } from './GroupFooter.base';\nimport { IGroupFooterProps, IGroupFooterStyles, IGroupFooterStyleProps } from './GroupFooter.types';\nexport { IGroupFooterProps };\n\nexport const GroupFooter: React.FunctionComponent<IGroupFooterProps> = styled<\n  IGroupFooterProps,\n  IGroupFooterStyleProps,\n  IGroupFooterStyles\n>(GroupFooterBase, getStyles, undefined, {\n  scope: 'GroupFooter',\n});\n",
    "import * as React from 'react';\nimport { IRefObject, IRectangle, IRenderFunction } from '../../Utilities';\nimport { List } from './List';\n\n/**\n * {@docCategory List}\n */\nexport const ScrollToMode = {\n  /**\n   * Does not make any consideration to where in the viewport the item should align to.\n   */\n  auto: 0 as 0,\n  /**\n   * Attempts to scroll the list so the top of the desired item is aligned with the top of the viewport.\n   */\n  top: 1 as 1,\n  /**\n   * Attempts to scroll the list so the bottom of the desired item is aligned with the bottom of the viewport.\n   */\n  bottom: 2 as 2,\n  /**\n   * Attempts to scroll the list so the desired item is in the exact center of the viewport.\n   */\n  center: 3 as 3,\n};\n\n/**\n * {@docCategory List}\n */\nexport type ScrollToMode = typeof ScrollToMode[keyof typeof ScrollToMode];\n\n/**\n * Props passed to the render override for the list root.\n * {@docCategory List}\n */\nexport interface IListOnRenderRootProps<T> {\n  /**\n   * The ref to be applied to the list root.\n   * The `List` uses this element to track scroll position and sizing.\n   */\n  rootRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list root element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered as the list surface element.\n   * This will have been rendered using `onRenderSurface`.\n   */\n  surfaceElement: JSX.Element | null;\n}\n\n/**\n * Props passed to the render override for the list surface.\n * {@docCategory List}\n */\nexport interface IListOnRenderSurfaceProps<T> {\n  /**\n   * A ref to be applied to the surface element.\n   * The `List` uses this element to track content size and focus.\n   */\n  surfaceRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list surface element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered representing all active pages.\n   */\n  pageElements: JSX.Element[];\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IList {\n  /**\n   * Force the component to update.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  getTotalListHeight?: () => number;\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines the behavior of the scrolling alignment. Defaults to auto.\n   *  Note: The scrollToMode requires the measureItem callback is provided to function.\n   */\n  scrollToIndex: (index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IListProps<T = any> extends React.HTMLAttributes<List<T> | HTMLDivElement> {\n  /**\n   * Optional callback to access the IList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IList>;\n\n  /** Optional classname to append to root list. */\n  className?: string;\n\n  /** Items to render. */\n  items?: T[];\n\n  /**\n   * Method to call when trying to render an item.\n   * @param item - The data associated with the cell that is being rendered.\n   * @param index - The index of the cell being rendered.\n   * @param isScrolling - True if the list is being scrolled. May be useful for rendering a placeholder if your cells\n   * are complex.\n   */\n  onRenderCell?: (item?: T, index?: number, isScrolling?: boolean) => React.ReactNode;\n\n  /**\n   * Optional callback invoked when List rendering completed.\n   * This can be on initial mount or on re-render due to scrolling.\n   * This method will be called as a result of changes in List pages (added or removed),\n   * and after ALL the changes complete.\n   * To track individual page Add / Remove use onPageAdded / onPageRemoved instead.\n   * @param pages - The current array of pages in the List.\n   */\n  onPagesUpdated?: (pages: IPage<T>[]) => void;\n\n  /** Optional callback for monitoring when a page is added. */\n  onPageAdded?: (page: IPage<T>) => void;\n\n  /** Optional callback for monitoring when a page is removed. */\n  onPageRemoved?: (page: IPage<T>) => void;\n\n  /** Optional callback to get the item key, to be used on render. */\n  getKey?: (item: T, index?: number) => string;\n\n  /**\n   * Called by the list to get the specification for a page.\n   * Use this method to provide an allocation of items per page,\n   * as well as an estimated rendered height for the page.\n   * The list will use this to optimize virtualization.\n   */\n  getPageSpecification?: (itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification;\n\n  /**\n   * Method called by the list to get how many items to render per page from specified index.\n   * In general, use `getPageSpecification` instead.\n   */\n  getItemCountForPage?: (itemIndex?: number, visibleRect?: IRectangle) => number;\n\n  /**\n   * Method called by the list to get the pixel height for a given page. By default, we measure the first\n   * page's height and default all other pages to that height when calculating the surface space. It is\n   * ideal to be able to adequately predict page heights in order to keep the surface space from jumping\n   * in pixels, which has been seen to cause browser performance issues.\n   * In general, use `getPageSpecification` instead.\n   */\n  getPageHeight?: (itemIndex?: number, visibleRect?: IRectangle, itemCount?: number) => number;\n\n  /**\n   * Method called by the list to derive the page style object. For spacer pages, the list will derive\n   * the height and passed in heights will be ignored.\n   */\n  getPageStyle?: (page: IPage<T>) => any;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render ahead.\n   * @defaultvalue 2\n   */\n  renderedWindowsAhead?: number;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render behind.\n   * @defaultvalue 2\n   */\n  renderedWindowsBehind?: number;\n\n  /** Index in items array to start rendering from. Defaults to 0. */\n  startIndex?: number;\n\n  /** Number of items to render. Defaults to items.length. */\n  renderCount?: number;\n\n  /**\n   * Boolean value to enable render page caching. This is an experimental performance optimization\n   * that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps<T>) => boolean;\n\n  /**\n   * The role to assign to the list root element.\n   * Use this to override the default assignment of 'list' to the root and 'listitem' to the cells.\n   */\n  role?: string;\n\n  /**\n   * Called when the List will render a page.\n   * Override this to control how cells are rendered within a page.\n   */\n  onRenderPage?: IRenderFunction<IPageProps<T>>;\n\n  /**\n   * Render override for the element at the root of the `List`.\n   * Use this to apply some final attributes or structure to the content\n   * each time the list is updated with new active pages or items.\n   */\n  onRenderRoot?: IRenderFunction<IListOnRenderRootProps<T>>;\n\n  /**\n   * Render override for the element representing the surface of the `List`.\n   * Use this to alter the structure of the rendered content if necessary on each update.\n   */\n  onRenderSurface?: IRenderFunction<IListOnRenderSurfaceProps<T>>;\n\n  /**\n   * An object which can be passed in as a fresh instance to 'force update' the list.\n   */\n  version?: {};\n\n  /**\n   * Whether to disable scroll state updates. This causes the isScrolling arg in onRenderCell to always be undefined.\n   * This is a performance optimization to let List skip a render cycle by not updating its scrolling state.\n   */\n  ignoreScrollingState?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPage<T = any> {\n  key: string;\n  items: T[] | undefined;\n  startIndex: number;\n  itemCount: number;\n  style: React.CSSProperties;\n  top: number;\n  height: number;\n  data?: any;\n  isSpacer?: boolean;\n  isVisible?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageProps<T = any>\n  extends React.HTMLAttributes<HTMLDivElement>,\n    React.ClassAttributes<HTMLDivElement> {\n  /**\n   * The role being assigned to the rendered page element by the list.\n   */\n  role?: string;\n  /**\n   * The allocation data for the page.\n   */\n  page: IPage<T>;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageSpecification {\n  /**\n   * The number of items to allocate to the page.\n   */\n  itemCount?: number;\n  /**\n   * The estimated pixel height of the page.\n   */\n  height?: number;\n  /**\n   * Data to pass through to the page when rendering.\n   */\n  data?: any;\n  /**\n   * The key to use when creating the page.\n   */\n  key?: string;\n}\n",
    "import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  IRectangle,\n  IRenderFunction,\n  css,\n  divProperties,\n  findIndex,\n  findScrollableParent,\n  getNativeProps,\n  getParent,\n  getWindow,\n  initializeComponentRef,\n} from '../../Utilities';\nimport {\n  IList,\n  IListProps,\n  IPage,\n  IPageProps,\n  ScrollToMode,\n  IListOnRenderSurfaceProps,\n  IListOnRenderRootProps,\n} from './List.types';\nimport { composeRenderFunction } from '../../Utilities';\n\nconst RESIZE_DELAY = 16;\nconst MIN_SCROLL_UPDATE_DELAY = 100;\nconst MAX_SCROLL_UPDATE_DELAY = 500;\nconst IDLE_DEBOUNCE_DELAY = 200;\n// The amount of time to wait before declaring that the list isn't scrolling\nconst DONE_SCROLLING_WAIT = 500;\nconst DEFAULT_ITEMS_PER_PAGE = 10;\nconst DEFAULT_PAGE_HEIGHT = 30;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst PAGE_KEY_PREFIX = 'page-';\nconst SPACER_KEY_PREFIX = 'spacer-';\n\nexport interface IListState<T = any> {\n  pages?: IPage<T>[];\n\n  /** The last versionstamp for  */\n  measureVersion?: number;\n  isScrolling?: boolean;\n  getDerivedStateFromProps(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T>;\n\n  pagesVersion?: {};\n}\n\ninterface IPageCacheItem<T> {\n  page: IPage<T>;\n  pageElement?: JSX.Element;\n}\n\ninterface IPageCache<T> {\n  [key: string]: IPageCacheItem<T>;\n}\n\nconst EMPTY_RECT = {\n  top: -1,\n  bottom: -1,\n  left: -1,\n  right: -1,\n  width: 0,\n  height: 0,\n};\n\n// Naming expensive measures so that they're named in profiles.\nconst _measurePageRect = (element: HTMLElement) => element.getBoundingClientRect();\nconst _measureSurfaceRect = _measurePageRect;\nconst _measureScrollRect = _measurePageRect;\n\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback\n * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if\n * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.\n * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\nexport class List<T = any> extends React.Component<IListProps<T>, IListState<T>> implements IList {\n  public static defaultProps = {\n    startIndex: 0,\n    onRenderCell: (item: any, index: number, containsFocus: boolean) => <>{(item && item.name) || ''}</>,\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND,\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _surface = React.createRef<HTMLDivElement>();\n  private _pageRefs: Record<string, unknown> = {};\n  private _async: Async;\n  private _events: EventGroup;\n  private _estimatedPageHeight: number;\n  private _totalEstimates: number;\n  private _cachedPageHeights: {\n    [key: string]: {\n      height: number;\n      measureVersion: number;\n    };\n  };\n  private _focusedIndex: number;\n  private _scrollElement: HTMLElement;\n  private _hasCompletedFirstRender: boolean;\n\n  // surface rect relative to window\n  private _surfaceRect: IRectangle | undefined;\n\n  // The visible rect that we're required to render given the current list state.\n  private _requiredRect: IRectangle | null;\n\n  // The visible rect that we're allowed to keep rendered. Pages outside of this rect will be removed.\n  private _allowedRect: IRectangle;\n\n  // The rect that is visible to the user\n  private _visibleRect: IRectangle | undefined;\n\n  // materialized rect around visible items, relative to surface\n  private _materializedRect: IRectangle | null;\n\n  private _requiredWindowsAhead: number;\n  private _requiredWindowsBehind: number;\n\n  private _measureVersion: number;\n  private _scrollHeight: number;\n  private _scrollTop: number;\n  private _pageCache: IPageCache<T>;\n\n  public static getDerivedStateFromProps<T = any>(\n    nextProps: IListProps<T>,\n    previousState: IListState<T>,\n  ): IListState<T> {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IListProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      pages: [],\n      isScrolling: false,\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    this._estimatedPageHeight = 0;\n    this._totalEstimates = 0;\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n\n    // Track the measure version for everything.\n    this._measureVersion = 0;\n\n    // Ensure that scrolls are lazy updated.\n    this._onAsyncScroll = this._async.debounce(this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {\n      leading: false,\n      maxWait: MAX_SCROLL_UPDATE_DELAY,\n    });\n\n    this._onAsyncIdle = this._async.debounce(this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {\n      leading: false,\n    });\n\n    this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n      leading: false,\n    });\n\n    this._onScrollingDone = this._async.debounce(this._onScrollingDone, DONE_SCROLLING_WAIT, {\n      leading: false,\n    });\n\n    this._cachedPageHeights = {};\n    this._estimatedPageHeight = 0;\n    this._focusedIndex = -1;\n    this._pageCache = {};\n  }\n\n  public get pageRefs(): Readonly<Record<string, unknown>> {\n    return this._pageRefs;\n  }\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\n   */\n  public scrollToIndex(\n    index: number,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode: ScrollToMode = ScrollToMode.auto,\n  ): void {\n    const startIndex = this.props.startIndex as number;\n    const renderCount = this._getRenderCount();\n    const endIndex = startIndex + renderCount;\n\n    const allowedRect = this._allowedRect;\n\n    let scrollTop = 0;\n\n    let itemsPerPage = 1;\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n\n      const pageHeight = pageSpecification.height;\n      itemsPerPage = pageSpecification.itemCount;\n\n      const requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;\n      if (requestedIndexIsInPage) {\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in\n        // just the given item, otherwise we'll only bring the page into view\n        if (measureItem && this._scrollElement) {\n          const scrollRect = _measureScrollRect(this._scrollElement);\n          const scrollWindow = {\n            top: this._scrollElement.scrollTop,\n            bottom: this._scrollElement.scrollTop + scrollRect.height,\n          };\n\n          // Adjust for actual item position within page\n          const itemPositionWithinPage = index - itemIndex;\n          for (let itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\n          }\n          const scrollBottom = scrollTop + measureItem(index);\n\n          // If scrollToMode is set to something other than auto, we always want to\n          // scroll the item into a specific position on the page.\n          switch (scrollToMode) {\n            case ScrollToMode.top:\n              this._scrollElement.scrollTop = scrollTop;\n              return;\n            case ScrollToMode.bottom:\n              this._scrollElement.scrollTop = scrollBottom - scrollRect.height;\n              return;\n            case ScrollToMode.center:\n              this._scrollElement.scrollTop = (scrollTop + scrollBottom - scrollRect.height) / 2;\n              return;\n            case ScrollToMode.auto:\n            default:\n              break;\n          }\n\n          const itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\n          if (itemIsFullyVisible) {\n            // Item is already visible, do nothing.\n            return;\n          }\n\n          const itemIsPartiallyAbove = scrollTop < scrollWindow.top;\n          const itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\n\n          if (itemIsPartiallyAbove) {\n            //  We will just scroll to 'scrollTop'\n            //  .------.   - scrollTop\n            //  |Item  |\n            //  | .----|-. - scrollWindow.top\n            //  '------' |\n            //    |      |\n            //    '------'\n          } else if (itemIsPartiallyBelow) {\n            //  Adjust scrollTop position to just bring in the element\n            // .------.  - scrollTop\n            // |      |\n            // | .------.\n            // '-|----' | - scrollWindow.bottom\n            //   | Item |\n            //   '------' - scrollBottom\n            scrollTop = scrollBottom - scrollRect.height;\n          }\n        }\n\n        this._scrollElement.scrollTop = scrollTop;\n        return;\n      }\n\n      scrollTop += pageHeight;\n    }\n  }\n\n  public getStartItemIndexInView(measureItem?: (itemIndex: number) => number): number {\n    const pages = this.state.pages || [];\n    for (const page of pages) {\n      const isPageVisible =\n        !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;\n      if (isPageVisible) {\n        if (!measureItem) {\n          const rowHeight = Math.floor(page.height / page.itemCount);\n          return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);\n        } else {\n          let totalRowHeight = 0;\n          for (let itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {\n            const rowHeight = measureItem(itemIndex);\n            if (\n              page.top + totalRowHeight <= this._scrollTop &&\n              this._scrollTop < page.top + totalRowHeight + rowHeight\n            ) {\n              return itemIndex;\n            } else {\n              totalRowHeight += rowHeight;\n            }\n          }\n        }\n      }\n    }\n    return 0;\n  }\n\n  public componentDidMount(): void {\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n    this._scrollElement = findScrollableParent(this._root.current) as HTMLElement;\n\n    this._events.on(window, 'resize', this._onAsyncResize);\n    if (this._root.current) {\n      this._events.on(this._root.current, 'focus', this._onFocus, true);\n    }\n    if (this._scrollElement) {\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IListProps, previousState: IListState<T>): void {\n    const finalProps = this.props;\n    const finalState = this.state;\n\n    if (this.state.pagesVersion !== previousState.pagesVersion) {\n      // If we weren't provided with the page height, measure the pages\n      if (!finalProps.getPageHeight) {\n        // If measured version is invalid since we've updated the DOM\n        const heightsChanged = this._updatePageMeasurements(finalState.pages!);\n\n        // On first render, we should re-measure so that we don't get a visual glitch.\n        if (heightsChanged) {\n          this._materializedRect = null;\n          if (!this._hasCompletedFirstRender) {\n            this._hasCompletedFirstRender = true;\n            this.setState(this._updatePages(finalProps, finalState));\n          } else {\n            this._onAsyncScroll();\n          }\n        } else {\n          // Enqueue an idle bump.\n          this._onAsyncIdle();\n        }\n      } else {\n        // Enqueue an idle bump\n        this._onAsyncIdle();\n      }\n\n      // Notify the caller that rendering the new pages has completed\n      if (finalProps.onPagesUpdated) {\n        finalProps.onPagesUpdated(finalState.pages as IPage<T>[]);\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n\n    delete this._scrollElement;\n  }\n\n  public shouldComponentUpdate(newProps: IListProps<T>, newState: IListState<T>): boolean {\n    const { pages: oldPages } = this.state;\n    const { pages: newPages } = newState;\n    let shouldComponentUpdate = false;\n\n    // Update if the page stops scrolling\n    if (!newState.isScrolling && this.state.isScrolling) {\n      return true;\n    }\n\n    if (newProps.version !== this.props.version) {\n      return true;\n    }\n\n    if (newProps.items === this.props.items && oldPages!.length === newPages!.length) {\n      for (let i = 0; i < oldPages!.length; i++) {\n        const oldPage = oldPages![i];\n        const newPage = newPages![i];\n\n        if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {\n          shouldComponentUpdate = true;\n          break;\n        }\n      }\n    } else {\n      shouldComponentUpdate = true;\n    }\n\n    return shouldComponentUpdate;\n  }\n\n  public forceUpdate(): void {\n    this._invalidatePageCache();\n    // Ensure that when the list is force updated we update the pages first before render.\n    this._updateRenderRects(this.props, this.state, true);\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n\n    super.forceUpdate();\n  }\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  public getTotalListHeight(): number {\n    return this._surfaceRect!.height;\n  }\n\n  public render(): JSX.Element | null {\n    const { className, role = 'list', onRenderSurface, onRenderRoot } = this.props;\n    const { pages = [] } = this.state;\n    const pageElements: JSX.Element[] = [];\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    for (const page of pages) {\n      pageElements.push(this._renderPage(page));\n    }\n\n    const finalOnRenderSurface = onRenderSurface\n      ? composeRenderFunction(onRenderSurface, this._onRenderSurface)\n      : this._onRenderSurface;\n\n    const finalOnRenderRoot = onRenderRoot\n      ? composeRenderFunction(onRenderRoot, this._onRenderRoot)\n      : this._onRenderRoot;\n\n    return finalOnRenderRoot({\n      rootRef: this._root,\n      pages,\n      surfaceElement: finalOnRenderSurface({\n        surfaceRef: this._surface,\n        pages,\n        pageElements,\n        divProps: {\n          role: 'presentation',\n          className: 'ms-List-surface',\n        },\n      }),\n      divProps: {\n        ...divProps,\n        className: css('ms-List', className),\n        role: pageElements.length > 0 ? role : undefined,\n      },\n    });\n  }\n\n  private _getDerivedStateFromProps = (nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> => {\n    if (\n      nextProps.items !== this.props.items ||\n      nextProps.renderCount !== this.props.renderCount ||\n      nextProps.startIndex !== this.props.startIndex ||\n      nextProps.version !== this.props.version\n    ) {\n      // We have received new items so we want to make sure that initially we only render a single window to\n      // fill the currently visible rect, and then later render additional windows.\n      this._resetRequiredWindows();\n      this._requiredRect = null;\n\n      this._measureVersion++;\n      this._invalidatePageCache();\n\n      return this._updatePages(nextProps, previousState);\n    }\n\n    return previousState;\n  };\n\n  private _shouldVirtualize(props: IListProps<T> = this.props): boolean {\n    const { onShouldVirtualize } = props;\n    return !onShouldVirtualize || onShouldVirtualize(props);\n  }\n\n  /**\n   * when props.items change or forceUpdate called, throw away cached pages\n   */\n  private _invalidatePageCache(): void {\n    this._pageCache = {};\n  }\n\n  private _renderPage(page: IPage<T>): JSX.Element {\n    const { usePageCache } = this.props;\n    let cachedPage;\n    // if usePageCache is set and cached page element can be found, just return cached page\n    if (usePageCache) {\n      cachedPage = this._pageCache[page.key];\n      if (cachedPage && cachedPage.pageElement) {\n        return cachedPage.pageElement;\n      }\n    }\n\n    const pageStyle = this._getPageStyle(page);\n\n    const { onRenderPage = this._onRenderPage } = this.props;\n\n    const pageElement = onRenderPage(\n      {\n        page: page,\n        className: 'ms-List-page',\n        key: page.key,\n        ref: (newRef: unknown) => {\n          this._pageRefs[page.key] = newRef;\n        },\n        style: pageStyle,\n        role: 'presentation',\n      },\n      this._onRenderPage,\n    );\n\n    // cache the first page for now since it is re-rendered a lot times unnecessarily.\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\n    if (usePageCache && page.startIndex === 0) {\n      this._pageCache[page.key] = {\n        page: page,\n        pageElement: pageElement,\n      };\n    }\n    return pageElement;\n  }\n\n  private _onRenderRoot = (props: IListOnRenderRootProps<T>): JSX.Element => {\n    const { rootRef, surfaceElement, divProps } = props;\n\n    return (\n      <div ref={rootRef} {...divProps}>\n        {surfaceElement}\n      </div>\n    );\n  };\n\n  private _onRenderSurface = (props: IListOnRenderSurfaceProps<T>): JSX.Element => {\n    const { surfaceRef, pageElements, divProps } = props;\n\n    return (\n      <div ref={surfaceRef} {...divProps}>\n        {pageElements}\n      </div>\n    );\n  };\n\n  /** Generate the style object for the page. */\n  private _getPageStyle(page: IPage<T>): React.StyleHTMLAttributes<HTMLDivElement> {\n    const { getPageStyle } = this.props;\n\n    return {\n      ...(getPageStyle ? getPageStyle(page) : {}),\n      ...(!page.items\n        ? {\n            height: page.height,\n          }\n        : {}),\n    };\n  }\n\n  private _onRenderPage = (pageProps: IPageProps<T>, defaultRender?: IRenderFunction<IPageProps<T>>): any => {\n    const { onRenderCell, role } = this.props;\n\n    const {\n      page: { items = [], startIndex },\n      ...divProps\n    } = pageProps;\n\n    // only assign list item role if no role is assigned\n    const cellRole = role === undefined ? 'listitem' : 'presentation';\n    const cells: React.ReactNode[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n      const index = startIndex + i;\n      const item = items[i];\n\n      let itemKey = this.props.getKey ? this.props.getKey(item, index) : item && (item as any).key;\n\n      if (itemKey === null || itemKey === undefined) {\n        itemKey = index;\n      }\n\n      cells.push(\n        <div\n          role={cellRole}\n          className={'ms-List-cell'}\n          key={itemKey}\n          data-list-index={index}\n          data-automationid=\"ListCell\"\n        >\n          {onRenderCell &&\n            onRenderCell(item, index, !this.props.ignoreScrollingState ? this.state.isScrolling : undefined)}\n        </div>,\n      );\n    }\n\n    return <div {...divProps}>{cells}</div>;\n  };\n\n  /** Track the last item index focused so that we ensure we keep it rendered. */\n  private _onFocus(ev: any): void {\n    let target = ev.target as HTMLElement;\n\n    while (target !== this._surface.current) {\n      const indexString = target.getAttribute('data-list-index');\n\n      if (indexString) {\n        this._focusedIndex = Number(indexString);\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  }\n\n  /**\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n   * we will call onAsyncIdle which will reset it back to it's correct value.\n   */\n  private _onScroll(): void {\n    if (!this.state.isScrolling && !this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: true });\n    }\n    this._resetRequiredWindows();\n    this._onScrollingDone();\n  }\n\n  private _resetRequiredWindows(): void {\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n  }\n\n  /**\n   * Debounced method to asynchronously update the visible region on a scroll event.\n   */\n  private _onAsyncScroll(): void {\n    this._updateRenderRects(this.props, this.state);\n\n    // Only update pages when the visible rect falls outside of the materialized rect.\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect as IRectangle, this._materializedRect)) {\n      this.setState(this._updatePages(this.props, this.state));\n    } else {\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n    }\n  }\n\n  /**\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\n   * either, we increase the amount we render and re-evaluate.\n   */\n  private _onAsyncIdle(): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = this.props;\n    const { _requiredWindowsAhead: requiredWindowsAhead, _requiredWindowsBehind: requiredWindowsBehind } = this;\n    const windowsAhead = Math.min(renderedWindowsAhead as number, requiredWindowsAhead + 1);\n    const windowsBehind = Math.min(renderedWindowsBehind as number, requiredWindowsBehind + 1);\n\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n      // console.log('idling', windowsBehind, windowsAhead);\n\n      this._requiredWindowsAhead = windowsAhead;\n      this._requiredWindowsBehind = windowsBehind;\n      this._updateRenderRects(this.props, this.state);\n      this.setState(this._updatePages(this.props, this.state));\n    }\n\n    if (renderedWindowsAhead! > windowsAhead || renderedWindowsBehind! > windowsBehind) {\n      // Async increment on next tick.\n      this._onAsyncIdle();\n    }\n  }\n\n  /**\n   * Function to call when the list is done scrolling.\n   * This function is debounced.\n   */\n  private _onScrollingDone(): void {\n    if (!this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: false });\n    }\n  }\n\n  private _onAsyncResize(): void {\n    this.forceUpdate();\n  }\n\n  private _updatePages(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> {\n    // console.log('updating pages');\n\n    if (!this._requiredRect) {\n      this._updateRenderRects(nextProps, previousState);\n    }\n\n    const newListState = this._buildPages(nextProps, previousState);\n    const oldListPages = previousState.pages!;\n\n    this._notifyPageChanges(oldListPages, newListState.pages!, this.props);\n\n    return {\n      ...previousState,\n      ...newListState,\n      pagesVersion: {},\n    };\n  }\n\n  /**\n   * Notify consumers that the rendered pages have changed\n   * @param oldPages - The old pages\n   * @param newPages - The new pages\n   * @param props - The props to use\n   */\n  private _notifyPageChanges(oldPages: IPage<T>[], newPages: IPage<T>[], props: IListProps<T>): void {\n    const { onPageAdded, onPageRemoved } = props;\n\n    if (onPageAdded || onPageRemoved) {\n      const renderedIndexes: {\n        [index: number]: IPage<T>;\n      } = {};\n\n      for (const page of oldPages) {\n        if (page.items) {\n          renderedIndexes[page.startIndex] = page;\n        }\n      }\n\n      for (const page of newPages) {\n        if (page.items) {\n          if (!renderedIndexes[page.startIndex]) {\n            this._onPageAdded(page);\n          } else {\n            delete renderedIndexes[page.startIndex];\n          }\n        }\n      }\n\n      for (const index in renderedIndexes) {\n        if (renderedIndexes.hasOwnProperty(index)) {\n          this._onPageRemoved(renderedIndexes[index]);\n        }\n      }\n    }\n  }\n\n  private _updatePageMeasurements(pages: IPage<T>[]): boolean {\n    let heightChanged = false;\n\n    // when not in virtualize mode, we render all the items without page measurement\n    if (!this._shouldVirtualize()) {\n      return heightChanged;\n    }\n\n    for (let i = 0; i < pages.length; i++) {\n      const page = pages[i];\n\n      if (page.items) {\n        heightChanged = this._measurePage(page) || heightChanged;\n      }\n    }\n\n    return heightChanged;\n  }\n\n  /**\n   * Given a page, measure its dimensions, update cache.\n   * @returns True if the height has changed.\n   */\n  private _measurePage(page: IPage<T>): boolean {\n    let hasChangedHeight = false;\n    const pageElement = this._pageRefs[page.key] as HTMLElement;\n    const cachedHeight = this._cachedPageHeights[page.startIndex];\n\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\n\n    if (\n      pageElement &&\n      this._shouldVirtualize() &&\n      (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)\n    ) {\n      const newClientRect = {\n        width: pageElement.clientWidth,\n        height: pageElement.clientHeight,\n      };\n\n      if (newClientRect.height || newClientRect.width) {\n        hasChangedHeight = page.height !== newClientRect.height;\n\n        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n\n        page.height = newClientRect.height;\n\n        this._cachedPageHeights[page.startIndex] = {\n          height: newClientRect.height,\n          measureVersion: this._measureVersion,\n        };\n\n        this._estimatedPageHeight = Math.round(\n          (this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1),\n        );\n\n        this._totalEstimates++;\n      }\n    }\n\n    return hasChangedHeight;\n  }\n\n  /** Called when a page has been added to the DOM. */\n  private _onPageAdded(page: IPage<T>): void {\n    const { onPageAdded } = this.props;\n\n    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageAdded) {\n      onPageAdded(page);\n    }\n  }\n\n  /** Called when a page has been removed from the DOM. */\n  private _onPageRemoved(page: IPage<T>): void {\n    const { onPageRemoved } = this.props;\n\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageRemoved) {\n      onPageRemoved(page);\n    }\n  }\n\n  /** Build up the pages that should be rendered. */\n  private _buildPages(props: IListProps<T>, state: IListState<T>): IListState<T> {\n    let { renderCount } = props;\n    const { items, startIndex, getPageHeight } = props;\n\n    renderCount = this._getRenderCount(props);\n\n    const materializedRect = { ...EMPTY_RECT };\n    const pages: IPage<T>[] = [];\n\n    let itemsPerPage = 1;\n    let pageTop = 0;\n    let currentSpacer = null;\n    const focusedIndex = this._focusedIndex;\n    const endIndex = startIndex! + renderCount;\n    const shouldVirtualize = this._shouldVirtualize(props);\n\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\n    // So we should default to rendering only the first page so that we can get information.\n    // However if the user provides a measure function, let's just assume they know the right heights.\n    const isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\n\n    const allowedRect = this._allowedRect;\n\n    for (let itemIndex = startIndex!; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n      const pageHeight = pageSpecification.height;\n      const pageData = pageSpecification.data;\n      const key = pageSpecification.key;\n\n      itemsPerPage = pageSpecification.itemCount;\n\n      const pageBottom = pageTop + pageHeight - 1;\n\n      const isPageRendered =\n        findIndex(state.pages as IPage<T>[], (page: IPage<T>) => !!page.items && page.startIndex === itemIndex) > -1;\n      const isPageInAllowedRange = !allowedRect || (pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom!);\n      const isPageInRequiredRange =\n        !this._requiredRect || (pageBottom >= this._requiredRect.top && pageTop <= this._requiredRect.bottom!);\n      const isPageVisible =\n        (!isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered))) || !shouldVirtualize;\n      const isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;\n      const isFirstPage = itemIndex === startIndex;\n\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +\n      // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n\n      // Only render whats visible, focused, or first page,\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\n      if (isPageVisible || isPageFocused || isFirstPage) {\n        if (currentSpacer) {\n          pages.push(currentSpacer);\n          currentSpacer = null;\n        }\n\n        const itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n        const newPage = this._createPage(\n          key,\n          items!.slice(itemIndex, itemIndex + itemsInPage),\n          itemIndex,\n          undefined,\n          undefined,\n          pageData,\n        );\n\n        newPage.top = pageTop;\n        newPage.height = pageHeight;\n        if (this._visibleRect && this._visibleRect.bottom) {\n          newPage.isVisible = pageBottom >= this._visibleRect.top && pageTop <= this._visibleRect.bottom;\n        }\n\n        pages.push(newPage);\n\n        if (isPageInRequiredRange && this._allowedRect) {\n          _mergeRect(materializedRect, {\n            top: pageTop,\n            bottom: pageBottom,\n            height: pageHeight,\n            left: allowedRect.left,\n            right: allowedRect.right,\n            width: allowedRect.width,\n          });\n        }\n      } else {\n        if (!currentSpacer) {\n          currentSpacer = this._createPage(\n            SPACER_KEY_PREFIX + itemIndex,\n            undefined,\n            itemIndex,\n            0,\n            undefined,\n            pageData,\n            true /*isSpacer*/,\n          );\n        }\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n        currentSpacer.itemCount += itemsPerPage;\n      }\n      pageTop += pageBottom - pageTop + 1;\n\n      // in virtualized mode, we render need to render first page then break and measure,\n      // otherwise, we render all items without measurement to make rendering fast\n      if (isFirstRender && shouldVirtualize) {\n        break;\n      }\n    }\n\n    if (currentSpacer) {\n      currentSpacer.key = SPACER_KEY_PREFIX + 'end';\n      pages.push(currentSpacer);\n    }\n\n    this._materializedRect = materializedRect;\n\n    // console.log('materialized: ', materializedRect);\n    return {\n      ...state,\n      pages: pages,\n      measureVersion: this._measureVersion,\n    };\n  }\n\n  private _getPageSpecification(\n    itemIndex: number,\n    visibleRect: IRectangle,\n  ): {\n    // These return values are now no longer optional.\n    itemCount: number;\n    height: number;\n    data?: any;\n    key?: string;\n  } {\n    const { getPageSpecification } = this.props;\n    if (getPageSpecification) {\n      const pageData = getPageSpecification(itemIndex, visibleRect);\n\n      const { itemCount = this._getItemCountForPage(itemIndex, visibleRect) } = pageData;\n\n      const { height = this._getPageHeight(itemIndex, visibleRect, itemCount) } = pageData;\n\n      return {\n        itemCount: itemCount,\n        height: height,\n        data: pageData.data,\n        key: pageData.key,\n      };\n    } else {\n      const itemCount = this._getItemCountForPage(itemIndex, visibleRect);\n\n      return {\n        itemCount: itemCount,\n        height: this._getPageHeight(itemIndex, visibleRect, itemCount),\n      };\n    }\n  }\n\n  /**\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n   * cached height, or estimated page height, or default page height.\n   */\n  private _getPageHeight(itemIndex: number, visibleRect: IRectangle, itemsPerPage: number): number {\n    if (this.props.getPageHeight) {\n      return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);\n    } else {\n      const cachedHeight = this._cachedPageHeights[itemIndex];\n\n      return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;\n    }\n  }\n\n  private _getItemCountForPage(itemIndex: number, visibileRect: IRectangle): number {\n    const itemsPerPage = this.props.getItemCountForPage\n      ? this.props.getItemCountForPage(itemIndex, visibileRect)\n      : DEFAULT_ITEMS_PER_PAGE;\n\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n  }\n\n  private _createPage(\n    pageKey: string | undefined,\n    items: any[] | undefined,\n    startIndex: number = -1,\n    count: number = items ? items.length : 0,\n    style: React.CSSProperties = {},\n    data?: any,\n    isSpacer?: boolean,\n  ): IPage<T> {\n    pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;\n    const cachedPage = this._pageCache[pageKey];\n    if (cachedPage && cachedPage.page) {\n      return cachedPage.page;\n    }\n\n    return {\n      key: pageKey,\n      startIndex: startIndex,\n      itemCount: count,\n      items: items,\n      style: style,\n      top: 0,\n      height: 0,\n      data: data,\n      isSpacer: isSpacer || false,\n    };\n  }\n\n  private _getRenderCount(props?: IListProps<T>): number {\n    const { items, startIndex, renderCount } = props || this.props;\n\n    return renderCount === undefined ? (items ? items.length - startIndex! : 0) : renderCount;\n  }\n\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n  private _updateRenderRects(props: IListProps<T>, state: IListState<T>, forceUpdate?: boolean): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = props;\n    const { pages } = state;\n    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\n    if (!this._shouldVirtualize(props)) {\n      return;\n    }\n\n    let surfaceRect = this._surfaceRect || { ...EMPTY_RECT };\n    const scrollHeight = this._scrollElement && this._scrollElement.scrollHeight;\n    const scrollTop = this._scrollElement ? this._scrollElement.scrollTop : 0;\n\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n    // This needs to be called to recalculate when new pages should be loaded.\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\n    if (\n      this._surface.current &&\n      (forceUpdate ||\n        !pages ||\n        !this._surfaceRect ||\n        !scrollHeight ||\n        scrollHeight !== this._scrollHeight ||\n        Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)\n    ) {\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);\n      this._scrollTop = scrollTop;\n    }\n\n    // If the scroll height has changed, something in the container likely resized and\n    // we should redo the page heights incase their content resized.\n    if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {\n      this._measureVersion++;\n    }\n\n    this._scrollHeight = scrollHeight;\n\n    // If the surface is above the container top or below the container bottom, or if this is not the first\n    // render return empty rect.\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n    // used to calculate the width of the list items.\n    const visibleTop = Math.max(0, -surfaceRect.top);\n    const win = getWindow(this._root.current);\n    const visibleRect = {\n      top: visibleTop,\n      left: surfaceRect.left,\n      bottom: visibleTop + win!.innerHeight,\n      right: surfaceRect.right,\n      width: surfaceRect.width,\n      height: win!.innerHeight,\n    };\n\n    // The required/allowed rects are adjusted versions of the visible rect.\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind!, renderedWindowsAhead!);\n\n    // store the visible rect for later use.\n    this._visibleRect = visibleRect;\n  }\n}\n\nfunction _expandRect(rect: IRectangle, pagesBefore: number, pagesAfter: number): IRectangle {\n  const top = rect.top - pagesBefore * rect.height;\n  const height = rect.height + (pagesBefore + pagesAfter) * rect.height;\n\n  return {\n    top: top,\n    bottom: top + height,\n    height: height,\n    left: rect.left,\n    right: rect.right,\n    width: rect.width,\n  };\n}\n\nfunction _isContainedWithin(innerRect: IRectangle, outerRect: IRectangle): boolean {\n  return (\n    innerRect.top >= outerRect.top &&\n    innerRect.left >= outerRect.left &&\n    innerRect.bottom! <= outerRect.bottom! &&\n    innerRect.right! <= outerRect.right!\n  );\n}\n\nfunction _mergeRect(targetRect: IRectangle, newRect: IRectangle): IRectangle {\n  targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;\n  targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;\n  targetRect.bottom =\n    newRect.bottom! > targetRect.bottom! || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;\n  targetRect.right = newRect.right! > targetRect.right! || targetRect.right === -1 ? newRect.right : targetRect.right;\n  targetRect.width = targetRect.right! - targetRect.left + 1;\n  targetRect.height = targetRect.bottom! - targetRect.top + 1;\n\n  return targetRect;\n}\n",
    "import * as React from 'react';\nimport { IGroup, IGroupDividerProps, IGroupRenderProps, IGroupedListStyles } from './GroupedList.types';\nimport { IGroupHeaderProps } from './GroupHeader.types';\nimport { IGroupFooterProps } from './GroupFooter.types';\nimport { IGroupShowAllProps } from './GroupShowAll.types';\n\nimport { IDragDropContext, IDragDropEvents, IDragDropHelper } from '../../utilities/dragdrop/index';\n\nimport { IProcessedStyleSet } from '../../Styling';\nimport { initializeComponentRef, IRenderFunction, IDisposable, css, getId, EventGroup } from '../../Utilities';\n\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/index';\n\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\n\nimport { List } from '../../List';\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\nimport { IViewport } from '../../utilities/decorators/withViewport';\nimport { IListProps } from '../List/index';\n\nexport interface IGroupedListSectionProps extends React.ClassAttributes<GroupedListSection> {\n  /** GroupedList resolved class names */\n  groupedListClassNames?: IProcessedStyleSet<IGroupedListStyles>;\n\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: () => void;\n\n  /** Whether to render in compact mode */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item rows and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Optional grouping instructions. */\n  groupIndex?: number;\n\n  /** Optional group nesting level. */\n  groupNestingDepth?: number;\n\n  /** Optional grouping instructions. */\n  group?: IGroup;\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional list props to pass to list renderer.  */\n  listProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Information to pass in to the group Show All footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Override for rendering the group header. */\n  onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Override for rendering the group Show All link. */\n  onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /** Override for rendering the group footer. */\n  onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n}\n\nexport interface IGroupedListSectionState {\n  isDropping?: boolean;\n  isSelected?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class GroupedListSection extends React.Component<IGroupedListSectionProps, IGroupedListSectionState> {\n  private _root = React.createRef<HTMLDivElement>();\n  private _list = React.createRef<List>();\n  private _subGroupRefs: Record<string, GroupedListSection | null> = {};\n  private _id: string;\n  private _events: EventGroup;\n\n  private _dragDropSubscription: IDisposable;\n  private _droppingClassName: string = '';\n\n  constructor(props: IGroupedListSectionProps) {\n    super(props);\n\n    const { selection, group } = props;\n\n    initializeComponentRef(this);\n\n    this._id = getId('GroupedListSection');\n\n    this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false,\n    };\n\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount(): void {\n    const { dragDropHelper, selection } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getGroupDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  }\n\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\n    if (\n      this.props.group !== previousProps.group ||\n      this.props.groupIndex !== previousProps.groupIndex ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getGroupDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      getGroupItemLimit,\n      group,\n      groupIndex,\n      headerProps,\n      showAllProps,\n      footerProps,\n      viewport,\n      selectionMode,\n      onRenderGroupHeader = this._onRenderGroupHeader,\n      onRenderGroupShowAll = this._onRenderGroupShowAll,\n      onRenderGroupFooter = this._onRenderGroupFooter,\n      onShouldVirtualize,\n      groupedListClassNames,\n      groups,\n      compact,\n      listProps = {},\n    } = this.props;\n    const { isSelected } = this.state;\n    const renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    const isShowAllVisible =\n      group &&\n      !group.children &&\n      !group.isCollapsed &&\n      !group.isShowingAll &&\n      (group.count > renderCount || group.hasMoreData);\n    const hasNestedGroups = group && group.children && group.children.length > 0;\n\n    const { version } = listProps;\n\n    const dividerProps: IGroupDividerProps = {\n      group,\n      groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected,\n      selected: isSelected,\n      viewport,\n      selectionMode,\n      groups,\n      compact,\n    };\n\n    const ariaControlsProps: IGroupHeaderProps = {\n      groupedListId: this._id,\n      ariaSetSize: groups ? groups.length : undefined,\n      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined,\n    };\n\n    const groupHeaderProps: IGroupHeaderProps = { ...headerProps, ...dividerProps, ...ariaControlsProps };\n    const groupShowAllProps: IGroupShowAllProps = { ...showAllProps, ...dividerProps };\n    const groupFooterProps: IGroupFooterProps = { ...footerProps, ...dividerProps };\n\n    const isDraggable: boolean =\n      !!this.props.dragDropHelper &&\n      this._getGroupDragDropOptions().canDrag!(group) &&\n      !!this.props.dragDropEvents!.canDragGroups;\n\n    return (\n      <div\n        ref={this._root}\n        {...(isDraggable && { draggable: true })}\n        className={css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName())}\n        role=\"presentation\"\n      >\n        {onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader)}\n        {group && group.isCollapsed ? null : hasNestedGroups ? (\n          <List\n            role=\"presentation\"\n            ref={this._list}\n            items={group ? group.children : []}\n            onRenderCell={this._renderSubGroup}\n            getItemCountForPage={this._returnOne}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            id={this._id}\n          />\n        ) : (\n          this._onRenderGroup(renderCount)\n        )}\n        {group && group.isCollapsed\n          ? null\n          : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll)}\n        {onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)}\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this.forceListUpdate();\n  }\n\n  public forceListUpdate() {\n    const { group } = this.props;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        const subGroupCount = group.children.length;\n\n        for (let i = 0; i < subGroupCount; i++) {\n          const subGroup = this._list.current.pageRefs['subGroup_' + String(i)] as GroupedListSection;\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      const subGroup = this._subGroupRefs['subGroup_' + String(0)];\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  }\n\n  private _onRenderGroupHeader = (props: IGroupHeaderProps): JSX.Element => {\n    return <GroupHeader {...props} />;\n  };\n\n  private _onRenderGroupShowAll = (props: IGroupShowAllProps): JSX.Element => {\n    return <GroupShowAll {...props} />;\n  };\n\n  private _onRenderGroupFooter = (props: IGroupFooterProps): JSX.Element => {\n    return <GroupFooter {...props} />;\n  };\n\n  private _onSelectionChange(): void {\n    const { group, selection } = this.props;\n    if (selection && group) {\n      const isSelected = selection.isRangeSelected(group.startIndex, group.count);\n\n      if (isSelected !== this.state.isSelected) {\n        this.setState({ isSelected });\n      }\n    }\n  }\n\n  private _onRenderGroupCell(\n    onRenderCell: any,\n    groupNestingDepth: number | undefined,\n  ): (item: any, itemIndex: number | undefined) => React.ReactNode {\n    return (item: any, itemIndex: number | undefined): React.ReactNode => {\n      return onRenderCell(groupNestingDepth, item, itemIndex);\n    };\n  }\n\n  private _onRenderGroup(renderCount: number): JSX.Element {\n    const { group, items, onRenderCell, listProps, groupNestingDepth, onShouldVirtualize, groupProps } = this.props;\n    const count = group && !group.isShowingAll ? group.count : items.length;\n    const startIndex = group ? group.startIndex : 0;\n\n    return (\n      <List\n        role={groupProps && groupProps.role ? groupProps.role : 'rowgroup'}\n        aria-label={group?.name}\n        items={items}\n        onRenderCell={this._onRenderGroupCell(onRenderCell, groupNestingDepth)}\n        ref={this._list}\n        renderCount={Math.min(count, renderCount)}\n        startIndex={startIndex}\n        onShouldVirtualize={onShouldVirtualize}\n        id={this._id}\n        {...listProps}\n      />\n    );\n  }\n\n  private _renderSubGroup = (subGroup: IGroup, subGroupIndex: number): JSX.Element | null => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      getGroupItemLimit,\n      groupNestingDepth,\n      groupProps,\n      items,\n      headerProps,\n      showAllProps,\n      footerProps,\n      listProps,\n      onRenderCell,\n      selection,\n      selectionMode,\n      viewport,\n      onRenderGroupHeader,\n      onRenderGroupShowAll,\n      onRenderGroupFooter,\n      onShouldVirtualize,\n      group,\n      compact,\n    } = this.props;\n\n    const nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n\n    return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (\n      <GroupedListSection\n        ref={ref => (this._subGroupRefs['subGroup_' + subGroupIndex] = ref)}\n        key={this._getGroupKey(subGroup, subGroupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={getGroupItemLimit}\n        group={subGroup}\n        groupIndex={subGroupIndex}\n        groupNestingDepth={nestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        items={items}\n        listProps={listProps}\n        onRenderCell={onRenderCell}\n        selection={selection}\n        selectionMode={selectionMode}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onRenderGroupHeader={onRenderGroupHeader}\n        onRenderGroupShowAll={onRenderGroupShowAll}\n        onRenderGroupFooter={onRenderGroupFooter}\n        onShouldVirtualize={onShouldVirtualize}\n        groups={group ? group.children : []}\n        compact={compact}\n      />\n    ) : null;\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getGroupKey(group: IGroup, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  }\n\n  /**\n   * collect all the data we need to enable drag/drop for a group\n   */\n  private _getGroupDragDropOptions = (): IDragDropOptions => {\n    const { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: -1,\n      context: { data: group, index: groupIndex, isGroup: true },\n      updateDropState: this._updateDroppingState,\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDrop: dragDropEvents!.onDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      onDragEnter: dragDropEvents!.onDragEnter,\n      onDragLeave: dragDropEvents!.onDragLeave,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n    return options as IDragDropOptions;\n  };\n\n  /**\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * @param newValue - new isDropping state value\n   * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newIsDropping: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, group } = this.props;\n\n    if (isDropping !== newIsDropping) {\n      if (isDropping) {\n        if (dragDropEvents && dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(group, event);\n        }\n      } else {\n        if (dragDropEvents && dragDropEvents.onDragEnter) {\n          this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n        }\n      }\n\n      this.setState({ isDropping: newIsDropping });\n    }\n  };\n\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  private _getDroppingClassName(): string {\n    let { isDropping } = this.state;\n    const { group, groupedListClassNames } = this.props;\n\n    isDropping = !!(group && isDropping);\n\n    return css(\n      isDropping && this._droppingClassName,\n      isDropping && DEFAULT_DROPPING_CSS_CLASS,\n      isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping,\n    );\n  }\n}\n",
    "import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup,\n  IGroupedListStyleProps,\n  IGroupedListStyles,\n} from './GroupedList.types';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List, ScrollToMode, IListProps } from '../../List';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { IGroupHeaderProps } from './GroupHeader';\nimport { IGroupShowAllProps } from './GroupShowAll.styles';\nimport { IGroupFooterProps } from './GroupFooter.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\nconst { rowHeight: ROW_HEIGHT, compactRowHeight: COMPACT_ROW_HEIGHT } = DEFAULT_ROW_HEIGHTS;\n\nexport interface IGroupedListState {\n  selectionMode?: IGroupedListProps['selectionMode'];\n  compact?: IGroupedListProps['compact'];\n  groups?: IGroup[];\n  items?: IGroupedListProps['items'];\n  listProps?: IGroupedListProps['listProps'];\n  version: {};\n}\n\nexport class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false,\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupedListStyles>;\n\n  private _list = React.createRef<List>();\n\n  private _isSomeGroupExpanded: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupedListProps,\n    previousState: IGroupedListState,\n  ): IGroupedListState {\n    const { groups, selectionMode, compact, items, listProps } = nextProps;\n    const listVersion = listProps && listProps.version;\n\n    let nextState = {\n      ...previousState,\n      selectionMode,\n      compact,\n      groups,\n      listProps,\n    };\n\n    let shouldForceUpdates = false;\n\n    const previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (\n      listVersion !== previousListVersion ||\n      items !== previousState.items ||\n      groups !== previousState.groups ||\n      selectionMode !== previousState.selectionMode ||\n      compact !== previousState.compact\n    ) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  }\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    const { listProps: { version = {} } = {} } = props;\n\n    this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version,\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current!.getStartItemIndexInView() || 0;\n  }\n\n  public componentDidMount() {\n    const { groupProps, groups = [] } = this.props;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      usePageCache,\n      onShouldVirtualize,\n      theme,\n      role = 'treegrid',\n      styles,\n      compact,\n      focusZoneProps = {},\n      rootListProps = {},\n    } = this.props;\n    const { groups, version } = this.state;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      compact: compact,\n    });\n\n    const { shouldEnterInnerZone = this._isInnerZoneKeystroke } = focusZoneProps;\n\n    return (\n      <FocusZone\n        direction={FocusZoneDirection.vertical}\n        data-automationid=\"GroupedList\"\n        data-is-scrollable=\"false\"\n        role=\"presentation\"\n        {...focusZoneProps}\n        shouldEnterInnerZone={shouldEnterInnerZone}\n        className={css(this._classNames.root, focusZoneProps.className)}\n      >\n        {!groups ? (\n          this._renderGroup(undefined, 0)\n        ) : (\n          <List\n            ref={this._list}\n            role={role}\n            items={groups}\n            onRenderCell={this._renderGroup}\n            getItemCountForPage={this._returnOne}\n            getPageHeight={this._getPageHeight}\n            getPageSpecification={this._getPageSpecification}\n            usePageCache={usePageCache}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            {...rootListProps}\n          />\n        )}\n      </FocusZone>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups = [] } = this.state;\n    const { groupProps } = this.props;\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  private _setGroupsCollapsedState(groups: IGroup[], isCollapsed: boolean): void {\n    for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  }\n\n  private _renderGroup = (group: IGroup | undefined, groupIndex: number): React.ReactNode => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport,\n      onShouldVirtualize,\n      groups,\n      compact,\n    } = this.props;\n\n    // override group header/footer props as needed\n    const dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize,\n    };\n\n    const headerProps: IGroupHeaderProps = { ...groupProps!.headerProps, ...dividerProps };\n    const showAllProps: IGroupShowAllProps = { ...groupProps!.showAllProps, ...dividerProps };\n    const footerProps: IGroupFooterProps = { ...groupProps!.footerProps, ...dividerProps };\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\n      return null;\n    }\n\n    const finalListProps: IListProps = {\n      ...(listProps || {}),\n      version: this.state.version,\n    };\n\n    return (\n      <GroupedListSection\n        key={this._getGroupKey(group, groupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={groupProps && groupProps.getGroupItemLimit}\n        group={group}\n        groupIndex={groupIndex}\n        groupNestingDepth={groupNestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        listProps={finalListProps}\n        items={items}\n        onRenderCell={onRenderCell}\n        onRenderGroupHeader={groupProps!.onRenderHeader}\n        onRenderGroupShowAll={groupProps!.onRenderShowAll}\n        onRenderGroupFooter={groupProps!.onRenderFooter}\n        selectionMode={selectionMode}\n        selection={selection}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onShouldVirtualize={onShouldVirtualize}\n        groupedListClassNames={this._classNames}\n        groups={groups}\n        compact={compact}\n      />\n    );\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getDefaultGroupItemLimit = (group: IGroup): number => {\n    return group.count;\n  };\n\n  private _getGroupItemLimit = (group: IGroup): number => {\n    const { groupProps } = this.props;\n    const getGroupItemLimit =\n      groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : this._getDefaultGroupItemLimit;\n\n    return getGroupItemLimit(group);\n  };\n\n  private _getGroupHeight = (group: IGroup): number => {\n    const rowHeight = this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n\n    return rowHeight + (group.isCollapsed ? 0 : rowHeight * this._getGroupItemLimit(group));\n  };\n\n  private _getPageHeight: IListProps['getPageHeight'] = (itemIndex: number) => {\n    const { groups } = this.state;\n    const { getGroupHeight = this._getGroupHeight } = this.props;\n    const pageGroup = groups && groups[itemIndex];\n\n    if (pageGroup) {\n      return getGroupHeight(pageGroup, itemIndex);\n    } else {\n      return 0;\n    }\n  };\n\n  private _getGroupKey(group: IGroup | undefined, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onToggleCollapse = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n\n  private _onToggleSelectGroup = (group: IGroup): void => {\n    const { selection, selectionMode } = this.props;\n\n    if (group && selection && selectionMode === SelectionMode.multiple) {\n      selection.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  private _isInnerZoneKeystroke = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n  };\n\n  private _forceListUpdates(groups?: IGroup[]): void {\n    this.setState({\n      version: {},\n    });\n  }\n\n  private _onToggleSummarize = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  };\n\n  private _getPageSpecification = (\n    itemIndex: number,\n  ): {\n    key?: string;\n  } => {\n    const groups = this.state.groups;\n    const pageGroup = groups && groups[itemIndex];\n    return {\n      key: pageGroup && pageGroup.key,\n    };\n  };\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(\n      groups &&\n      groups.some(group => (group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed))\n    );\n  }\n\n  private _updateIsSomeGroupExpanded(): void {\n    const { groups } = this.state;\n    const { onGroupExpandStateChanged } = this.props;\n\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n",
    "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupedList.styles';\nimport { GroupedListBase } from './GroupedList.base';\nimport { IGroupedListProps, IGroupedListStyles, IGroupedListStyleProps } from './GroupedList.types';\nexport { IGroupedListProps };\n\nexport const GroupedList: React.FunctionComponent<IGroupedListProps> = styled<\n  IGroupedListProps,\n  IGroupedListStyleProps,\n  IGroupedListStyles\n>(GroupedListBase, getStyles, undefined, {\n  scope: 'GroupedList',\n});\n",
    "import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { findScrollableParent, getRect, getWindow, Async, EventGroup } from '../../Utilities';\n\n/**\n * Viewport rectangle dimensions.\n *\n * {@docCategory DetailsList}\n */\nexport interface IViewport {\n  /**\n   * Width in pixels.\n   */\n  width: number;\n  /**\n   * Height in pixels.\n   */\n  height: number;\n}\n\nexport interface IWithViewportState {\n  viewport?: IViewport;\n}\n\n/**\n * Props interface for the withViewport component.\n *\n * {@docCategory DetailsList}\n */\nexport interface IWithViewportProps {\n  /**\n   * Whether or not `withViewport` should disable its viewport measurements, effectively making this decorator\n   * pass-through with no impact on the rendered component.\n   *\n   * Since `withViewport` measures the `viewport` on mount, after each React update, and in response to events,\n   * it may cause a component which does not currently need this information due to its configuration to re-render\n   * too often. `skipViewportMeasures` may be toggled on and off based on current state, and will suspend and resume\n   * measurement as-needed.\n   *\n   * For example, when this wraps `DetailsList`, set `skipViewportMeasures` to `true` when the `layoutMode` is\n   * `fixedColumns`, since the `DetailsList` does not use the viewport size in any calculations.\n   *\n   * In addition, consider setting `skipViewportMeasures` to `true` when running within a React test renderer, to avoid\n   * direct DOM dependencies.\n   */\n\n  skipViewportMeasures?: boolean;\n  /**\n   * Whether or not to explicitly disable usage of the `ResizeObserver` in favor of a `'resize'` event on `window`,\n   * even if the browser supports `ResizeObserver`. This may be necessary if use of `ResizeObserver` results in too\n   * many re-renders of the wrapped component due to the frequency at which events are fired.\n   *\n   * This has no impact if `skipViewportMeasures` is `true`, as no viewport measurement strategy is used.\n   */\n  disableResizeObserver?: boolean;\n\n  /**\n   * Whether or not `withViewport` will delay before first measuring the viewport size.\n   * Setting this will delay measurement by the same amount as the debounce for resizing the window.\n   * This is useful for giving the child of the viewport time to render before measuring.\n   *\n   * This is an opt-in setting as existing systems have a dependency on immediate measurement for performance.\n   * @default false\n   */\n  delayFirstMeasure?: boolean;\n}\n\nconst RESIZE_DELAY = 500;\nconst MAX_RESIZE_ATTEMPTS = 3;\n\n/**\n * A decorator to update decorated component on viewport or window resize events.\n *\n * @param ComposedComponent decorated React component reference.\n */\nexport function withViewport<TProps extends { viewport?: IViewport }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  return class WithViewportComponent extends BaseDecorator<TProps, IWithViewportState> {\n    private _root = React.createRef<HTMLDivElement>();\n    private _resizeAttempts: number;\n    private _viewportResizeObserver: any;\n    private _async: Async;\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n\n      this._async = new Async(this);\n      this._events = new EventGroup(this);\n      this._resizeAttempts = 0;\n\n      this.state = {\n        viewport: {\n          width: 0,\n          height: 0,\n        },\n      };\n    }\n\n    public componentDidMount(): void {\n      const { delayFirstMeasure, disableResizeObserver, skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n        leading: false,\n      });\n\n      if (!skipViewportMeasures) {\n        if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n          this._registerResizeObserver();\n        } else {\n          this._events.on(win, 'resize', this._onAsyncResize);\n        }\n\n        if (delayFirstMeasure) {\n          this._async.setTimeout(() => {\n            this._updateViewport();\n          }, RESIZE_DELAY);\n        } else {\n          this._updateViewport();\n        }\n      }\n    }\n\n    public componentDidUpdate(previousProps: TProps) {\n      const { skipViewportMeasures: previousSkipViewportMeasures } = previousProps as IWithViewportProps;\n      const { disableResizeObserver, skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      if (skipViewportMeasures !== previousSkipViewportMeasures) {\n        if (!skipViewportMeasures) {\n          if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n            if (!this._viewportResizeObserver) {\n              this._registerResizeObserver();\n            }\n          } else {\n            this._events.on(win, 'resize', this._onAsyncResize);\n          }\n\n          this._updateViewport();\n        } else {\n          this._unregisterResizeObserver();\n          this._events.off(win, 'resize', this._onAsyncResize);\n        }\n      }\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n      this._async.dispose();\n      this._unregisterResizeObserver();\n    }\n\n    public render(): JSX.Element {\n      const { viewport } = this.state;\n      const newViewport = viewport!.width > 0 && viewport!.height > 0 ? viewport : undefined;\n\n      return (\n        <div className=\"ms-Viewport\" ref={this._root} style={{ minWidth: 1, minHeight: 1 }}>\n          <ComposedComponent ref={this._updateComposedComponentRef} viewport={newViewport} {...(this.props as any)} />\n        </div>\n      );\n    }\n\n    public forceUpdate(): void {\n      this._updateViewport(true);\n    }\n\n    private _onAsyncResize(): void {\n      this._updateViewport();\n    }\n\n    private _isResizeObserverAvailable(): boolean {\n      const win = getWindow(this._root.current);\n\n      return win && (win as any).ResizeObserver;\n    }\n\n    private _registerResizeObserver = () => {\n      const win = getWindow(this._root.current);\n\n      this._viewportResizeObserver = new (win as any).ResizeObserver(this._onAsyncResize);\n      this._viewportResizeObserver.observe(this._root.current);\n    };\n\n    private _unregisterResizeObserver = () => {\n      if (this._viewportResizeObserver) {\n        this._viewportResizeObserver.disconnect();\n        delete this._viewportResizeObserver;\n      }\n    };\n\n    /* Note: using lambda here because decorators don't seem to work in decorators. */\n    private _updateViewport = (withForceUpdate?: boolean) => {\n      const { viewport } = this.state;\n      const viewportElement = this._root.current;\n      const scrollElement = findScrollableParent(viewportElement) as HTMLElement;\n      const scrollRect = getRect(scrollElement);\n      const clientRect = getRect(viewportElement);\n      const updateComponent = () => {\n        if (withForceUpdate && this._composedComponentInstance) {\n          this._composedComponentInstance.forceUpdate();\n        }\n      };\n\n      const isSizeChanged =\n        (clientRect && clientRect.width) !== viewport!.width || (scrollRect && scrollRect.height) !== viewport!.height;\n\n      if (isSizeChanged && this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {\n        this._resizeAttempts++;\n        this.setState(\n          {\n            viewport: {\n              width: clientRect.width,\n              height: scrollRect.height,\n            },\n          },\n          () => {\n            this._updateViewport(withForceUpdate);\n          },\n        );\n      } else {\n        this._resizeAttempts = 0;\n        updateComponent();\n      }\n    };\n  };\n}\n",
    "import { IGroup } from '../../components/GroupedList/GroupedList.types';\r\n\r\n/**\r\n * Takes an array of groups and returns a count of the groups and all descendant groups.\r\n * @param groups - The array of groups to count.\r\n */\r\nexport const GetGroupCount = (groups: IGroup[] | undefined): number => {\r\n  let total = 0;\r\n\r\n  if (groups) {\r\n    const remainingGroups = [...groups];\r\n    let currentGroup: IGroup;\r\n\r\n    while (remainingGroups && remainingGroups.length > 0) {\r\n      ++total;\r\n\r\n      currentGroup = remainingGroups.pop() as IGroup;\r\n\r\n      if (currentGroup && currentGroup.children) {\r\n        remainingGroups.push(...currentGroup.children);\r\n      }\r\n    }\r\n  }\r\n\r\n  return total;\r\n};\r\n",
    "import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  IRenderFunction,\n  classNamesFunction,\n  memoizeFunction,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n  ColumnDragEndLocation,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport {\n  IDetailsHeader,\n  SelectAllVisibility,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport { IFocusZone, FocusZone, FocusZoneDirection, IFocusZoneProps } from '../../FocusZone';\nimport { IObjectWithKey, ISelection, Selection, SelectionMode, SelectionZone } from '../../utilities/selection/index';\n\nimport { DragDropHelper } from '../../utilities/dragdrop/DragDropHelper';\nimport { IGroupedList, GroupedList, IGroupDividerProps, IGroupRenderProps } from '../../GroupedList';\nimport { List, IListProps, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction, getId } from '@uifabric/utilities';\nimport { useConst } from '@uifabric/react-hooks';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n  getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\ntype IDetailsListInnerProps = Omit<IDetailsListProps, 'selection'> &\n  IDetailsListState & {\n    selection: ISelection;\n    dragDropHelper: DragDropHelper | undefined;\n    rootRef: React.RefObject<HTMLDivElement>;\n    listRef: React.RefObject<List>;\n    groupedListRef: React.RefObject<IGroupedList>;\n    focusZoneRef: React.RefObject<IFocusZone>;\n    headerRef: React.RefObject<IDetailsHeader>;\n    selectionZoneRef: React.RefObject<SelectionZone>;\n    onGroupExpandStateChanged: (isSomeGroupExpanded: boolean) => void;\n    onColumnIsSizingChanged: (column: IColumn, isSizing: boolean) => void;\n    onRowDidMount: (row: DetailsRowBase) => void;\n    onRowWillUnmount: (row: DetailsRowBase) => void;\n    onColumnResized: (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number) => void;\n    onColumnAutoResized: (column: IColumn, columnIndex: number) => void;\n    onToggleCollapse: (collapsed: boolean) => void;\n    onActiveRowChanged: (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;\n    onBlur: (event: React.FocusEvent<HTMLElement>) => void;\n    onRenderDefaultRow: (detailsRowProps: IDetailsRowProps) => JSX.Element;\n  };\n\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nconst DetailsListInner: React.ComponentType<IDetailsListInnerProps> = (\n  props: IDetailsListInnerProps,\n): JSX.Element | null => {\n  const { selection } = props;\n\n  const {\n    ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn,\n    className,\n    checkboxVisibility,\n    compact,\n    constrainMode,\n    dragDropEvents,\n    groups,\n    groupProps,\n    indentWidth,\n    items,\n    isPlaceholderData,\n    isHeaderVisible,\n    layoutMode,\n    onItemInvoked,\n    onItemContextMenu,\n    onColumnHeaderClick,\n    onColumnHeaderContextMenu,\n    selectionMode = selection.mode,\n    selectionPreservedOnEmptyClick,\n    selectionZoneProps,\n    ariaLabel,\n    ariaLabelForGrid,\n    rowElementEventMap,\n    shouldApplyApplicationRole = false,\n    getKey,\n    listProps,\n    usePageCache,\n    onShouldVirtualize,\n    viewport,\n    minimumPixelsForDrag,\n    getGroupHeight,\n    styles,\n    theme,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    onRenderCheckbox,\n    useFastIcons,\n    dragDropHelper,\n    adjustedColumns,\n    isCollapsed,\n    isSizing,\n    isSomeGroupExpanded,\n    version,\n    rootRef,\n    listRef,\n    focusZoneRef,\n    columnReorderOptions,\n    groupedListRef,\n    headerRef,\n    onGroupExpandStateChanged,\n    onColumnIsSizingChanged,\n    onRowDidMount,\n    onRowWillUnmount,\n    disableSelectionZone,\n    onColumnResized,\n    onColumnAutoResized,\n    onToggleCollapse,\n    onActiveRowChanged,\n    onBlur,\n    rowElementEventMap: eventsToRegister,\n    onRenderMissingItem,\n    onRenderItemColumn,\n    getCellValueKey,\n    getRowAriaLabel,\n    getRowAriaDescribedBy,\n    checkButtonAriaLabel,\n    checkButtonGroupAriaLabel,\n    checkboxCellClassName,\n    useReducedRowRenderer,\n    enableUpdateAnimations,\n    enterModalSelectionOnTouch,\n    onRenderDefaultRow,\n    selectionZoneRef,\n  } = props;\n\n  const defaultRole = 'grid';\n  const role = props.role ? props.role : defaultRole;\n\n  const rowId = getId('row');\n\n  const groupNestingDepth = getGroupNestingDepth(groups);\n\n  const additionalListProps = React.useMemo((): IListProps => {\n    return {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version,\n      ...listProps,\n    };\n  }, [isSizing, getKey, version, listProps]);\n\n  let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    let isCollapsedGroupSelectVisible =\n      groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  const defaultOnRenderDetailsHeader = React.useCallback(\n    (detailsHeaderProps: IDetailsHeaderProps): JSX.Element | null => {\n      return <DetailsHeader {...detailsHeaderProps} />;\n    },\n    [],\n  );\n\n  const defaultOnRenderDetailsFooter = React.useCallback((): JSX.Element | null => {\n    return null;\n  }, []);\n\n  const propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n\n  const onRenderDetailsHeader = React.useMemo(() => {\n    return propsOnRenderDetailsHeader\n      ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)\n      : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n\n  const propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n\n  const onRenderDetailsFooter = React.useMemo(() => {\n    return propsOnRenderDetailsFooter\n      ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)\n      : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n\n  const detailsFooterProps = React.useMemo((): IDetailsFooterProps => {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth,\n      selection,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }, [\n    adjustedColumns,\n    groupNestingDepth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    indentWidth,\n    cellStyleProps,\n  ]);\n\n  const columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n\n  const onColumnDragEnd = React.useCallback(\n    (\n      {\n        dropLocation,\n      }: {\n        dropLocation?: ColumnDragEndLocation;\n      },\n      event: MouseEvent,\n    ): void => {\n      let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n      if (columnReorderOnDragEnd) {\n        if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n          finalDropLocation = dropLocation;\n        } else if (rootRef.current) {\n          const clientRect = rootRef.current.getBoundingClientRect();\n          if (\n            event.clientX > clientRect.left &&\n            event.clientX < clientRect.right &&\n            event.clientY > clientRect.top &&\n            event.clientY < clientRect.bottom\n          ) {\n            finalDropLocation = ColumnDragEndLocation.surface;\n          }\n        }\n        columnReorderOnDragEnd(finalDropLocation);\n      }\n    },\n    [columnReorderOnDragEnd, rootRef],\n  );\n\n  const columnReorderProps = React.useMemo((): IColumnReorderHeaderProps | undefined => {\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd,\n      };\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n\n  const rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  const colCount =\n    (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +\n    (adjustedColumns ? adjustedColumns.length : 0) +\n    (groups ? 1 : 0);\n\n  const classNames = React.useMemo(() => {\n    return getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n\n  const onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n\n  const finalOnRenderDetailsGroupFooter = React.useMemo(() => {\n    return onRenderDetailsGroupFooter\n      ? (groupFooterProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...groupFooterProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n  }, [\n    onRenderDetailsGroupFooter,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n\n  const finalOnRenderDetailsGroupHeader = React.useMemo(() => {\n    return onRenderDetailsGroupHeader\n      ? (groupHeaderProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          const { ariaPosInSet, ariaSetSize } = groupHeaderProps;\n\n          return onRenderDetailsGroupHeader(\n            {\n              ...groupHeaderProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n              ariaColSpan: adjustedColumns.length,\n              ariaPosInSet: undefined,\n              ariaSetSize: undefined,\n              ariaRowCount: ariaSetSize ? ariaSetSize + (isHeaderVisible ? 1 : 0) : undefined,\n              ariaRowIndex: ariaPosInSet ? ariaPosInSet + (isHeaderVisible ? 1 : 0) : undefined,\n            },\n            defaultRender,\n          );\n        }\n      : (groupHeaderProps: IGroupDividerProps, defaultRender: IRenderFunction<IGroupDividerProps>) => {\n          const { ariaPosInSet, ariaSetSize } = groupHeaderProps;\n\n          return defaultRender({\n            ...groupHeaderProps,\n            ariaColSpan: adjustedColumns.length,\n            ariaPosInSet: undefined,\n            ariaSetSize: undefined,\n            ariaRowCount: ariaSetSize ? ariaSetSize + (isHeaderVisible ? 1 : 0) : undefined,\n            ariaRowIndex: ariaPosInSet ? ariaPosInSet + (isHeaderVisible ? 1 : 0) : undefined,\n          });\n        };\n  }, [\n    onRenderDetailsGroupHeader,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    isHeaderVisible,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const finalGroupProps = React.useMemo((): IGroupRenderProps | undefined => {\n    return {\n      ...groupProps,\n      role: role === defaultRole ? 'rowgroup' : 'presentation',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n      // pass through custom group header checkbox label\n      headerProps: {\n        ...groupProps?.headerProps,\n        selectAllButtonProps: {\n          'aria-label': checkButtonGroupAriaLabel,\n          ...groupProps?.headerProps?.selectAllButtonProps,\n        },\n      },\n    };\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n\n  const sumColumnWidths = useConst(() =>\n    memoizeFunction((columns: IColumn[]) => {\n      let totalWidth: number = 0;\n\n      columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n      return totalWidth;\n    }),\n  );\n\n  const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n\n  const rowWidth = React.useMemo(() => {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n\n  const onRenderCell = React.useCallback(\n    (nestingDepth: number, item: any, index: number): React.ReactNode => {\n      const finalOnRenderRow = props.onRenderRow\n        ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow)\n        : onRenderDefaultRow;\n\n      const rowRole = role === defaultRole ? undefined : 'presentation';\n\n      const rowProps: IDetailsRowProps = {\n        item: item,\n        itemIndex: index,\n        flatIndexOffset: isHeaderVisible ? 2 : 1,\n        compact,\n        columns: adjustedColumns,\n        groupNestingDepth: nestingDepth,\n        id: `${rowId}-${index}`,\n        selectionMode,\n        selection,\n        onDidMount: onRowDidMount,\n        onWillUnmount: onRowWillUnmount,\n        onRenderItemColumn,\n        getCellValueKey,\n        eventsToRegister,\n        dragDropEvents,\n        dragDropHelper,\n        viewport,\n        checkboxVisibility,\n        collapseAllVisibility,\n        getRowAriaLabel,\n        getRowAriaDescribedBy,\n        checkButtonAriaLabel,\n        checkboxCellClassName,\n        useReducedRowRenderer,\n        indentWidth,\n        cellStyleProps,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        enableUpdateAnimations,\n        rowWidth,\n        useFastIcons,\n        role: rowRole,\n      };\n\n      if (!item) {\n        if (onRenderMissingItem) {\n          return onRenderMissingItem(index, rowProps);\n        }\n\n        return null;\n      }\n\n      return finalOnRenderRow(rowProps);\n    },\n    [\n      compact,\n      adjustedColumns,\n      selectionMode,\n      selection,\n      rowId,\n      onRowDidMount,\n      onRowWillUnmount,\n      onRenderItemColumn,\n      getCellValueKey,\n      eventsToRegister,\n      dragDropEvents,\n      dragDropHelper,\n      viewport,\n      checkboxVisibility,\n      collapseAllVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      isHeaderVisible,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n      onRenderDefaultRow,\n      onRenderMissingItem,\n      props.onRenderRow,\n      rowWidth,\n      role,\n    ],\n  );\n\n  const onRenderListCell = React.useCallback(\n    (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n      return (item: any, itemIndex: number): React.ReactNode => {\n        return onRenderCell(nestingDepth, item, itemIndex);\n      };\n    },\n    [onRenderCell],\n  );\n\n  const isRightArrow = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n    },\n    [theme],\n  );\n\n  const focusZoneProps: IFocusZoneProps = {\n    componentRef: focusZoneRef,\n    className: classNames.focusZone,\n    direction: FocusZoneDirection.vertical,\n    shouldEnterInnerZone: isRightArrow,\n    onActiveElementChanged: onActiveRowChanged,\n    shouldRaiseClicks: false,\n    onBlur: onBlur,\n  };\n\n  const list = groups ? (\n    <GroupedList\n      focusZoneProps={focusZoneProps}\n      componentRef={groupedListRef}\n      groups={groups}\n      groupProps={finalGroupProps}\n      items={items}\n      onRenderCell={onRenderCell}\n      role=\"presentation\"\n      selection={selection}\n      selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n      dragDropEvents={dragDropEvents}\n      dragDropHelper={dragDropHelper}\n      eventsToRegister={rowElementEventMap}\n      listProps={additionalListProps}\n      onGroupExpandStateChanged={onGroupExpandStateChanged}\n      usePageCache={usePageCache}\n      onShouldVirtualize={onShouldVirtualize}\n      getGroupHeight={getGroupHeight}\n      compact={compact}\n    />\n  ) : (\n    <FocusZone {...focusZoneProps}>\n      <List\n        ref={listRef}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    </FocusZone>\n  );\n\n  const onHeaderKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      if (ev.which === KeyCodes.down) {\n        if (focusZoneRef.current && focusZoneRef.current.focus()) {\n          // select the first item in list after down arrow key event\n          // only if nothing was selected; otherwise start with the already-selected item\n          if (selection.getSelectedIndices().length === 0) {\n            selection.setIndexSelected(0, true, false);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [selection, focusZoneRef],\n  );\n\n  const onContentKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      if (ev.which === KeyCodes.up && !ev.altKey) {\n        if (headerRef.current && headerRef.current.focus()) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [headerRef],\n  );\n\n  return (\n    // If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n    // with JAWS.\n    <div\n      ref={rootRef}\n      className={classNames.root}\n      data-automationid=\"DetailsList\"\n      data-is-scrollable=\"false\"\n      aria-label={ariaLabel}\n      {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n    >\n      <FocusRects />\n      <div\n        role={role}\n        aria-label={ariaLabelForGrid}\n        aria-rowcount={isPlaceholderData ? -1 : rowCount}\n        aria-colcount={colCount}\n        aria-readonly=\"true\"\n        aria-busy={isPlaceholderData}\n      >\n        <div onKeyDown={onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n          {isHeaderVisible &&\n            onRenderDetailsHeader(\n              {\n                componentRef: headerRef,\n                selectionMode: selectionMode,\n                layoutMode: layoutMode!,\n                selection: selection,\n                columns: adjustedColumns,\n                onColumnClick: onColumnHeaderClick,\n                onColumnContextMenu: onColumnHeaderContextMenu,\n                onColumnResized: onColumnResized,\n                onColumnIsSizingChanged: onColumnIsSizingChanged,\n                onColumnAutoResized: onColumnAutoResized,\n                groupNestingDepth: groupNestingDepth,\n                isAllCollapsed: isCollapsed,\n                onToggleCollapseAll: onToggleCollapse,\n                ariaLabel: ariaLabelForListHeader,\n                ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n                ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n                selectAllVisibility: selectAllVisibility,\n                collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                viewport: viewport,\n                columnReorderProps: columnReorderProps,\n                minimumPixelsForDrag: minimumPixelsForDrag,\n                cellStyleProps: cellStyleProps,\n                checkboxVisibility,\n                indentWidth,\n                onRenderDetailsCheckbox: onRenderCheckbox,\n                rowWidth: sumColumnWidths(adjustedColumns),\n                useFastIcons,\n              },\n              onRenderDetailsHeader,\n            )}\n        </div>\n        <div onKeyDown={onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n          {!disableSelectionZone ? (\n            <SelectionZone\n              ref={selectionZoneRef}\n              selection={selection}\n              selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n              selectionMode={selectionMode}\n              onItemInvoked={onItemInvoked}\n              onItemContextMenu={onItemContextMenu}\n              enterModalOnTouch={enterModalSelectionOnTouch}\n              {...(selectionZoneProps || {})}\n            >\n              {list}\n            </SelectionZone>\n          ) : (\n            list\n          )}\n        </div>\n        {onRenderDetailsFooter({\n          ...detailsFooterProps,\n        })}\n      </div>\n    </div>\n  );\n};\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <DetailsListInner\n        {...this.props}\n        {...this.state}\n        selection={this._selection}\n        dragDropHelper={this._dragDropHelper}\n        rootRef={this._root}\n        listRef={this._list}\n        groupedListRef={this._groupedList}\n        focusZoneRef={this._focusZone}\n        headerRef={this._header}\n        selectionZoneRef={this._selectionZone}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        onColumnIsSizingChanged={this._onColumnIsSizingChanged}\n        onRowDidMount={this._onRowDidMount}\n        onRowWillUnmount={this._onRowWillUnmount}\n        onColumnResized={this._onColumnResized}\n        onColumnAutoResized={this._onColumnAutoResized}\n        onToggleCollapse={this._onToggleCollapse}\n        onActiveRowChanged={this._onActiveRowChanged}\n        onBlur={this._onBlur}\n        onRenderDefaultRow={this._onRenderRow}\n      />\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _getDerivedStateFromProps = (\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState => {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (nextProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    let nextState = previousState;\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = nextProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      nextState = {\n        ...nextState,\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      };\n    }\n\n    if (!this.props.disableSelectionZone && nextProps.items !== items) {\n      this._selection.setItems(nextProps.items, shouldResetSelection);\n    }\n\n    if (\n      nextProps.checkboxVisibility !== checkboxVisibility ||\n      nextProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      nextProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    nextState = {\n      ...nextState,\n      ...this._adjustColumns(nextProps, nextState, true),\n    };\n\n    if (nextProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      nextProps.groupProps &&\n      nextProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      nextState = {\n        ...nextState,\n        isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed,\n      };\n    }\n\n    if (nextProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = nextProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: nextProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing: isSizing });\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IDetailsListState {\n    const adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    return {\n      ...previousState,\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth,\n    };\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState | undefined,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = previousState ? previousState.lastWidth : -1;\n    const lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility, flexMargin, skipViewportMeasures } = this.props;\n    let remainingWidth = viewportWidth - (flexMargin || 0);\n    let sumProportionalWidth = 0;\n\n    newColumns.forEach((col: IColumn) => {\n      if (skipViewportMeasures || !col.flexGrow) {\n        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n      } else {\n        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n        sumProportionalWidth += col.flexGrow;\n      }\n\n      remainingWidth -= getPaddedWidth(col, props, true);\n    });\n\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    remainingWidth -= rowCheckWidth + groupExpandWidth;\n\n    let widthFraction = remainingWidth / sumProportionalWidth;\n\n    // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n    if (!skipViewportMeasures) {\n      newColumns.forEach((column: IColumn) => {\n        const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n        if (newColumn.flexGrow && newColumn.maxWidth) {\n          const fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n          const shrinkWidth = fullWidth - newColumn.maxWidth;\n\n          if (shrinkWidth > 0) {\n            remainingWidth += shrinkWidth;\n            sumProportionalWidth -= (shrinkWidth / (fullWidth - newColumn.minWidth)) * newColumn.flexGrow;\n          }\n        }\n      });\n    }\n\n    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      // Delay computation until viewport width is available.\n      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n        return newColumn;\n      }\n\n      if (!newColumn.calculatedWidth) {\n        if (!skipViewportMeasures && newColumn.flexGrow) {\n          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n        } else {\n          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n        }\n      }\n\n      return newColumn;\n    });\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    let minimumWidth = 0;\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const baseColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n      };\n\n      const newColumn = {\n        ...baseColumn,\n        ...this._columnOverrides[column.key],\n      };\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {\n        minimumWidth += getPaddedWidth(baseColumn, props);\n      }\n\n      totalWidth += getPaddedWidth(newColumn, props);\n\n      return newColumn;\n    });\n\n    if (minimumWidth > availableWidth) {\n      return adjustedColumns;\n    }\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex >= 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this.setState({\n      ...this._adjustColumns(this.props, this.state, true, resizingColumnIndex),\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, props: IDetailsListProps, paddingOnly?: true): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    (paddingOnly ? 0 : column.calculatedWidth!) +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n\nfunction getGroupNestingDepth(groups: IDetailsListProps['groups']): number {\n  let level = 0;\n  let groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n",
    "import { IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsList',\n  compact: 'ms-DetailsList--Compact',\n  contentWrapper: 'ms-DetailsList-contentWrapper',\n  headerWrapper: 'ms-DetailsList-headerWrapper',\n  isFixed: 'is-fixed',\n  isHorizontalConstrained: 'is-horizontalConstrained',\n  listCell: 'ms-List-cell',\n};\n\nexport const getStyles = (props: IDetailsListStyleProps): IDetailsListStyles => {\n  const { theme, className, isHorizontalConstrained, compact, isFixed } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        color: semanticColors.listText,\n        selectors: {\n          [`& .${classNames.listCell}`]: {\n            minHeight: 38,\n            wordBreak: 'break-word',\n          },\n        },\n      },\n\n      isFixed && classNames.isFixed,\n\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32,\n            },\n          },\n        },\n      ],\n\n      isHorizontalConstrained && [\n        classNames.isHorizontalConstrained,\n        {\n          overflowX: 'auto',\n          overflowY: 'visible',\n          WebkitOverflowScrolling: 'touch',\n        },\n      ],\n\n      className,\n    ],\n\n    focusZone: [\n      {\n        display: 'inline-block',\n        minWidth: '100%',\n        minHeight: 1,\n      },\n    ],\n    headerWrapper: classNames.headerWrapper,\n    contentWrapper: classNames.contentWrapper,\n  };\n};\n",
    "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IDetailsListProps, IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\nimport { DetailsListBase } from './DetailsList.base';\nimport { getStyles } from './DetailsList.styles';\n\nexport { IDetailsListProps };\n\nexport const DetailsList: React.FunctionComponent<IDetailsListProps> = styled<\n  IDetailsListProps,\n  IDetailsListStyleProps,\n  IDetailsListStyles\n>(DetailsListBase, getStyles, undefined, {\n  scope: 'DetailsList',\n});\n",
    "import { EventGroup } from './EventGroup';\nimport { findScrollableParent } from './scroll';\nimport { getRect } from './dom/getRect';\nimport { IRectangle } from './IRectangle';\n\ndeclare function setTimeout(cb: Function, delay: number): number;\n\nconst SCROLL_ITERATION_DELAY = 16;\nconst SCROLL_GUTTER = 100;\nconst MAX_SCROLL_VELOCITY = 15;\n\n/**\n * AutoScroll simply hooks up mouse events given a parent element, and scrolls the container\n * up/down depending on how close the mouse is to the top/bottom of the container.\n *\n * Once you don't want autoscroll any more, just dispose the helper and it will unhook events.\n *\n * @public\n * {@docCategory AutoScroll}\n */\nexport class AutoScroll {\n  private _events: EventGroup;\n  private _scrollableParent: HTMLElement | null;\n  private _scrollRect: IRectangle | undefined;\n  private _scrollVelocity: number;\n  private _isVerticalScroll: boolean;\n  private _timeoutId: number;\n\n  constructor(element: HTMLElement) {\n    this._events = new EventGroup(this);\n    this._scrollableParent = findScrollableParent(element) as HTMLElement;\n\n    this._incrementScroll = this._incrementScroll.bind(this);\n    this._scrollRect = getRect(this._scrollableParent);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (this._scrollableParent === (window as any)) {\n      this._scrollableParent = document.body;\n    }\n\n    if (this._scrollableParent) {\n      this._events.on(window, 'mousemove', this._onMouseMove, true);\n      this._events.on(window, 'touchmove', this._onTouchMove, true);\n    }\n  }\n\n  public dispose(): void {\n    this._events.dispose();\n    this._stopScroll();\n  }\n\n  private _onMouseMove(ev: MouseEvent): void {\n    this._computeScrollVelocity(ev);\n  }\n\n  private _onTouchMove(ev: TouchEvent): void {\n    if (ev.touches.length > 0) {\n      this._computeScrollVelocity(ev);\n    }\n  }\n\n  private _computeScrollVelocity(ev: MouseEvent | TouchEvent): void {\n    if (!this._scrollRect) {\n      return;\n    }\n\n    let clientX: number;\n    let clientY: number;\n    if ('clientX' in ev) {\n      clientX = ev.clientX;\n      clientY = ev.clientY;\n    } else {\n      clientX = ev.touches[0].clientX;\n      clientY = ev.touches[0].clientY;\n    }\n\n    let scrollRectTop = this._scrollRect.top;\n    let scrollRectLeft = this._scrollRect.left;\n    let scrollClientBottom = scrollRectTop + this._scrollRect.height - SCROLL_GUTTER;\n    let scrollClientRight = scrollRectLeft + this._scrollRect.width - SCROLL_GUTTER;\n\n    // variables to use for alternating scroll direction\n    let scrollRect;\n    let clientDirection;\n    let scrollClient;\n\n    // if either of these conditions are met we are scrolling vertically else horizontally\n    if (clientY < scrollRectTop + SCROLL_GUTTER || clientY > scrollClientBottom) {\n      clientDirection = clientY;\n      scrollRect = scrollRectTop;\n      scrollClient = scrollClientBottom;\n      this._isVerticalScroll = true;\n    } else {\n      clientDirection = clientX;\n      scrollRect = scrollRectLeft;\n      scrollClient = scrollClientRight;\n      this._isVerticalScroll = false;\n    }\n\n    // calculate scroll velocity and direction\n    if (clientDirection! < scrollRect + SCROLL_GUTTER) {\n      this._scrollVelocity = Math.max(\n        -MAX_SCROLL_VELOCITY,\n        -MAX_SCROLL_VELOCITY * ((SCROLL_GUTTER - (clientDirection - scrollRect)) / SCROLL_GUTTER),\n      );\n    } else if (clientDirection > scrollClient) {\n      this._scrollVelocity = Math.min(\n        MAX_SCROLL_VELOCITY,\n        MAX_SCROLL_VELOCITY * ((clientDirection - scrollClient) / SCROLL_GUTTER),\n      );\n    } else {\n      this._scrollVelocity = 0;\n    }\n\n    if (this._scrollVelocity) {\n      this._startScroll();\n    } else {\n      this._stopScroll();\n    }\n  }\n\n  private _startScroll(): void {\n    if (!this._timeoutId) {\n      this._incrementScroll();\n    }\n  }\n\n  private _incrementScroll(): void {\n    if (this._scrollableParent) {\n      if (this._isVerticalScroll) {\n        this._scrollableParent.scrollTop += Math.round(this._scrollVelocity);\n      } else {\n        this._scrollableParent.scrollLeft += Math.round(this._scrollVelocity);\n      }\n    }\n\n    this._timeoutId = setTimeout(this._incrementScroll, SCROLL_ITERATION_DELAY);\n  }\n\n  private _stopScroll(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n      delete this._timeoutId;\n    }\n  }\n}\n",
    "import * as React from 'react';\n\nimport {\n  Async,\n  EventGroup,\n  AutoScroll,\n  Point,\n  IRectangle,\n  classNamesFunction,\n  findScrollableParent,\n  getDistanceBetweenPoints,\n  getRTL,\n  initializeComponentRef,\n} from '../../Utilities';\n\nimport { IMarqueeSelectionProps, IMarqueeSelectionStyleProps, IMarqueeSelectionStyles } from './MarqueeSelection.types';\nimport {} from '@uifabric/utilities';\n\nconst getClassNames = classNamesFunction<IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>();\n\nexport interface IMarqueeSelectionState {\n  dragOrigin?: Point;\n  dragRect?: IRectangle;\n}\n\n// We want to make the marquee selection start when the user drags a minimum distance. Otherwise we'd start\n// the drag even if they just click an item without moving.\nconst MIN_DRAG_DISTANCE = 5;\n\n/**\n * MarqueeSelection component abstracts managing a draggable rectangle which sets items selected/not selected.\n * Elements which have data-selectable-index attributes are queried and measured once to determine if they\n * fall within the bounds of the rectangle. The measure is memoized during the drag as a performance optimization\n * so if the items change sizes while dragging, that could cause incorrect results.\n */\nexport class MarqueeSelectionBase extends React.Component<IMarqueeSelectionProps, IMarqueeSelectionState> {\n  public static defaultProps = {\n    rootTagName: 'div',\n    rootProps: {},\n    isEnabled: true,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _dragOrigin: Point | undefined;\n  private _rootRect: IRectangle;\n  private _lastMouseEvent: MouseEvent | undefined;\n  private _autoScroll: AutoScroll | undefined;\n  private _selectedIndicies: { [key: string]: boolean } | undefined;\n  private _preservedIndicies: number[] | undefined;\n  private _itemRectCache: { [key: string]: IRectangle } | undefined;\n  private _allSelectedIndices: { [key: string]: boolean } | undefined;\n  private _scrollableParent: HTMLElement;\n  private _scrollableSurface: HTMLElement;\n  private _scrollTop: number;\n  private _scrollLeft: number;\n  private _isTouch: boolean;\n\n  constructor(props: IMarqueeSelectionProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      dragRect: undefined,\n    };\n  }\n\n  public componentDidMount(): void {\n    this._scrollableParent = findScrollableParent(this._root.current) as HTMLElement;\n    this._scrollableSurface = this._scrollableParent === (window as any) ? document.body : this._scrollableParent;\n    // When scroll events come from window, we need to read scrollTop values from the body.\n\n    const hitTarget = this.props.isDraggingConstrainedToRoot ? this._root.current : this._scrollableSurface;\n\n    this._events.on(hitTarget, 'mousedown', this._onMouseDown);\n    this._events.on(hitTarget, 'touchstart', this._onTouchStart, true);\n    this._events.on(hitTarget, 'pointerdown', this._onPointerDown, true);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n    delete this._scrollableParent;\n    delete this._scrollableSurface;\n\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { rootProps, children, theme, className, styles } = this.props;\n    const { dragRect } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n\n    return (\n      <div {...rootProps} className={classNames.root} ref={this._root}>\n        {children}\n        {dragRect && <div className={classNames.dragMask} />}\n        {dragRect && (\n          <div className={classNames.box} style={dragRect}>\n            <div className={classNames.boxFill} />\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  /** Determine if the mouse event occured on a scrollbar of the target element. */\n  private _isMouseEventOnScrollbar(ev: MouseEvent): boolean {\n    const targetElement = ev.target as HTMLElement;\n    const targetScrollbarWidth = targetElement.offsetWidth - targetElement.clientWidth;\n    const targetScrollbarHeight = targetElement.offsetHeight - targetElement.clientHeight;\n\n    if (targetScrollbarWidth || targetScrollbarHeight) {\n      const targetRect = targetElement.getBoundingClientRect();\n\n      // Check vertical scroll\n      if (getRTL(this.props.theme)) {\n        if (ev.clientX < targetRect.left + targetScrollbarWidth) {\n          return true;\n        }\n      } else {\n        if (ev.clientX > targetRect.left + targetElement.clientWidth) {\n          return true;\n        }\n      }\n\n      // Check horizontal scroll\n      if (ev.clientY > targetRect.top + targetElement.clientHeight) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _onMouseDown = (ev: MouseEvent): void => {\n    const { isEnabled, onShouldStartSelection } = this.props;\n\n    // Ensure the mousedown is within the boundaries of the target. If not, it may have been a click on a scrollbar.\n    if (this._isMouseEventOnScrollbar(ev)) {\n      return;\n    }\n\n    if (this._isInSelectionToggle(ev)) {\n      return;\n    }\n\n    if (\n      !this._isTouch &&\n      isEnabled &&\n      !this._isDragStartInSelection(ev) &&\n      (!onShouldStartSelection || onShouldStartSelection(ev))\n    ) {\n      if (this._scrollableSurface && ev.button === 0 && this._root.current) {\n        this._selectedIndicies = {};\n        this._preservedIndicies = undefined;\n        this._events.on(window, 'mousemove', this._onAsyncMouseMove, true);\n        this._events.on(this._scrollableParent, 'scroll', this._onAsyncMouseMove);\n        this._events.on(window, 'click', this._onMouseUp, true);\n\n        this._autoScroll = new AutoScroll(this._root.current);\n        this._scrollTop = this._scrollableSurface.scrollTop;\n        this._scrollLeft = this._scrollableSurface.scrollLeft;\n        this._rootRect = this._root.current.getBoundingClientRect();\n\n        this._onMouseMove(ev);\n      }\n    }\n  };\n\n  private _onTouchStart = (ev: TouchEvent): void => {\n    this._isTouch = true;\n\n    this._async.setTimeout(() => {\n      this._isTouch = false;\n    }, 0);\n  };\n\n  private _onPointerDown = (ev: PointerEvent): void => {\n    if (ev.pointerType === 'touch') {\n      this._isTouch = true;\n\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 0);\n    }\n  };\n\n  private _getRootRect(): IRectangle {\n    return {\n      left: this._rootRect.left + (this._scrollLeft - this._scrollableSurface.scrollLeft),\n      top: this._rootRect.top + (this._scrollTop - this._scrollableSurface.scrollTop),\n      width: this._rootRect.width,\n      height: this._rootRect.height,\n    };\n  }\n\n  private _onAsyncMouseMove(ev: MouseEvent): void {\n    this._async.requestAnimationFrame(() => {\n      this._onMouseMove(ev);\n    });\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  }\n\n  private _onMouseMove(ev: MouseEvent): boolean | undefined {\n    if (!this._autoScroll) {\n      return;\n    }\n\n    if (ev.clientX !== undefined) {\n      this._lastMouseEvent = ev;\n    }\n\n    const rootRect = this._getRootRect();\n    const currentPoint = { left: ev.clientX - rootRect.left, top: ev.clientY - rootRect.top };\n\n    if (!this._dragOrigin) {\n      this._dragOrigin = currentPoint;\n    }\n\n    if (ev.buttons !== undefined && ev.buttons === 0) {\n      this._onMouseUp(ev);\n    } else {\n      if (this.state.dragRect || getDistanceBetweenPoints(this._dragOrigin, currentPoint) > MIN_DRAG_DISTANCE) {\n        if (!this.state.dragRect) {\n          const { selection } = this.props;\n\n          if (!ev.shiftKey) {\n            selection.setAllSelected(false);\n          }\n\n          this._preservedIndicies = selection && selection.getSelectedIndices && selection.getSelectedIndices();\n        }\n\n        // We need to constrain the current point to the rootRect boundaries.\n        const constrainedPoint = this.props.isDraggingConstrainedToRoot\n          ? {\n              left: Math.max(0, Math.min(rootRect.width, this._lastMouseEvent!.clientX - rootRect.left)),\n              top: Math.max(0, Math.min(rootRect.height, this._lastMouseEvent!.clientY - rootRect.top)),\n            }\n          : {\n              left: this._lastMouseEvent!.clientX - rootRect.left,\n              top: this._lastMouseEvent!.clientY - rootRect.top,\n            };\n\n        const dragRect = {\n          left: Math.min(this._dragOrigin.left || 0, constrainedPoint.left),\n          top: Math.min(this._dragOrigin.top || 0, constrainedPoint.top),\n          width: Math.abs(constrainedPoint.left - (this._dragOrigin.left || 0)),\n          height: Math.abs(constrainedPoint.top - (this._dragOrigin.top || 0)),\n        };\n\n        this._evaluateSelection(dragRect, rootRect);\n\n        this.setState({ dragRect });\n      }\n    }\n\n    return false;\n  }\n\n  private _onMouseUp(ev: MouseEvent): void {\n    this._events.off(window);\n    this._events.off(this._scrollableParent, 'scroll');\n\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n\n    this._autoScroll = this._dragOrigin = this._lastMouseEvent = undefined;\n    this._selectedIndicies = this._itemRectCache = undefined;\n\n    if (this.state.dragRect) {\n      this.setState({\n        dragRect: undefined,\n      });\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _isPointInRectangle(rectangle: IRectangle, point: Point): boolean {\n    return (\n      !!point.top &&\n      rectangle.top < point.top &&\n      rectangle.bottom! > point.top &&\n      !!point.left &&\n      rectangle.left < point.left &&\n      rectangle.right! > point.left\n    );\n  }\n\n  /**\n   * We do not want to start the marquee if we're trying to marquee\n   * from within an existing marquee selection.\n   */\n  private _isDragStartInSelection(ev: MouseEvent): boolean {\n    const selection = this.props.selection;\n    if (!this._root.current || (selection && selection.getSelectedCount() === 0)) {\n      return false;\n    }\n\n    const allElements = this._root.current.querySelectorAll('[data-selection-index]');\n    for (let i = 0; i < allElements.length; i++) {\n      const element = allElements[i];\n      const index = Number(element.getAttribute('data-selection-index'));\n      if (selection.isIndexSelected(index)) {\n        const itemRect = element.getBoundingClientRect();\n        if (this._isPointInRectangle(itemRect, { left: ev.clientX, top: ev.clientY })) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private _isInSelectionToggle(ev: MouseEvent): boolean {\n    let element: HTMLElement | null = ev.target as HTMLElement;\n\n    while (element && element !== this._root.current) {\n      if (element.getAttribute('data-selection-toggle') === 'true') {\n        return true;\n      }\n\n      element = element.parentElement;\n    }\n\n    return false;\n  }\n\n  private _evaluateSelection(dragRect: IRectangle, rootRect: IRectangle): void {\n    // Break early if we don't need to evaluate.\n    if (!dragRect || !this._root.current) {\n      return;\n    }\n\n    const { selection } = this.props;\n    const allElements = this._root.current.querySelectorAll('[data-selection-index]');\n\n    if (!this._itemRectCache) {\n      this._itemRectCache = {};\n    }\n\n    for (let i = 0; i < allElements.length; i++) {\n      const element = allElements[i];\n      const index = element.getAttribute('data-selection-index') as string;\n\n      // Pull the memoized rectangle for the item, or the get the rect and memoize.\n      let itemRect = this._itemRectCache[index];\n\n      if (!itemRect) {\n        itemRect = element.getBoundingClientRect();\n\n        // Normalize the item rect to the dragRect coordinates.\n        itemRect = {\n          left: itemRect.left - rootRect.left,\n          top: itemRect.top - rootRect.top,\n          width: itemRect.width,\n          height: itemRect.height,\n          right: itemRect.left - rootRect.left + itemRect.width,\n          bottom: itemRect.top - rootRect.top + itemRect.height,\n        };\n\n        if (itemRect.width > 0 && itemRect.height > 0) {\n          this._itemRectCache[index] = itemRect;\n        }\n      }\n\n      if (\n        itemRect.top < dragRect.top + dragRect.height &&\n        itemRect.bottom! > dragRect.top &&\n        itemRect.left < dragRect.left + dragRect.width &&\n        itemRect.right! > dragRect.left\n      ) {\n        this._selectedIndicies![index] = true;\n      } else {\n        delete this._selectedIndicies![index];\n      }\n    }\n\n    // set previousSelectedIndices to be all of the selected indices from last time\n    const previousSelectedIndices = this._allSelectedIndices || {};\n    this._allSelectedIndices = {};\n\n    // set all indices that are supposed to be selected in _allSelectedIndices\n    for (const index in this._selectedIndicies!) {\n      if (this._selectedIndicies!.hasOwnProperty(index)) {\n        this._allSelectedIndices![index] = true;\n      }\n    }\n\n    if (this._preservedIndicies) {\n      for (const index of this._preservedIndicies!) {\n        this._allSelectedIndices![index] = true;\n      }\n    }\n\n    // check if needs to update selection, only when current _allSelectedIndices\n    // is different than previousSelectedIndices\n    let needToUpdate = false;\n    for (const index in this._allSelectedIndices!) {\n      if (this._allSelectedIndices![index] !== previousSelectedIndices![index]) {\n        needToUpdate = true;\n        break;\n      }\n    }\n\n    if (!needToUpdate) {\n      for (const index in previousSelectedIndices!) {\n        if (this._allSelectedIndices![index] !== previousSelectedIndices![index]) {\n          needToUpdate = true;\n          break;\n        }\n      }\n    }\n\n    // only update selection when needed\n    if (needToUpdate) {\n      // Stop change events, clear selection to re-populate.\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n\n      for (const index of Object.keys(this._allSelectedIndices!)) {\n        selection.setIndexSelected(Number(index), true, false);\n      }\n\n      selection.setChangeEvents(true);\n    }\n  }\n}\n",
    "import { Point } from './Point';\nimport { ISize } from './ISize';\n\n/**\n * Determines the distance between two points.\n *\n * @public\n */\n/* eslint-disable deprecation/deprecation */\nexport function getDistanceBetweenPoints(point1: Point, point2: Point): number {\n  const left1 = point1.left || point1.x || 0;\n  const top1 = point1.top || point1.y || 0;\n  const left2 = point2.left || point2.x || 0;\n  const top2 = point2.top || point2.y || 0;\n  /* eslint-enable deprecation/deprecation */\n\n  let distance = Math.sqrt(Math.pow(left1 - left2, 2) + Math.pow(top1 - top2, 2));\n\n  return distance;\n}\n\n/**\n * The available fit modes. These should match the fit modes for CSS.\n */\nexport type FitMode = 'contain' | 'cover';\n\n/**\n * Options for fitting content sizes into bounding sizes.\n */\nexport interface IFitContentToBoundsOptions {\n  /**\n   * The size of the content to fit to the bounds.\n   * The output will be proportional to this value.\n   */\n  contentSize: ISize;\n  /**\n   * The size of the bounds.\n   */\n  boundsSize: ISize;\n  /**\n   * The fit mode to apply, either 'contain' or 'cover'.\n   */\n  mode: FitMode;\n  /**\n   * An optional maximum scale factor to apply. The default is 1.\n   * Use Infinity for an unbounded resize.\n   */\n  maxScale?: number;\n}\n\n/**\n * Produces a proportionally-scaled version of an input content size when fit to a bounding size.\n * Given a `contentSize` and a `boundsSize`, this function scales `contentSize` proportionally\n * using either `contain` or `cover` fit behaviors.\n * Use this function to pre-calculate the layout for the CSS `object-fit` and `background-fit` behaviors.\n * With `contain`, the output size must be the largest it can be while completely within the `boundsSize`.\n * With `cover`, the output size must be the smallest it can be while completely around the `boundsSize`.\n * By default, there is a `maxScale` value of 1, which prevents the `contentSize` from being scaled larger.\n *\n * @param options - the options for the bounds fit operation\n */\nexport function fitContentToBounds(options: IFitContentToBoundsOptions): ISize {\n  const { contentSize, boundsSize, mode = 'contain', maxScale = 1 } = options;\n\n  const contentAspectRatio = contentSize.width / contentSize.height;\n  const boundsAspectRatio = boundsSize.width / boundsSize.height;\n\n  let scale: number;\n\n  if (mode === 'contain' ? contentAspectRatio > boundsAspectRatio : contentAspectRatio < boundsAspectRatio) {\n    scale = boundsSize.width / contentSize.width;\n  } else {\n    scale = boundsSize.height / contentSize.height;\n  }\n\n  const finalScale = Math.min(maxScale, scale);\n\n  return {\n    width: contentSize.width * finalScale,\n    height: contentSize.height * finalScale,\n  };\n}\n\n/**\n * Calculates a number's precision based on the number of trailing\n * zeros if the number does not have a decimal indicated by a negative\n * precision. Otherwise, it calculates the number of digits after\n * the decimal point indicated by a positive precision.\n * @param value - the value to determine the precision of\n */\nexport function calculatePrecision(value: number | string): number {\n  /**\n   * Group 1:\n   * [1-9]([0]+$) matches trailing zeros\n   * Group 2:\n   * \\.([0-9]*) matches all digits after a decimal point.\n   */\n  const groups = /[1-9]([0]+$)|\\.([0-9]*)/.exec(String(value));\n  if (!groups) {\n    return 0;\n  }\n  if (groups[1]) {\n    return -groups[1].length;\n  }\n  if (groups[2]) {\n    return groups[2].length;\n  }\n  return 0;\n}\n\n/**\n * Rounds a number to a certain level of precision. Accepts negative precision.\n * @param value - The value that is being rounded.\n * @param precision - The number of decimal places to round the number to\n */\nexport function precisionRound(value: number, precision: number, base: number = 10): number {\n  const exp = Math.pow(base, precision);\n  return Math.round(value * exp) / exp;\n}\n",
    "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { MarqueeSelectionBase } from './MarqueeSelection.base';\nimport { getStyles } from './MarqueeSelection.styles';\nimport { IMarqueeSelectionProps, IMarqueeSelectionStyleProps, IMarqueeSelectionStyles } from './MarqueeSelection.types';\n\nexport const MarqueeSelection: React.FunctionComponent<IMarqueeSelectionProps> =\n  // TODO: MarqueeSelectionBase defaultProps are not lining up with IMarqueeSelectionProps, so we have to be explicit\n  // with styled here. defaultProps.rootTagName doesn't appear to be used anywhere and defaultProps.rootProps is not\n  // in IMarqueeSelectionProps.\n  styled<IMarqueeSelectionProps, IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>(\n    MarqueeSelectionBase,\n    getStyles,\n    undefined,\n    {\n      scope: 'MarqueeSelection',\n    },\n  );\n",
    "import { IMarqueeSelectionStyleProps, IMarqueeSelectionStyles } from './MarqueeSelection.types';\nimport { HighContrastSelector } from '../../Styling';\n\nexport const getStyles = (props: IMarqueeSelectionStyleProps): IMarqueeSelectionStyles => {\n  const { theme, className } = props;\n  const { palette } = theme;\n\n  return {\n    root: [\n      className,\n      {\n        position: 'relative',\n        cursor: 'default',\n      },\n    ],\n    dragMask: [\n      {\n        position: 'absolute',\n        background: 'rgba(255, 0, 0, 0)',\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        selectors: {\n          [HighContrastSelector]: {\n            background: 'none',\n            backgroundColor: 'transparent',\n          },\n        },\n      },\n    ],\n    box: [\n      {\n        position: 'absolute',\n        boxSizing: 'border-box',\n        border: `1px solid ${palette.themePrimary}`,\n        pointerEvents: 'none',\n        zIndex: 10,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'Highlight',\n          },\n        },\n      },\n    ],\n    boxFill: [\n      {\n        position: 'absolute',\n        boxSizing: 'border-box',\n        backgroundColor: palette.themePrimary,\n        opacity: 0.1,\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        selectors: {\n          [HighContrastSelector]: {\n            background: 'none',\n            backgroundColor: 'transparent',\n          },\n        },\n      },\n    ],\n  };\n};\n",
    "import * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, divProperties } from '../../Utilities';\nimport { IAnnouncedProps, IAnnouncedStyles } from './Announced.types';\n\nconst getClassNames = classNamesFunction<{}, IAnnouncedStyles>();\n\n/**\n * {@docCategory Announced}\n */\nexport class AnnouncedBase extends React.Component<IAnnouncedProps> {\n  public static defaultProps: Partial<IAnnouncedProps> = {\n    'aria-live': 'polite',\n  };\n\n  public render(): JSX.Element {\n    const { message, styles, as: Root = 'div', className } = this.props;\n\n    const classNames = getClassNames(styles, { className });\n\n    return (\n      <Root role=\"status\" className={classNames.root} {...getNativeProps(this.props, divProperties, ['className'])}>\n        <DelayedRender>\n          <div className={classNames.screenReaderText}>{message}</div>\n        </DelayedRender>\n      </Root>\n    );\n  }\n}\n",
    "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IAnnouncedProps, IAnnouncedStyles } from './Announced.types';\nimport { AnnouncedBase } from './Announced.base';\nimport { getStyles } from './Announced.styles';\n\nexport const Announced: React.FunctionComponent<IAnnouncedProps> = styled<IAnnouncedProps, {}, IAnnouncedStyles>(\n  AnnouncedBase,\n  getStyles,\n);\n",
    "import { hiddenContentStyle } from '../../Styling';\nimport { IStyleFunction } from '../../Utilities';\nimport { IAnnouncedStyles, IAnnouncedStyleProps } from './Announced.types';\n\nexport const getStyles: IStyleFunction<IAnnouncedStyleProps, IAnnouncedStyles> = props => {\n  return {\n    root: props.className,\n    screenReaderText: hiddenContentStyle,\n  };\n};\n"
  ],
  "sourceRoot": ""
}
