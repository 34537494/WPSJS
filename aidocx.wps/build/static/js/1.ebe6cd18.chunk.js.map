{
  "version": 3,
  "sources": [
    "../node_modules/@uifabric/foundation/node_modules/tslib/tslib.es6.js",
    "../../src/utilities.ts",
    "../../src/slots.tsx",
    "../../src/createComponent.tsx",
    "../../src/components/Stack/StackUtils.ts",
    "../../src/components/Stack/Stack.styles.ts",
    "../../src/components/Stack/StackItem/StackItem.styles.ts",
    "../../src/components/Stack/StackItem/StackItem.tsx",
    "../../src/components/Stack/Stack.tsx",
    "../../src/components/Tooltip/TooltipHost.types.ts",
    "../../src/components/Tooltip/Tooltip.types.ts",
    "../../src/components/Tooltip/Tooltip.base.tsx",
    "../../src/components/Tooltip/Tooltip.tsx",
    "../../src/components/Tooltip/Tooltip.styles.ts",
    "../../src/components/Tooltip/TooltipHost.base.tsx",
    "../../src/overflow.ts",
    "../../src/components/Tooltip/TooltipHost.styles.ts",
    "../../src/components/Tooltip/TooltipHost.ts"
  ],
  "names": [
    "__assign",
    "Object",
    "assign",
    "t",
    "s",
    "i",
    "n",
    "arguments",
    "length",
    "p",
    "prototype",
    "hasOwnProperty",
    "call",
    "apply",
    "this",
    "__spreadArrays",
    "il",
    "r",
    "Array",
    "k",
    "a",
    "j",
    "jl",
    "withSlots",
    "type",
    "props",
    "slotType",
    "isSlot",
    "children",
    "toArray",
    "createFactory",
    "DefaultComponent",
    "options",
    "defaultProp",
    "componentProps",
    "userProps",
    "userSlotOptions",
    "defaultStyles",
    "theme",
    "finalProps",
    "classNames",
    "allProps",
    "push",
    "className",
    "rtl",
    "_constructFinalProps",
    "slotProps",
    "transformedProps",
    "_translateShorthand",
    "component",
    "UserComponent",
    "render",
    "defaultFactory",
    "memoize",
    "getSlots",
    "slots",
    "result",
    "mixedProps",
    "slot",
    "args",
    "Error",
    "_renderSlot",
    "_defaultStyles",
    "ComponentType",
    "slotOptions",
    "undefined",
    "create",
    "createComponent",
    "view",
    "factoryOptions",
    "ResultComponent",
    "displayName",
    "context",
    "fields",
    "settings",
    "CustomizerContext",
    "Customizations",
    "getSettings",
    "customizations",
    "stateReducer",
    "state",
    "tokens",
    "_resolveTokens",
    "allTokens",
    "currentTokens",
    "isArray",
    "styles",
    "allStyles",
    "map",
    "_resolveStyles",
    "viewProps",
    "name",
    "statics",
    "_getThemedSpacing",
    "space",
    "spacing",
    "_getValueUnitGap",
    "gap",
    "numericalPart",
    "parseFloat",
    "numericalValue",
    "isNaN",
    "numericalString",
    "toString",
    "value",
    "unit",
    "substring",
    "parsePadding",
    "padding",
    "paddingValues",
    "split",
    "reduce",
    "padding1",
    "padding2",
    "nameMap",
    "start",
    "end",
    "GlobalClassNames",
    "root",
    "inner",
    "alignMap",
    "StackItem",
    "nativeProps",
    "count",
    "grow",
    "shrink",
    "disableShrink",
    "align",
    "verticalFill",
    "order",
    "fonts",
    "medium",
    "margin",
    "height",
    "width",
    "flexGrow",
    "flexShrink",
    "alignSelf",
    "Stack",
    "as",
    "wrap",
    "warnDeprecations",
    "maxHeight",
    "maxWidth",
    "stackChildren",
    "child",
    "index",
    "item",
    "defaultItemProps",
    "rest",
    "Slots",
    "RootType",
    "horizontal",
    "reversed",
    "horizontalAlign",
    "verticalAlign",
    "childrenGap",
    "rowGap",
    "columnGap",
    "splitGap",
    "calculatedGap",
    "horizontalMargin",
    "verticalMargin",
    "childStyles",
    "textOverflow",
    "commonSelectors",
    "flexWrap",
    "overflow",
    "display",
    "marginLeft",
    "marginRight",
    "marginTop",
    "marginBottom",
    "boxSizing",
    "selectors",
    "flexDirection",
    "Item",
    "TooltipOverflowMode",
    "TooltipDelay",
    "getClassNames",
    "classNamesFunction",
    "_onRenderContent",
    "_classNames",
    "subText",
    "content",
    "calloutProps",
    "directionalHint",
    "directionalHintForRTL",
    "id",
    "onRenderContent",
    "targetElement",
    "beakWidth",
    "gapSpace",
    "Callout",
    "target",
    "role",
    "onMouseEnter",
    "onMouseLeave",
    "defaultProps",
    "DirectionalHint",
    "topCenter",
    "isBeakVisible",
    "setInitialFocus",
    "doNotLayer",
    "Tooltip",
    "styled",
    "semanticColors",
    "effects",
    "tooltipGapSpace",
    "Math",
    "sqrt",
    "window",
    "devicePixelRatio",
    "fadeIn200",
    "background",
    "menuBackground",
    "boxShadow",
    "elevation8",
    "position",
    "bottom",
    "left",
    "right",
    "top",
    "zIndex",
    "small",
    "color",
    "menuItemText",
    "wordWrap",
    "overflowWrap",
    "fontSize",
    "fontWeight",
    "scope",
    "_tooltipHost",
    "_defaultTooltipId",
    "getId",
    "show",
    "_toggleTooltip",
    "dismiss",
    "_hideTooltip",
    "_getTargetElement",
    "current",
    "overflowMode",
    "Parent",
    "parentElement",
    "Self",
    "_onTooltipMouseEnter",
    "ev",
    "element",
    "delay",
    "TooltipHostBase",
    "_currentVisibleTooltip",
    "overflowElement",
    "clientWidth",
    "scrollWidth",
    "hasHorizontalOverflow",
    "clientHeight",
    "scrollHeight",
    "hasVerticalOverflow",
    "portalContainsElement",
    "_clearDismissTimer",
    "_clearOpenTimer",
    "zero",
    "setState",
    "isAriaPlaceholderRendered",
    "delayTime",
    "_getDelayTime",
    "_openTimerId",
    "_async",
    "setTimeout",
    "_onTooltipMouseLeave",
    "closeDelay",
    "_dismissTimerId",
    "_onTooltipKeyDown",
    "which",
    "KeyCodes",
    "escape",
    "ctrlKey",
    "isTooltipVisible",
    "stopPropagation",
    "clearTimeout",
    "onTooltipToggle",
    "long",
    "initializeComponentRef",
    "Async",
    "hostClassName",
    "setAriaDescribedBy",
    "tooltipProps",
    "tooltipId",
    "isContentPresent",
    "showTooltip",
    "ariaDescribedBy",
    "ref",
    "onFocusCapture",
    "onBlurCapture",
    "onKeyDown",
    "onDismiss",
    "style",
    "componentWillUnmount",
    "dispose",
    "ariaPlaceholder",
    "TooltipHost"
  ],
  "mappings": "sJA6BO,IAAIA,EAAW,WAQlB,OAPAA,EAAWC,OAAOC,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAII,KADTL,EAAIG,UAAUF,GACOJ,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,IAE9E,OAAON,IAEKU,MAAMC,KAAMP,YAgHzB,SAASQ,IACZ,IAAK,IAAIX,EAAI,EAAGC,EAAI,EAAGW,EAAKT,UAAUC,OAAQH,EAAIW,EAAIX,IAAKD,GAAKG,UAAUF,GAAGG,OACxE,IAAIS,EAAIC,MAAMd,GAAIe,EAAI,EAA3B,IAA8Bd,EAAI,EAAGA,EAAIW,EAAIX,IACzC,IAAK,IAAIe,EAAIb,UAAUF,GAAIgB,EAAI,EAAGC,EAAKF,EAAEZ,OAAQa,EAAIC,EAAID,IAAKF,IAC1DF,EAAEE,GAAKC,EAAEC,GACjB,OAAOJ,E,+BCzJE,EAAS,ECkChB,SAAUM,EACdC,EACAC,G,IACA,wDAEA,IAAMC,EAAWF,EACjB,OAAIE,EAASC,OAYa,KAJxBC,EAAW,WAAeC,QAAQD,IAIrBpB,OACJkB,EAASD,GAGXC,EAAS,EAAD,KAAOD,GAAa,CAAEG,SAAQ,KAQtC,gBAAmB,MAAnB,EAAK,GAAeJ,EAAMC,GAAUG,IAUzC,SAAUE,EACdC,EACAC,QAAA,IAAAA,MAAA,IAEQ,QAAAC,mBAAA,mBAiCR,OA/BqD,SACnDC,EACAC,EACAC,EACAC,EACAC,GAGA,GAAI,iBAAqBH,GACvB,OAAOA,EAGT,IACMI,EAsGV,SACEF,EACAC,G,IACA,wDAKA,IAHA,IAAMC,EAAqB,GACrBC,EAAqC,GAEvB,MAAAC,EAAA,eAAU,CAAzB,IAAMhB,EAAK,KACde,EAAWE,KAAKjB,GAASA,EAAMkB,WAC/B,EAAOJ,EAAYd,GAKrB,OAFAc,EAAWI,UAAY,YAAS,CAACN,EAAeG,GAAa,CAAEI,IAAK,YAAON,KAEpEC,EArHcM,CAAqBR,EAAeC,EAAOJ,EAkFlE,SACED,EACAa,G,MAEIC,EAEqB,kBAAdD,GAA+C,kBAAdA,GAA+C,mBAAdA,IACxD,MAChBb,GAAca,EADjBC,EAEW,GAEXA,EAAmBD,EAGrB,OAAOC,EAjG0CC,CAAoBf,EAAuBE,IAG1F,GAAIC,EAAiB,CACnB,GAAIA,EAAgBa,UAAW,CAG7B,IAAMC,EAAgBd,EAAgBa,UACtC,OAAO,gBAACC,EAAa,KAAKX,IAG5B,GAAIH,EAAgBe,OAClB,OAAOf,EAAgBe,OAAOZ,EAAYR,GAI9C,OAAO,gBAACA,EAAgB,KAAKQ,KASjC,IAAMa,EAAiB,OAAAC,EAAA,IAAgB,SAAA7B,GAAQ,OAAAM,EAAA,MAQzC,SAAUwB,EACdnB,EACAoB,GAEA,IAAMC,EAA4C,GAG5CC,EAAatB,E,WAER,GACT,GAAIoB,EAAM5C,eAAe,GAAO,CAK9B,IAAM+C,EAAiE,SAACxB,G,IAAgB,wDACtF,GAAIyB,EAAKnD,OAAS,EAGhB,MAAM,IAAIoD,MAAM,6FAMlB,OAAOC,EACLN,EAAM,GAENrB,EACAuB,EAAW,GACXA,EAAWF,OAASE,EAAWF,MAAM,GAGrCE,EAAWK,gBAAkBL,EAAWK,eAAe,GACtDL,EAAmBnB,QAGxBoB,EAAK/B,QAAS,EACd6B,EAAO,GAAQE,IA7BnB,IAAK,IAAM,KAAQH,E,EAAR,GAiCX,OAAOC,EAqDT,SAASK,EAKPE,EACA7B,EACAC,EACA6B,EACA3B,EACAC,GAEA,YAA6B2B,IAAzBF,EAAcG,OACTH,EAAcG,OAAOhC,EAAgBC,EAAW6B,EAAa3B,GAG3De,EAAeW,EAAfX,CACPlB,EACAC,EACA6B,EACA3B,EACAC,G,2BC9MA,SAAU6B,EAOdC,EACApC,QAAA,IAAAA,MAAA,IAEQ,QAAAqC,eACApC,QADA,YACAA,YAEFqC,EAA4D,SAChEpC,GAEA,IA2GFqC,EACAC,EACAC,EA7GQC,GA2GRH,EA1GIvC,EAAQuC,YA2GZC,EA1GI,aAAiBG,EAAA,GA2GrBF,EA1GIzC,EAAQyC,OAgHLG,EAAA,EAAeC,YAAYJ,GADZ,CAAC,QAAS,SAAU,UACiBF,EAAaC,EAAQM,iBA7GxEC,EAAe/C,EAAQgD,MAEzBD,IAEF7C,EAAiB,EAAH,KACTA,GACA6C,EAAa7C,KAIpB,IAAMI,EAAQJ,EAAeI,OAASoC,EAASpC,MAEzC2C,EAuDV,SAASC,EACPzD,EACAa,G,IACA,wDAIA,IAFA,IAAM2C,EAAS,GAEW,MAAAE,EAAA,eAAW,CAAhC,IAAIC,EAAa,KAChBA,IAEFA,EAC2B,oBAAlBA,EACFA,EAAsD3D,EAAOa,GAC9D8C,EAEFlE,MAAMmE,QAAQD,KAChBA,EAAgBF,EAAc,gBAACzD,EAAOa,GAAU8C,KAGlD,EAAOH,EAAQG,IAInB,OAAOH,EA9EUC,CAAehD,EAAgBI,EAAON,EAAQiD,OAAQP,EAASO,OAAQ/C,EAAe+C,QAC/FK,EAsCV,SACE7D,EACAa,EACA2C,G,IACA,wDAEA,OAAO,IAAe,aACjBM,EAAUC,KAAI,SAACF,GAChB,MAAkB,oBAAXA,EAAwBA,EAAO7D,EAAOa,EAAO2C,GAAUK,MA9CjDG,CACbvD,EACAI,EACA2C,EACAjD,EAAQsD,OACRZ,EAASY,OACTpD,EAAeoD,QAGXI,EAAY,OACbxD,GAAc,CACjBoD,OAAM,EACNL,OAAM,EACNnB,eAAgBwB,EAChBhD,MAAK,IAGP,OAAO8B,EAAKsB,IAed,OAZApB,EAAgBC,YAAcvC,EAAQuC,aAAeH,EAAKuB,KAKtD1D,IACDqC,EAAuDJ,OAASpC,EAAcwC,EAAiB,CAAErC,YAAW,KAG/G,EAAOqC,EAAiBtC,EAAQ4D,SAGzBtB,E,sBC/FHuB,EAAoB,SAACC,EAAexD,GACxC,OAAIA,EAAMyD,QAAQpF,eAAemF,GACxBxD,EAAMyD,QAAQD,GAEhBA,GAIHE,EAAmB,SAACC,GACxB,IAAMC,EAAgBC,WAAWF,GAC3BG,EAAiBC,MAAMH,GAAiB,EAAIA,EAC5CI,EAAkBD,MAAMH,GAAiB,GAAKA,EAAcK,WAIlE,MAAO,CACLC,MAAOJ,EACPK,KAJeR,EAAIS,UAAUJ,EAAgBC,WAAW/F,SAItC,OA+ETmG,EAAe,SAACC,EAAsCtE,GACjE,QAAgB2B,IAAZ2C,GAA4C,kBAAZA,GAAoC,KAAZA,EAC1D,OAAOA,EAGT,IAAMC,EAAgBD,EAAQE,MAAM,KACpC,OAAID,EAAcrG,OAAS,EAClBqF,EAAkBe,EAAStE,GAG7BuE,EAAcE,QAAO,SAACC,EAAkBC,GAC7C,OAAOpB,EAAkBmB,EAAU1E,GAAS,IAAMuD,EAAkBoB,EAAU3E,OC/G5E4E,EAAqC,CACzCC,MAAO,aACPC,IAAK,YAGDC,EAAmB,CACvBC,KAAM,WACNC,MAAO,kBCRH,EAAmB,CACvBD,KAAM,gBAGFE,EAAsC,CAC1CL,MAAO,aACPC,IAAK,YCaMK,EAAsDtD,GAdhB,SAAA1C,GACzC,IAAAG,EAAA,EAAAA,SACF8F,EAAc,YAAqDjG,EAAO,KAChF,OAAI,WAAekG,MAAM/F,GAAY,EAC5B,KAOF,EAJO0B,EAA2C7B,EAAO,CAC9D6F,KAAM,QAGMA,KAAI,eAAKI,GAAc9F,KAG2D,CAChG2C,YAAa,YACbe,ODZ4D,SAAC7D,EAAOa,EAAO2C,GACnE,IAAA2C,EAAA,EAAAA,KAAMC,EAAA,EAAAA,OAAQC,EAAA,EAAAA,cAAeC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,aAAcC,EAAA,EAAAA,MAAOtF,EAAA,EAAAA,UAE3DH,EAAa,YAAoB,EAAkBF,GAEzD,MAAO,CACLgF,KAAM,CACJhF,EAAM4F,MAAMC,OACZ3F,EAAW8E,KACX,CACEc,OAAQnD,EAAOmD,OACfxB,QAAS3B,EAAO2B,QAChByB,OAAQL,EAAe,OAAS,OAChCM,MAAO,QAETV,GAAQ,CAAEW,UAAmB,IAATX,EAAgB,EAAIA,IACvCE,IAAmBF,IAASC,IAAY,CACvCW,WAAY,GAEdX,IACGC,GAAiB,CAChBU,WAAY,GAEhBT,GAAS,CACPU,UAAWjB,EAASO,IAAUA,GAEhCE,GAAS,CACPA,MAAOA,GAETtF,OEgCN,IAIa+F,EAETvE,GArEuC,SAAA1C,GACjC,QAAAkH,GAAA,qBAAsBb,EAAA,EAAAA,cAAec,EAAA,EAAAA,KAAM,+CAEnD,OAAAC,EAAA,GAAiB,QAASpH,EAAO,CAC/BwE,IAAK,qBACL6C,UAAW,mBACXC,SAAU,kBACVnC,QAAS,mBAGX,IAAMoC,EAAgE,WAAexD,IACnF/D,EAAMG,UACN,SAACqH,EAA4CC,GAC3C,IAAKD,EACH,OAAO,KAGT,IAiCgBE,EAjCCF,IAuCH,kBAATE,GACJA,EAA4B3H,MAE7B2H,EAA4B3H,KAA6B+C,cAAgBkD,EAAUlD,YA1C1D,CACvB,IAAM6E,EAAoC,CACxCvB,QAASC,GAGX,OAAO,eAAmBmB,EAAK,2BAC1BG,GACAH,EAAMxH,QA0BnB,IAAsB0H,EAtBhB,OAAOF,KAILvB,EAAc,YAAqD2B,EAAM,KAEzEC,EAAQhG,EAAmC7B,EAAO,CACtD6F,KAAMiC,EACNhC,MAAO,QAGT,OAEI,EAAC+B,EAAMhC,KAAI,eAAKI,GAFhBkB,EAGE,EAACU,EAAM/B,MAAK,KAAEyB,GAKiBA,KAsBR,CAC7BzE,YAAa,QACbe,OHnE+C,SAAC7D,EAAOa,EAAO2C,G,kBAE5D+C,EAAA,EAAAA,aACAwB,EAAA,EAAAA,WACAC,EAAA,EAAAA,SACA7B,EAAA,EAAAA,KACAgB,EAAA,EAAAA,KACAc,EAAA,EAAAA,gBACAC,EAAA,EAAAA,cACA7B,EAAA,EAAAA,cACAnF,EAAA,EAAAA,UAGIH,EAAa,YAAoB6E,EAAkB/E,GAGnDsH,EAAc3E,GAAUA,EAAO2E,YAAc3E,EAAO2E,YAAcnI,EAAMwE,IACxE6C,EAAY7D,GAAUA,EAAO6D,UAAY7D,EAAO6D,UAAYrH,EAAMqH,UAClEC,EAAW9D,GAAUA,EAAO8D,SAAW9D,EAAO8D,SAAWtH,EAAMsH,SAC/DnC,EAAU3B,GAAUA,EAAO2B,QAAU3B,EAAO2B,QAAUnF,EAAMmF,QAG5D,EDDgB,SACtBX,EACA3D,GAEA,QAAY2B,IAARgC,GAA6B,KAARA,EACvB,MAAO,CACL4D,OAAQ,CACNrD,MAAO,EACPC,KAAM,MAERqD,UAAW,CACTtD,MAAO,EACPC,KAAM,OAKZ,GAAmB,kBAARR,EACT,MAAO,CACL4D,OAAQ,CACNrD,MAAOP,EACPQ,KAAM,MAERqD,UAAW,CACTtD,MAAOP,EACPQ,KAAM,OAKZ,IAAMsD,EAAW9D,EAAIa,MAAM,KAG3B,GAAIiD,EAASvJ,OAAS,EACpB,MAAO,CACLqJ,OAAQ,CACNrD,MAAO,EACPC,KAAM,MAERqD,UAAW,CACTtD,MAAO,EACPC,KAAM,OAMZ,GAAwB,IAApBsD,EAASvJ,OACX,MAAO,CACLqJ,OAAQ7D,EAAiBH,EAAkBkE,EAAS,GAAIzH,IACxDwH,UAAW9D,EAAiBH,EAAkBkE,EAAS,GAAIzH,KAK/D,IAAM0H,EAAgBhE,EAAiBH,EAAkBI,EAAK3D,IAE9D,MAAO,CACLuH,OAAQG,EACRF,UAAWE,GC1DP,MAAEH,EAAA,EAAAA,OAAQC,EAAA,EAAAA,UAEVG,EAAmB,IAAI,GAAMH,EAAUtD,MAAQsD,EAAUrD,KACzDyD,EAAiB,IAAI,GAAML,EAAOrD,MAAQqD,EAAOpD,KAGjD0D,EAAc,CAClBC,aAAc,YAIVC,EAAkB,CAEtB,yBAA0B,CACxB7B,WAAYV,EAAgB,EAAI,IAIpC,OAAIc,EACK,CACLtB,KAAM,CACJ9E,EAAW8E,KACX,CACEgD,SAAU,OACVvB,SAAQ,EACRD,UAAS,EACTR,MAAO,OACPiC,SAAU,UACVlC,OAAQ,QAEVqB,IAAe,KACb,EAACF,EAAa,iBAAmB,cAAetC,EAAQwC,IAAoBA,EAC7E,GACDC,IAAa,KACX,EAACH,EAAa,aAAe,kBAAmBtC,EAAQyC,IAAkBA,EAC3E,GACDhH,EACA,CAGE6H,QAAS,QAEXhB,GAAc,CACZnB,OAAQL,EAAe,OAAS,SAIpCT,MAAO,CACL/E,EAAW+E,MACX,CACEiD,QAAS,OACTF,SAAU,OACVG,WAAYR,EACZS,YAAaT,EACbU,UAAWT,EACXU,aAAcV,EACdK,SAAU,UACVM,UAAW,aACXjE,QAASD,EAAaC,EAAStE,GAE/BgG,MAA2B,IAApBwB,EAAUtD,MAAc,OAAS,eAAesD,EAAUtD,MAAQsD,EAAUrD,KAAI,IACvFsC,SAAU,QAEV+B,UAAW,OAAF,IAAE,CAAF,CACP,MAAK,aACH1C,OAAQ,GAAG,GAAMyB,EAAOrD,MAAQqD,EAAOpD,KAAI,IAAI,GAAMqD,EAAUtD,MAAQsD,EAAUrD,MAE9E0D,IAEFE,IAGPX,IAAe,KACb,EAACF,EAAa,iBAAmB,cAAetC,EAAQwC,IAAoBA,EAC7E,GACDC,IAAa,KACX,EAACH,EAAa,aAAe,kBAAmBtC,EAAQyC,IAAkBA,EAC3E,GACDH,GAAc,CACZuB,cAAetB,EAAW,cAAgB,MAG1CpB,OAAyB,IAAjBwB,EAAOrD,MAAc,OAAS,eAAeqD,EAAOrD,MAAQqD,EAAOpD,KAAI,IAE/EqE,UAAW,CACT,MAAO,CACL/B,SAA8B,IAApBe,EAAUtD,MAAc,OAAS,eAAesD,EAAUtD,MAAQsD,EAAUrD,KAAI,QAI/F+C,GAAc,CACbuB,cAAetB,EAAW,iBAAmB,SAC7CpB,OAAQ,eAAewB,EAAOrD,MAAQqD,EAAOpD,KAAI,IAEjDqE,UAAW,CACT,MAAO,CACLhC,UAA4B,IAAjBe,EAAOrD,MAAc,OAAS,eAAeqD,EAAOrD,MAAQqD,EAAOpD,KAAI,SAQvF,CACLa,KAAM,CACJ9E,EAAW8E,KACX,CACEkD,QAAS,OACTO,cAAevB,EAAcC,EAAW,cAAgB,MAASA,EAAW,iBAAmB,SAC/Fa,SAAU,SACVhC,MAAO,OACPD,OAAQL,EAAe,OAAS,OAChCe,SAAQ,EACRD,UAAS,EACTlC,QAASD,EAAaC,EAAStE,GAC/BuI,UAAW,aAEXC,UAAW,OAAF,IAAE,EAAF,GACP,MAAOX,GAAW,EAIjBV,EAAW,uBAAyB,yBAA0B,CAC7DD,GAAc,CACZiB,WAAY,GAAGX,EAAUtD,MAAQsD,EAAUrD,OAE5C+C,GAAc,CACbmB,UAAW,GAAGd,EAAOrD,MAAQqD,EAAOpD,OAEvC,GAEE4D,IAGPzC,GAAQ,CACNW,UAAmB,IAATX,EAAgB,EAAIA,GAEhC8B,IAAe,KACb,EAACF,EAAa,iBAAmB,cAAetC,EAAQwC,IAAoBA,EAC7E,GACDC,IAAa,KACX,EAACH,EAAa,aAAe,kBAAmBtC,EAAQyC,IAAkBA,EAC3E,GACDhH,KGlGJiD,QATmB,CACnBoF,KAAMvD,M,2HChDIwD,E,sDAAZ,SAAYA,GAEV,uBAMA,mBARF,CAAYA,MAAmB,K,ICwDnBC,E,iBC3ENC,EAAgB,OAAAC,EAAA,KAEtB,yE,OA4DU,EAAAC,iBAAmB,SAAC5J,GAC1B,OAAO,qBAAGkB,UAAW,EAAK2I,YAAYC,SAAU9J,EAAM+J,U,EAE1D,OA/DiC,iBAgBxB,YAAArI,OAAP,WACQ,iBACJR,EAAA,EAAAA,UACA8I,EAAA,EAAAA,aACAC,EAAA,EAAAA,gBACAC,EAAA,EAAAA,sBACArG,EAAA,EAAAA,OACAsG,EAAA,EAAAA,GACA7C,EAAA,EAAAA,SACA,IAAA8C,uBAAA,IAAkB,EAAlB,wBACAC,EAAA,EAAAA,cACAxJ,EAAA,EAAAA,MAWF,OARAxB,KAAKwK,YAAcH,EAAc7F,EAAS,CACxChD,MAAOA,EACPK,UAAWA,GAAc8I,GAAgBA,EAAa9I,UACtDoJ,UAAWN,GAAgBA,EAAaM,UACxCC,SAAUP,GAAgBA,EAAaO,SACvCjD,SAAUA,IAIV,gBAACkD,EAAA,EAAO,aACNC,OAAQJ,EACRJ,gBAAiBA,EACjBC,sBAAuBA,GACnBF,EACA,YAAe3K,KAAKW,MAAO,IAAe,CAAC,OAAM,CACrDkB,UAAW7B,KAAKwK,YAAYhE,OAE5B,uBACE3E,UAAW7B,KAAKwK,YAAYE,QAC5BI,GAAIA,EACJO,KAAK,UACLC,aAActL,KAAKW,MAAM2K,aACzBC,aAAcvL,KAAKW,MAAM4K,cAExBR,EAAgB/K,KAAKW,MAAOX,KAAKuK,qBApD5B,EAAAiB,aAAuC,CACnDZ,gBAAiBa,EAAA,EAAgBC,UACjCzD,SAAU,QACV0C,aAAc,CACZgB,eAAe,EACfV,UAAW,GACXC,SAAU,EACVU,iBAAiB,EACjBC,YAAY,IAqDlB,EA/DA,CAAiC,aCHpBC,EAAkD,OAAAC,EAAA,GAI7D,GCPuB,SAACpL,GAChB,IAAAkB,EAAA,EAAAA,UAAW,IAAAoJ,iBAAA,IAAY,EAAZ,KAAgB,IAAAC,gBAAA,IAAW,EAAX,IAAcjD,EAAA,EAAAA,SAAUzG,EAAA,EAAAA,MACnDwK,EAAA,EAAAA,eAAgB5E,EAAA,EAAAA,MAAO6E,EAAA,EAAAA,QAKzBC,IAAoBC,KAAKC,KAAMnB,EAAYA,EAAa,GAAKC,GAAY,EAAImB,OAAOC,iBAE1F,MAAO,CACL9F,KAAM,CACJ,aACAhF,EAAM4F,MAAMC,OACZ,IAAoBkF,UACpB,CACEC,WAAYR,EAAeS,eAC3BC,UAAWT,EAAQU,WACnB7G,QAAS,MACTmC,SAAUA,EACV+B,UAAW,CACT,SAAU,CACRU,QAAS,KACTkC,SAAU,WACVC,OAAQX,EACRY,KAAMZ,EACNa,MAAOb,EACPc,IAAKd,EACLe,OAAQ,KAIdpL,GAEF6I,QAAS,CACP,qBACAtD,EAAM8F,MACN,CACEN,SAAU,WACVK,OAAQ,EACRE,MAAOnB,EAAeoB,aACtBC,SAAU,aACVC,aAAc,aACd7D,SAAU,WAGdgB,QAAS,CACP,qBACA,CAEE8C,SAAU,UACVC,WAAY,UACZL,MAAO,UACP7F,OAAQ,YD7CUnE,EAAW,CACnCsK,MAAO,aFuET,SAAYrD,GACV,mBAEA,uBAEA,mBALF,CAAYA,MAAY,KIrDxB,IAAM,EAAgB,OAAAE,EAAA,KAEtB,cAiBE,WAAY3J,GAAZ,MACE,YAAMA,IAAM,K,OAVN,EAAA+M,aAAe,cAMf,EAAAC,kBAAoB,OAAAC,EAAA,GAAM,WA6F3B,EAAAC,KAAO,WACZ,EAAKC,gBAAe,IAGf,EAAAC,QAAU,WACf,EAAKC,gBAGC,EAAAC,kBAAoB,WAC1B,GAAK,EAAKP,aAAaQ,QAAvB,CAIQ,IAAAC,EAAA,QAAAA,aAIR,QAAqBhL,IAAjBgL,EACF,OAAQA,GACN,KAAKhE,EAAoBiE,OACvB,OAAO,EAAKV,aAAaQ,QAAQG,cAEnC,KAAKlE,EAAoBmE,KACvB,OAAO,EAAKZ,aAAaQ,QAI/B,OAAO,EAAKR,aAAaQ,UAInB,EAAAK,qBAAuB,SAACC,GACxB,IC7IkBC,ED6IlB,UAAEN,EAAA,EAAAA,aAAcO,EAAA,EAAAA,MAOtB,GALIC,EAAgBC,wBAA0BD,EAAgBC,yBAA2B,GACvFD,EAAgBC,uBAAuBb,UAEzCY,EAAgBC,uBAAyB,OAEpBzL,IAAjBgL,EAA4B,CAC9B,IAAMU,EAAkB,EAAKZ,oBAC7B,GAAIY,KC5KJ,SAAgCJ,GACpC,OAAOA,EAAQK,YAAcL,EAAQM,YAsB9BC,CADmBP,EDsJcI,KCjKpC,SAA8BJ,GAClC,OAAOA,EAAQQ,aAAeR,EAAQS,aAWGC,CAAoBV,IDsJvD,OAIJ,IAAID,EAAGpD,SAAU,OAAAgE,EAAA,GAAsBZ,EAAGpD,OAAuB,EAAK6C,qBAQtE,GAHA,EAAKoB,qBACL,EAAKC,kBAEDZ,IAAUtE,EAAamF,KAAM,CAC/B,EAAKC,SAAS,CAAEC,2BAA2B,IAC3C,IAAMC,EAAY,EAAKC,cAAcjB,GAErC,EAAKkB,aAAe,EAAKC,OAAOC,YAAW,WACzC,EAAKhC,gBAAe,KACnB4B,QAEH,EAAK5B,gBAAe,IAKhB,EAAAiC,qBAAuB,SAACvB,GACtB,IAAAwB,EAAA,QAAAA,WAER,EAAKX,qBACL,EAAKC,kBAEDU,EACF,EAAKC,gBAAkB,EAAKJ,OAAOC,YAAW,WAC5C,EAAKhC,gBAAe,KACnBkC,GAEH,EAAKlC,gBAAe,GAGlBa,EAAgBC,yBAA2B,IAC7CD,EAAgBC,4BAAyBzL,IAIrC,EAAA+M,kBAAoB,SAAC1B,IACtBA,EAAG2B,QAAUC,EAAA,EAASC,QAAU7B,EAAG8B,UAAY,EAAKpM,MAAMqM,mBAC7D,EAAKvC,eACLQ,EAAGgC,oBAIC,EAAAnB,mBAAqB,WAC3B,EAAKQ,OAAOY,aAAa,EAAKR,kBAGxB,EAAAX,gBAAkB,WACxB,EAAKO,OAAOY,aAAa,EAAKb,eAIxB,EAAA5B,aAAe,WACrB,EAAKsB,kBACL,EAAKD,qBACL,EAAKvB,gBAAe,IAGd,EAAAA,eAAiB,SAACyC,GACpB,EAAKrM,MAAMqM,mBAAqBA,GAClC,EAAKf,SACH,CAAEC,2BAA2B,EAAOc,iBAAgB,IACpD,WAAM,SAAK5P,MAAM+P,iBAAmB,EAAK/P,MAAM+P,gBAAzC,OAKJ,EAAAf,cAAgB,SAACjB,GACvB,OAAQA,GACN,KAAKtE,EAAa/C,OAChB,OAAO,IACT,KAAK+C,EAAauG,KAChB,OAAO,IACT,QACE,OAAO,IAnNX,OAAAC,EAAA,GAAuB,GAEvB,EAAK1M,MAAQ,CACXuL,2BAA2B,EAC3Bc,kBAAkB,GAGpB,EAAKV,OAAS,IAAIgB,EAAA,EAAM,G,EA+M5B,OA1OqC,iBA+B5B,YAAAxO,OAAP,WACQ,iBACJsI,EAAA,EAAAA,aACA7J,EAAA,EAAAA,SACA4J,EAAA,EAAAA,QACAE,EAAA,EAAAA,gBACAC,EAAA,EAAAA,sBACA,IAAAiG,cACAhG,EAAA,EAAAA,GACA,IAAAiG,0BAAA,IAAqB,GAArB,EACAC,EAAA,EAAAA,aACAxM,EAAA,EAAAA,OACAhD,EAAA,EAAAA,MAGFxB,KAAKwK,YAAc,EAAchG,EAAS,CACxChD,MAAOA,EACPK,UAAS,IAGL,iBAAE4N,EAAA,EAAAA,0BAA2Bc,EAAA,EAAAA,iBAC7BU,EAAYnG,GAAM9K,KAAK2N,kBACvBuD,KACJxG,GACCsG,GAAgBA,EAAajG,iBAAmBiG,EAAajG,mBAE1DoG,EAAcZ,GAAoBW,EAClCE,EAAkBL,GAAsBR,GAAoBW,EAAmBD,OAAY9N,EAEjG,OACE,mCACEtB,UAAW7B,KAAKwK,YAAYhE,KAC5B6K,IAAKrR,KAAK0N,cACN,CAAE4D,eAAgBtR,KAAKuO,sBACvB,CAAEgD,cAAevR,KAAKgO,cAAc,CACxC1C,aAActL,KAAKuO,qBACnBhD,aAAcvL,KAAK+P,qBACnByB,UAAWxR,KAAKkQ,kBAAiB,mBACfkB,IAEjBtQ,EACAqQ,GACC,gBAACrF,EAAO,aACNhB,GAAImG,EACJvG,QAASA,EACTM,cAAehL,KAAKiO,oBACpBrD,gBAAiBA,EACjBC,sBAAuBA,EACvBF,aAAc,YAAO,GAAIA,EAAc,CACrC8G,UAAWzR,KAAKgO,aAChB1C,aAActL,KAAKuO,qBACnBhD,aAAcvL,KAAK+P,uBAErBzE,aAActL,KAAKuO,qBACnBhD,aAAcvL,KAAK+P,sBACf,YAAe/P,KAAKW,MAAO,KAC3BqQ,IAGPvB,GACC,uBAAK3E,GAAImG,EAAWS,MAAO,KACxBhH,KAOJ,YAAAiH,qBAAP,WACMhD,EAAgBC,wBAA0BD,EAAgBC,yBAA2B5O,OACvF2O,EAAgBC,4BAAyBzL,GAG3CnD,KAAK6P,OAAO+B,WAvGA,EAAApG,aAAe,CAC3BkD,MAAOtE,EAAa/C,QAwOxB,EA1OA,CAAqC,aE5B/Bd,EAAmB,CACvBC,KAAM,iBACNqL,gBAAiB,mCCCNC,EAA0D,OAAA/F,EAAA,GAIrE,GDFuB,SAACpL,GAChB,IAAAkB,EAAA,EAAAA,UAAWL,EAAA,EAAAA,MAGnB,MAAO,CACLgF,KAAM,CAHW,YAAoBD,EAAkB/E,GAI1CgF,KACX,CACEkD,QAAS,UAEX7H,WCRwBsB,EAAW,CACvCsK,MAAO",
  "file": "static/js/1.ebe6cd18.chunk.js",
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n",
    "import { __assign } from 'tslib';\nexport const assign = __assign;\n",
    "import * as React from 'react';\nimport { mergeCss } from '@uifabric/merge-styles';\nimport { IStyle, ITheme } from '@uifabric/styling';\nimport { getRTL, memoizeFunction } from '@uifabric/utilities';\nimport { assign } from './utilities';\nimport { IFactoryOptions } from './IComponent';\nimport {\n  ISlottableReactType,\n  ISlot,\n  ISlots,\n  ISlotDefinition,\n  ISlotFactory,\n  ISlotProp,\n  ISlottableProps,\n  ISlotOptions,\n  IDefaultSlotProps,\n  IProcessedSlotProps,\n  ValidProps,\n  ValidShorthand,\n} from './ISlots';\n\n/**\n * This function is required for any module that uses slots.\n *\n * This function is a slot resolver that automatically evaluates slot functions to generate React elements.\n * A byproduct of this resolver is that it removes slots from the React hierarchy by bypassing React.createElement.\n *\n * To use this function on a per-file basis, use the jsx directive targeting withSlots.\n * This directive must be the FIRST LINE in the file to work correctly.\n * Usage of this pragma also requires withSlots import statement.\n *\n * See React.createElement\n */\n// Can't use typeof on React.createElement since it's overloaded. Approximate createElement's signature for now\n// and widen as needed.\nexport function withSlots<P>(\n  type: ISlot<P> | React.FunctionComponent<P> | string,\n  props?: (React.Attributes & P) | null,\n  ...children: React.ReactNode[]\n): ReturnType<React.FunctionComponent<P>> {\n  const slotType = type as ISlot<P>;\n  if (slotType.isSlot) {\n    // Since we are bypassing createElement, use React.Children.toArray to make sure children are\n    // properly assigned keys.\n    // TODO: should this be mutating? does React mutate children subprop with createElement?\n    // TODO: will toArray clobber existing keys?\n    // TODO: React generates warnings because it doesn't detect hidden member _store that is set in createElement.\n    //        Even children passed to createElement without keys don't generate this warning.\n    //        Is there a better way to prevent slots from appearing in hierarchy? toArray doesn't address root issue.\n    children = React.Children.toArray(children);\n\n    // TODO: There is something weird going on here with children embedded in props vs. rest args.\n    // Comment out these lines to see. Make sure this function is doing the right things.\n    if (children.length === 0) {\n      return slotType(props);\n    }\n\n    return slotType({ ...(props as any), children });\n  } else {\n    // TODO: Are there some cases where children should NOT be spread? Also, spreading reraises perf question.\n    //        Children had to be spread to avoid breaking KeytipData in Toggle.view:\n    //        react-dom.development.js:18931 Uncaught TypeError: children is not a function\n    //        Without spread, function child is a child array of one element\n    // TODO: is there a reason this can't be:\n    // return React.createElement.apply(this, arguments);\n    return React.createElement(type, props, ...children);\n  }\n}\n\n/**\n * This function creates factories that render ouput depending on the user ISlotProp props passed in.\n * @param DefaultComponent - Base component to render when not overridden by user props.\n * @param options - Factory options, including defaultProp value for shorthand prop mapping.\n * @returns ISlotFactory function used for rendering slots.\n */\nexport function createFactory<TProps extends ValidProps, TShorthandProp extends ValidShorthand = never>(\n  DefaultComponent: React.ComponentType<TProps>,\n  options: IFactoryOptions<TProps> = {},\n): ISlotFactory<TProps, TShorthandProp> {\n  const { defaultProp = 'children' } = options;\n\n  const result: ISlotFactory<TProps, TShorthandProp> = (\n    componentProps,\n    userProps,\n    userSlotOptions,\n    defaultStyles,\n    theme,\n  ) => {\n    // If they passed in raw JSX, just return that.\n    if (React.isValidElement(userProps)) {\n      return userProps;\n    }\n\n    const flattenedUserProps: TProps | undefined = _translateShorthand(defaultProp as string, userProps);\n    const finalProps = _constructFinalProps(defaultStyles, theme, componentProps, flattenedUserProps);\n\n    if (userSlotOptions) {\n      if (userSlotOptions.component) {\n        // TODO: Remove cast if possible. This cast is needed because TS errors on the intrinsic portion of ReactType.\n        // return <userSlotOptions.component {...finalProps} />;\n        const UserComponent = userSlotOptions.component as React.ComponentType<TProps>;\n        return <UserComponent {...finalProps} />;\n      }\n\n      if (userSlotOptions.render) {\n        return userSlotOptions.render(finalProps, DefaultComponent);\n      }\n    }\n\n    return <DefaultComponent {...finalProps} />;\n  };\n\n  return result;\n}\n\n/**\n * Default factory for components without explicit factories.\n */\nconst defaultFactory = memoizeFunction(type => createFactory(type));\n\n/**\n * This function generates slots that can be used in JSX given a definition of slots and their corresponding types.\n * @param userProps - Props as pass to component.\n * @param slots - Slot definition object defining the default slot component for each slot.\n * @returns A set of created slots that components can render in JSX.\n */\nexport function getSlots<TComponentProps extends ISlottableProps<TComponentSlots>, TComponentSlots>(\n  userProps: TComponentProps,\n  slots: ISlotDefinition<Required<TComponentSlots>>,\n): ISlots<Required<TComponentSlots>> {\n  const result: ISlots<Required<TComponentSlots>> = {} as ISlots<Required<TComponentSlots>>;\n\n  // userProps already has default props mixed in by createComponent. Recast here to gain typing for this function.\n  const mixedProps = userProps as TComponentProps & IDefaultSlotProps<TComponentSlots>;\n\n  for (const name in slots) {\n    if (slots.hasOwnProperty(name)) {\n      // This closure method requires the use of withSlots to prevent unnecessary rerenders. This is because React\n      // detects each closure as a different component (since it is a new instance) from the previous one and then\n      // forces a rerender of the entire slot subtree. For now, the only way to avoid this is to use withSlots, which\n      // bypasses the call to React.createElement.\n      const slot: ISlots<Required<TComponentSlots>>[keyof TComponentSlots] = (componentProps, ...args: any[]) => {\n        if (args.length > 0) {\n          // If React.createElement is being incorrectly used with slots, there will be additional arguments.\n          // We can detect these additional arguments and error on their presence.\n          throw new Error('Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.');\n        }\n        // TODO: having TS infer types here seems to cause infinite loop.\n        //   use explicit types or casting to preserve typing if possible.\n        // TODO: this should be a lookup on TProps property instead of being TProps directly, which is probably\n        //   causing the infinite loop\n        return _renderSlot<any, any, any>(\n          slots[name],\n          // TODO: this cast to any is hiding a relationship issue between the first two args\n          componentProps as any,\n          mixedProps[name],\n          mixedProps.slots && mixedProps.slots[name],\n          // _defaultStyles should always be present, but a check for existence is added to make view tests\n          // easier to use.\n          mixedProps._defaultStyles && mixedProps._defaultStyles[name],\n          (mixedProps as any).theme,\n        );\n      };\n      slot.isSlot = true;\n      result[name] = slot;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Helper function that translates shorthand as needed.\n * @param defaultProp\n * @param slotProps\n */\nfunction _translateShorthand<TProps extends ValidProps, TShorthandProp extends ValidShorthand>(\n  defaultProp: string,\n  slotProps: ISlotProp<TProps, TShorthandProp>,\n): TProps | undefined {\n  let transformedProps: TProps | undefined;\n\n  if (typeof slotProps === 'string' || typeof slotProps === 'number' || typeof slotProps === 'boolean') {\n    transformedProps = {\n      [defaultProp]: slotProps as any,\n    } as TProps;\n  } else {\n    transformedProps = slotProps as TProps;\n  }\n\n  return transformedProps;\n}\n\n/**\n * Helper function that constructs final styles and props given a series of props ordered by increasing priority.\n */\nfunction _constructFinalProps<TProps extends IProcessedSlotProps>(\n  defaultStyles: IStyle,\n  theme?: ITheme,\n  ...allProps: (TProps | undefined)[]\n): TProps {\n  const finalProps: TProps = {} as any;\n  const classNames: (string | undefined)[] = [];\n\n  for (const props of allProps) {\n    classNames.push(props && props.className);\n    assign(finalProps, props);\n  }\n\n  finalProps.className = mergeCss([defaultStyles, classNames], { rtl: getRTL(theme) });\n\n  return finalProps;\n}\n\n/**\n * Render a slot given component and user props. Uses component factory if available, otherwise falls back\n * to default factory.\n * @param ComponentType Factory component type.\n * @param componentProps The properties passed into slot from within the component.\n * @param userProps The user properties passed in from outside of the component.\n */\nfunction _renderSlot<\n  TSlotComponent extends ISlottableReactType<TSlotProps, TSlotShorthand>,\n  TSlotProps extends ValidProps,\n  TSlotShorthand extends ValidShorthand\n>(\n  ComponentType: TSlotComponent,\n  componentProps: TSlotProps,\n  userProps: ISlotProp<TSlotProps, TSlotShorthand>,\n  slotOptions: ISlotOptions<TSlotProps> | undefined,\n  defaultStyles: IStyle,\n  theme?: ITheme,\n): ReturnType<React.FunctionComponent> {\n  if (ComponentType.create !== undefined) {\n    return ComponentType.create(componentProps, userProps, slotOptions, defaultStyles);\n  } else {\n    // TODO: need to resolve typing / generic issues passing through memoizeFunction. for now, cast to 'unknown'\n    return ((defaultFactory(ComponentType) as unknown) as ISlotFactory<TSlotProps, TSlotShorthand>)(\n      componentProps,\n      userProps,\n      slotOptions,\n      defaultStyles,\n      theme,\n    );\n  }\n}\n",
    "import * as React from 'react';\nimport { concatStyleSets, IStyleSet, ITheme } from '@uifabric/styling';\nimport { Customizations, CustomizerContext, ICustomizerContext } from '@uifabric/utilities';\nimport { createFactory } from './slots';\nimport { assign } from './utilities';\n\nimport {\n  IComponentOptions,\n  ICustomizationProps,\n  IStyleableComponentProps,\n  IStylesFunctionOrObject,\n  IToken,\n  ITokenFunction,\n  IViewComponent,\n} from './IComponent';\nimport { IDefaultSlotProps, ISlotCreator, ValidProps } from './ISlots';\n\n/**\n * Assembles a higher order component based on the following: styles, theme, view, and state.\n * Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness\n * in how components use and apply styling and theming.\n *\n * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.\n * State component, if provided, is passed in props for processing. Props from state / user are automatically processed\n * and styled before finally being passed to view.\n *\n * State components should contain all stateful behavior and should not generate any JSX, but rather simply call\n * the view prop.\n *\n * Views should simply be stateless pure functions that receive all props needed for rendering their output.\n *\n * State component is optional. If state is not provided, created component is essentially a functional\n * stateless component.\n *\n * @param options - component Component options. See IComponentOptions for more detail.\n */\nexport function createComponent<\n  TComponentProps extends ValidProps,\n  TTokens,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TViewProps extends TComponentProps = TComponentProps,\n  TStatics = {}\n>(\n  view: IViewComponent<TViewProps>,\n  options: IComponentOptions<TComponentProps, TTokens, TStyleSet, TViewProps, TStatics> = {},\n): React.FunctionComponent<TComponentProps> & TStatics {\n  const { factoryOptions = {} } = options;\n  const { defaultProp } = factoryOptions;\n\n  const ResultComponent: React.FunctionComponent<TComponentProps> = (\n    componentProps: TComponentProps & IStyleableComponentProps<TViewProps, TTokens, TStyleSet>,\n  ) => {\n    const settings: ICustomizationProps<TViewProps, TTokens, TStyleSet> = _getCustomizations(\n      options.displayName,\n      React.useContext(CustomizerContext),\n      options.fields,\n    );\n\n    const stateReducer = options.state;\n\n    if (stateReducer) {\n      // Don't assume state will return all props, so spread useState result over component props.\n      componentProps = {\n        ...componentProps,\n        ...stateReducer(componentProps),\n      };\n    }\n\n    const theme = componentProps.theme || settings.theme;\n\n    const tokens = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);\n    const styles = _resolveStyles(\n      componentProps,\n      theme,\n      tokens,\n      options.styles,\n      settings.styles,\n      componentProps.styles,\n    );\n\n    const viewProps = {\n      ...componentProps,\n      styles,\n      tokens,\n      _defaultStyles: styles,\n      theme,\n    } as TViewProps & IDefaultSlotProps<any>;\n\n    return view(viewProps);\n  };\n\n  ResultComponent.displayName = options.displayName || view.name;\n\n  // If a shorthand prop is defined, create a factory for the component.\n  // TODO: This shouldn't be a concern of createComponent.. factoryOptions should just be forwarded.\n  //       Need to weigh creating default factories on component creation vs. memoizing them on use in slots.tsx.\n  if (defaultProp) {\n    (ResultComponent as ISlotCreator<TComponentProps, any>).create = createFactory(ResultComponent, { defaultProp });\n  }\n\n  assign(ResultComponent, options.statics);\n\n  // Later versions of TypeSript should allow us to merge objects in a type safe way and avoid this cast.\n  return ResultComponent as React.FunctionComponent<TComponentProps> & TStatics;\n}\n\n/**\n * Resolve all styles functions with both props and tokens and flatten results along with all styles objects.\n */\nfunction _resolveStyles<TProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  props: TProps,\n  theme: ITheme,\n  tokens: TTokens,\n  ...allStyles: (IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined)[]\n): ReturnType<typeof concatStyleSets> {\n  return concatStyleSets(\n    ...allStyles.map((styles: IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined) =>\n      typeof styles === 'function' ? styles(props, theme, tokens) : styles,\n    ),\n  );\n}\n\n/**\n * Resolve all tokens functions with props flatten results along with all tokens objects.\n */\nfunction _resolveTokens<TViewProps, TTokens>(\n  props: TViewProps,\n  theme: ITheme,\n  ...allTokens: (IToken<TViewProps, TTokens> | false | null | undefined)[]\n): TTokens {\n  const tokens = {};\n\n  for (let currentTokens of allTokens) {\n    if (currentTokens) {\n      // TODO: why is this cast needed? TS seems to think there is a (TToken | Function) union from somewhere.\n      currentTokens =\n        typeof currentTokens === 'function'\n          ? (currentTokens as ITokenFunction<TViewProps, TTokens>)(props, theme)\n          : currentTokens;\n\n      if (Array.isArray(currentTokens)) {\n        currentTokens = _resolveTokens(props, theme, ...currentTokens);\n      }\n\n      assign(tokens, currentTokens);\n    }\n  }\n\n  return tokens as TTokens;\n}\n\n/**\n * Helper function for calling Customizations.getSettings falling back to default fields.\n *\n * @param displayName Displayable name for component.\n * @param context React context passed to component containing contextual settings.\n * @param fields Optional list of properties to grab from global store and context.\n */\nfunction _getCustomizations<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  displayName: string | undefined,\n  context: ICustomizerContext,\n  fields?: string[],\n): ICustomizationProps<TViewProps, TTokens, TStyleSet> {\n  // TODO: do we want field props? should fields be part of IComponent and used here?\n  // TODO: should we centrally define DefaultFields? (not exported from styling)\n  // TODO: tie this array to ICustomizationProps, such that each array element is keyof ICustomizationProps\n  const DefaultFields = ['theme', 'styles', 'tokens'];\n  return Customizations.getSettings(fields || DefaultFields, displayName, context.customizations);\n}\n",
    "/**\n * Functions used by Stack components to simplify style-related computations\n */\n\nimport { ITheme } from '../../Styling';\nimport { IStackProps } from './Stack.types';\n\n// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.\nconst _getThemedSpacing = (space: string, theme: ITheme): string => {\n  if (theme.spacing.hasOwnProperty(space)) {\n    return theme.spacing[space as keyof typeof theme.spacing];\n  }\n  return space;\n};\n\n// Helper function that takes a gap as a string and converts it into a { value, unit } representation.\nconst _getValueUnitGap = (gap: string): { value: number; unit: string } => {\n  const numericalPart = parseFloat(gap);\n  const numericalValue = isNaN(numericalPart) ? 0 : numericalPart;\n  const numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();\n\n  const unitPart = gap.substring(numericalString.toString().length);\n\n  return {\n    value: numericalValue,\n    unit: unitPart || 'px',\n  };\n};\n\n/**\n * Takes in a gap size in either a CSS-style format (e.g. 10 or \"10px\")\n *  or a key of a themed spacing value (e.g. \"s1\").\n * Returns the separate numerical value of the padding (e.g. 10)\n *  and the CSS unit (e.g. \"px\").\n */\nexport const parseGap = (\n  gap: IStackProps['gap'],\n  theme: ITheme,\n): { rowGap: { value: number; unit: string }; columnGap: { value: number; unit: string } } => {\n  if (gap === undefined || gap === '') {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  if (typeof gap === 'number') {\n    return {\n      rowGap: {\n        value: gap,\n        unit: 'px',\n      },\n      columnGap: {\n        value: gap,\n        unit: 'px',\n      },\n    };\n  }\n\n  const splitGap = gap.split(' ');\n\n  // If the array has more than two values, then return 0px.\n  if (splitGap.length > 2) {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  // If the array has two values, then parse each one.\n  if (splitGap.length === 2) {\n    return {\n      rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),\n      columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme)),\n    };\n  }\n\n  // Else, parse the numerical value and pass it as both the vertical and horizontal gap.\n  const calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));\n\n  return {\n    rowGap: calculatedGap,\n    columnGap: calculatedGap,\n  };\n};\n\n/**\n * Takes in a padding in a CSS-style format (e.g. 10, \"10px\", \"10px 10px\", etc.)\n *  where the separate padding values can also be the key of a themed spacing value\n *  (e.g. \"s1 m\", \"10px l1 20px l2\", etc.).\n * Returns a CSS-style padding.\n */\nexport const parsePadding = (padding: number | string | undefined, theme: ITheme): number | string | undefined => {\n  if (padding === undefined || typeof padding === 'number' || padding === '') {\n    return padding;\n  }\n\n  const paddingValues = padding.split(' ');\n  if (paddingValues.length < 2) {\n    return _getThemedSpacing(padding, theme);\n  }\n\n  return paddingValues.reduce((padding1: string, padding2: string) => {\n    return _getThemedSpacing(padding1, theme) + ' ' + _getThemedSpacing(padding2, theme);\n  });\n};\n",
    "import { IStackComponent, IStackStyles, IStackStylesReturnType } from './Stack.types';\nimport { parseGap, parsePadding } from './StackUtils';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst nameMap: { [key: string]: string } = {\n  start: 'flex-start',\n  end: 'flex-end',\n};\n\nconst GlobalClassNames = {\n  root: 'ms-Stack',\n  inner: 'ms-Stack-inner',\n};\n\nexport const styles: IStackComponent['styles'] = (props, theme, tokens): IStackStylesReturnType => {\n  const {\n    verticalFill,\n    horizontal,\n    reversed,\n    grow,\n    wrap,\n    horizontalAlign,\n    verticalAlign,\n    disableShrink,\n    className,\n  } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  /* eslint-disable deprecation/deprecation */\n  const childrenGap = tokens && tokens.childrenGap ? tokens.childrenGap : props.gap;\n  const maxHeight = tokens && tokens.maxHeight ? tokens.maxHeight : props.maxHeight;\n  const maxWidth = tokens && tokens.maxWidth ? tokens.maxWidth : props.maxWidth;\n  const padding = tokens && tokens.padding ? tokens.padding : props.padding;\n  /* eslint-enable deprecation/deprecation */\n\n  const { rowGap, columnGap } = parseGap(childrenGap, theme);\n\n  const horizontalMargin = `${-0.5 * columnGap.value}${columnGap.unit}`;\n  const verticalMargin = `${-0.5 * rowGap.value}${rowGap.unit}`;\n\n  // styles to be applied to all direct children regardless of wrap or direction\n  const childStyles = {\n    textOverflow: 'ellipsis',\n  };\n\n  // selectors to be applied regardless of wrap or direction\n  const commonSelectors = {\n    // flexShrink styles are applied by the StackItem\n    '> *:not(.ms-StackItem)': {\n      flexShrink: disableShrink ? 0 : 1,\n    },\n  };\n\n  if (wrap) {\n    return {\n      root: [\n        classNames.root,\n        {\n          flexWrap: 'wrap',\n          maxWidth,\n          maxHeight,\n          width: 'auto',\n          overflow: 'visible',\n          height: '100%',\n        },\n        horizontalAlign && {\n          [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n        },\n        verticalAlign && {\n          [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n        },\n        className,\n        {\n          // not allowed to be overridden by className\n          // since this is necessary in order to prevent collapsing margins\n          display: 'flex',\n        },\n        horizontal && {\n          height: verticalFill ? '100%' : 'auto',\n        },\n      ],\n\n      inner: [\n        classNames.inner,\n        {\n          display: 'flex',\n          flexWrap: 'wrap',\n          marginLeft: horizontalMargin,\n          marginRight: horizontalMargin,\n          marginTop: verticalMargin,\n          marginBottom: verticalMargin,\n          overflow: 'visible',\n          boxSizing: 'border-box',\n          padding: parsePadding(padding, theme),\n          // avoid unnecessary calc() calls if horizontal gap is 0\n          width: columnGap.value === 0 ? '100%' : `calc(100% + ${columnGap.value}${columnGap.unit})`,\n          maxWidth: '100vw',\n\n          selectors: {\n            '> *': {\n              margin: `${0.5 * rowGap.value}${rowGap.unit} ${0.5 * columnGap.value}${columnGap.unit}`,\n\n              ...childStyles,\n            },\n            ...commonSelectors,\n          },\n        },\n        horizontalAlign && {\n          [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n        },\n        verticalAlign && {\n          [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n        },\n        horizontal && {\n          flexDirection: reversed ? 'row-reverse' : 'row',\n\n          // avoid unnecessary calc() calls if vertical gap is 0\n          height: rowGap.value === 0 ? '100%' : `calc(100% + ${rowGap.value}${rowGap.unit})`,\n\n          selectors: {\n            '> *': {\n              maxWidth: columnGap.value === 0 ? '100%' : `calc(100% - ${columnGap.value}${columnGap.unit})`,\n            },\n          },\n        },\n        !horizontal && {\n          flexDirection: reversed ? 'column-reverse' : 'column',\n          height: `calc(100% + ${rowGap.value}${rowGap.unit})`,\n\n          selectors: {\n            '> *': {\n              maxHeight: rowGap.value === 0 ? '100%' : `calc(100% - ${rowGap.value}${rowGap.unit})`,\n            },\n          },\n        },\n      ],\n    } as IStackStyles;\n  }\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'flex',\n        flexDirection: horizontal ? (reversed ? 'row-reverse' : 'row') : reversed ? 'column-reverse' : 'column',\n        flexWrap: 'nowrap',\n        width: 'auto',\n        height: verticalFill ? '100%' : 'auto',\n        maxWidth,\n        maxHeight,\n        padding: parsePadding(padding, theme),\n        boxSizing: 'border-box',\n\n        selectors: {\n          '> *': childStyles,\n\n          // apply gap margin to every direct child except the first direct child if the direction is not reversed,\n          // and the last direct one if it is\n          [reversed ? '> *:not(:last-child)' : '> *:not(:first-child)']: [\n            horizontal && {\n              marginLeft: `${columnGap.value}${columnGap.unit}`,\n            },\n            !horizontal && {\n              marginTop: `${rowGap.value}${rowGap.unit}`,\n            },\n          ],\n\n          ...commonSelectors,\n        },\n      },\n      grow && {\n        flexGrow: grow === true ? 1 : grow,\n      },\n      horizontalAlign && {\n        [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n      },\n      verticalAlign && {\n        [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n      },\n      className,\n    ],\n    // TODO: this cast may be hiding some potential issues with styling and name\n    //        lookups and should be removed\n  } as IStackStyles;\n};\n",
    "import { getGlobalClassNames } from '../../../Styling';\nimport { IStackItemComponent, IStackItemStyles, IStackItemStylesReturnType } from './StackItem.types';\n\nconst GlobalClassNames = {\n  root: 'ms-StackItem',\n};\n\nconst alignMap: { [key: string]: string } = {\n  start: 'flex-start',\n  end: 'flex-end',\n};\n\nexport const StackItemStyles: IStackItemComponent['styles'] = (props, theme, tokens): IStackItemStylesReturnType => {\n  const { grow, shrink, disableShrink, align, verticalFill, order, className } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      theme.fonts.medium,\n      classNames.root,\n      {\n        margin: tokens.margin,\n        padding: tokens.padding,\n        height: verticalFill ? '100%' : 'auto',\n        width: 'auto',\n      },\n      grow && { flexGrow: grow === true ? 1 : grow },\n      (disableShrink || (!grow && !shrink)) && {\n        flexShrink: 0,\n      },\n      shrink &&\n        !disableShrink && {\n          flexShrink: 1,\n        },\n      align && {\n        alignSelf: alignMap[align] || align,\n      },\n      order && {\n        order: order,\n      },\n      className,\n    ],\n    // TODO: this cast may be hiding some potential issues with styling and name\n    //        lookups and should be removed\n  } as IStackItemStyles;\n};\n",
    "/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '../../../Foundation';\nimport { getNativeProps, htmlElementProperties } from '../../../Utilities';\nimport { IStackItemComponent, IStackItemProps, IStackItemSlots } from './StackItem.types';\nimport { StackItemStyles as styles } from './StackItem.styles';\n\nconst StackItemView: IStackItemComponent['view'] = props => {\n  const { children } = props;\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, htmlElementProperties);\n  if (React.Children.count(children) < 1) {\n    return null;\n  }\n\n  const Slots = getSlots<IStackItemProps, IStackItemSlots>(props, {\n    root: 'div',\n  });\n\n  return <Slots.root {...nativeProps}>{children}</Slots.root>;\n};\n\nexport const StackItem: React.FunctionComponent<IStackItemProps> = createComponent(StackItemView, {\n  displayName: 'StackItem',\n  styles,\n});\n\nexport default StackItem;\n",
    "/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles } from './Stack.styles';\nimport { IStackComponent, IStackProps, IStackSlots } from './Stack.types';\nimport { StackItem } from './StackItem/StackItem';\nimport { IStackItemProps } from './StackItem/StackItem.types';\n\nconst StackView: IStackComponent['view'] = props => {\n  const { as: RootType = 'div', disableShrink, wrap, ...rest } = props;\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding',\n  });\n\n  const stackChildren: (React.ReactChild | null)[] | null | undefined = React.Children.map(\n    props.children,\n    (child: React.ReactElement<IStackItemProps>, index: number) => {\n      if (!child) {\n        return null;\n      }\n\n      if (_isStackItem(child)) {\n        const defaultItemProps: IStackItemProps = {\n          shrink: !disableShrink,\n        };\n\n        return React.cloneElement(child, {\n          ...defaultItemProps,\n          ...child.props,\n        });\n      }\n\n      return child;\n    },\n  );\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(rest, htmlElementProperties);\n\n  const Slots = getSlots<IStackProps, IStackSlots>(props, {\n    root: RootType,\n    inner: 'div',\n  });\n\n  if (wrap) {\n    return (\n      <Slots.root {...nativeProps}>\n        <Slots.inner>{stackChildren}</Slots.inner>\n      </Slots.root>\n    );\n  }\n\n  return <Slots.root {...nativeProps}>{stackChildren}</Slots.root>;\n};\n\nfunction _isStackItem(item: React.ReactNode): item is typeof StackItem {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return (\n    !!item &&\n    typeof item === 'object' &&\n    !!(item as React.ReactElement).type &&\n    // StackItem is generated by createComponent, so we need to check its displayName instead of name\n    ((item as React.ReactElement).type as React.ComponentType).displayName === StackItem.displayName\n  );\n}\n\nconst StackStatics = {\n  Item: StackItem,\n};\n\nexport const Stack: React.FunctionComponent<IStackProps> & {\n  Item: React.FunctionComponent<IStackItemProps>;\n} = createComponent(StackView, {\n  displayName: 'Stack',\n  styles,\n  statics: StackStatics,\n});\n\nexport default Stack;\n",
    "import * as React from 'react';\nimport { TooltipHostBase } from './TooltipHost.base';\nimport { TooltipDelay, ITooltipProps } from './Tooltip.types';\nimport { ICalloutProps } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport { IStyle, ITheme } from '../../Styling';\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHost {\n  /**\n   * Shows the tooltip.\n   */\n  show: () => void;\n\n  /**\n   * Dismisses the tooltip.\n   */\n  dismiss: () => void;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport enum TooltipOverflowMode {\n  /** Only show tooltip if parent DOM element is overflowing */\n  Parent,\n\n  /**\n   * Only show tooltip if tooltip host's content is overflowing.\n   * Note that this does not check the children for overflow, only the TooltipHost root.\n   */\n  Self,\n}\n\n/**\n * TooltipHost props. Note that native props (such as `id`, `className`, and `aria-` props) are\n * passed through to the Tooltip itself, rather than being used on the host element.\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHostProps extends React.HTMLAttributes<HTMLDivElement | TooltipHostBase> {\n  /**\n   * Optional callback to access the ITooltipHost interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ITooltipHost>;\n\n  /**\n   * Additional properties to pass through for Callout.\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   * Number of milliseconds to delay closing the tooltip, so that the user has time to hover over\n   * the tooltip and interact with it. Hovering over the tooltip will count as hovering over the\n   * host, so that the tooltip will stay open if the user is actively interacting with it.\n   */\n  closeDelay?: number;\n\n  /**\n   * Content to display in the Tooltip.\n   */\n  content?: string | JSX.Element | JSX.Element[];\n\n  /**\n   * Length of delay before showing the tooltip on hover.\n   * @defaultvalue TooltipDelay.medium\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * How the tooltip should be anchored to its `targetElement`.\n   * @defaultvalue DirectionalHint.topCenter\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * How the element should be positioned in RTL layouts.\n   * If not specified, a mirror of `directionalHint` will be used.\n   */\n  directionalHintForRTL?: DirectionalHint;\n\n  /**\n   * Class name to apply to tooltip host.\n   */\n  hostClassName?: string;\n\n  /**\n   * Class name to apply to the *tooltip itself*, not the host.\n   * To apply a class to the host, use `hostClassName` or `styles.root`.\n   */\n  className?: string;\n\n  /**\n   * If this is unset (the default), the tooltip is always shown even if there's no overflow.\n   *\n   * If set, only show the tooltip if the specified element (`Self` or `Parent`) has overflow.\n   * When set to `Parent`, the parent element is also used as the tooltip's target element.\n   *\n   * Note that even with `Self` mode, the TooltipHost *does not* check whether any children have overflow.\n   */\n  overflowMode?: TooltipOverflowMode;\n\n  /**\n   * Whether or not to mark the TooltipHost root element as described by the tooltip.\n   * If not specified, the caller should pass an `id` to the TooltipHost (to be passed through to\n   * the Tooltip) and mark the appropriate element as `aria-describedby` the `id`.\n   * @defaultvalue true\n   */\n  setAriaDescribedBy?: boolean;\n\n  /**\n   * Additional properties to pass through for Tooltip.\n   */\n  tooltipProps?: ITooltipProps;\n\n  /**\n   * Optional ID to pass through to the tooltip (not used on the host itself).\n   * Auto-generated if not provided.\n   */\n  id?: string;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ITooltipHostStyleProps, ITooltipHostStyles>;\n\n  /**\n   * Theme provided by higher-order component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Notifies when tooltip becomes visible or hidden, whatever the trigger was.\n   */\n  onTooltipToggle?(isTooltipVisible: boolean): void;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHostStyleProps {\n  theme: ITheme;\n  className?: string;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHostStyles {\n  /**\n   * Style for the host wrapper element.\n   */\n  root: IStyle;\n}\n",
    "import * as React from 'react';\nimport { TooltipBase } from './Tooltip.base';\nimport { ICalloutProps } from '../../Callout';\nimport { IRenderFunction } from '../../Utilities';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { IStyle, ITheme } from '../../Styling';\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltip {}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipProps extends React.HTMLAttributes<HTMLDivElement | TooltipBase> {\n  /**\n   * Optional callback to access the ITooltip interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ITooltip>;\n\n  /**\n   * Properties to pass through for Callout.\n   * @defaultvalue `{ isBeakVisible: true, beakWidth: 16, gapSpace: 0, setInitialFocus: true, doNotLayer: false }`\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   * Content to be passed to the tooltip\n   */\n  content?: string | JSX.Element | JSX.Element[];\n\n  /**\n   * Render function to populate tooltip content.\n   */\n  onRenderContent?: IRenderFunction<ITooltipProps>;\n\n  /**\n   * Length of delay. Set to `TooltipDelay.zero` if you do not want a delay.\n   * @defaultvalue TooltipDelay.medium\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * Max width of tooltip\n   * @defaultvalue 364px\n   */\n  maxWidth?: string | null;\n\n  /**\n   * Element to anchor the Tooltip to.\n   */\n  targetElement?: HTMLElement;\n\n  /**\n   * How the tooltip should be anchored to its `targetElement`.\n   * @defaultvalue DirectionalHint.topCenter\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * How the element should be positioned in RTL layouts.\n   * If not specified, a mirror of `directionalHint` will be used instead\n   */\n  directionalHintForRTL?: DirectionalHint;\n\n  /**\n   * Theme provided by higher-order component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ITooltipStyleProps, ITooltipStyles>;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport enum TooltipDelay {\n  zero = 0,\n  /** 300 ms delay before showng the tooltip */\n  medium = 1,\n  /** 500 ms delay before showing the tooltip */\n  long = 2,\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipStyleProps {\n  theme: ITheme;\n\n  className?: string;\n\n  /**\n   * Delay before tooltip appears.\n   * @deprecated Delay logic moved to TooltipHost vs relying on animation delay.\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * Maximum width of tooltip.\n   */\n  maxWidth?: string;\n\n  /**\n   * The gap between the Callout and the target\n   * @defaultvalue 0\n   */\n  gapSpace?: number;\n\n  /**\n   * The width of the Callout's beak\n   * @defaultvalue 16\n   */\n  beakWidth?: number;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipStyles {\n  /**\n   * Style for the root element.\n   */\n  root: IStyle;\n\n  /**\n   * Style for the content element.\n   */\n  content: IStyle;\n\n  /**\n   * Style for the subtext element.\n   */\n  subText: IStyle;\n}\n",
    "import * as React from 'react';\nimport { classNamesFunction, divProperties, getNativeProps } from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { ITooltipProps, ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\n\nconst getClassNames = classNamesFunction<ITooltipStyleProps, ITooltipStyles>();\n\nexport class TooltipBase extends React.Component<ITooltipProps, any> {\n  // Specify default props values\n  public static defaultProps: Partial<ITooltipProps> = {\n    directionalHint: DirectionalHint.topCenter,\n    maxWidth: '364px',\n    calloutProps: {\n      isBeakVisible: true,\n      beakWidth: 16,\n      gapSpace: 0,\n      setInitialFocus: true,\n      doNotLayer: false,\n    },\n  };\n\n  private _classNames: IProcessedStyleSet<ITooltipStyles>;\n\n  public render(): JSX.Element {\n    const {\n      className,\n      calloutProps,\n      directionalHint,\n      directionalHintForRTL,\n      styles,\n      id,\n      maxWidth,\n      onRenderContent = this._onRenderContent,\n      targetElement,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: className || (calloutProps && calloutProps.className),\n      beakWidth: calloutProps && calloutProps.beakWidth,\n      gapSpace: calloutProps && calloutProps.gapSpace,\n      maxWidth: maxWidth!,\n    });\n\n    return (\n      <Callout\n        target={targetElement}\n        directionalHint={directionalHint}\n        directionalHintForRTL={directionalHintForRTL}\n        {...calloutProps}\n        {...getNativeProps(this.props, divProperties, ['id'])} // omitting ID due to it being used in the div below\n        className={this._classNames.root}\n      >\n        <div\n          className={this._classNames.content}\n          id={id}\n          role=\"tooltip\"\n          onMouseEnter={this.props.onMouseEnter}\n          onMouseLeave={this.props.onMouseLeave}\n        >\n          {onRenderContent(this.props, this._onRenderContent)}\n        </div>\n      </Callout>\n    );\n  }\n\n  private _onRenderContent = (props: ITooltipProps): JSX.Element => {\n    return <p className={this._classNames.subText}>{props.content}</p>;\n  };\n}\n",
    "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TooltipBase } from './Tooltip.base';\nimport { ITooltipProps, ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\nimport { getStyles } from './Tooltip.styles';\n\nexport const Tooltip: React.FunctionComponent<ITooltipProps> = styled<\n  ITooltipProps,\n  ITooltipStyleProps,\n  ITooltipStyles\n>(TooltipBase, getStyles, undefined, {\n  scope: 'Tooltip',\n});\n",
    "import { ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\nimport { AnimationClassNames } from '../../Styling';\n\nexport const getStyles = (props: ITooltipStyleProps): ITooltipStyles => {\n  const { className, beakWidth = 16, gapSpace = 0, maxWidth, theme } = props;\n  const { semanticColors, fonts, effects } = theme;\n\n  // The math here is done to account for the 45 degree rotation of the beak\n  // and sub-pixel rounding that differs across browsers, which is more noticeable when\n  // the device pixel ratio is larger\n  const tooltipGapSpace = -(Math.sqrt((beakWidth * beakWidth) / 2) + gapSpace) + 1 / window.devicePixelRatio;\n\n  return {\n    root: [\n      'ms-Tooltip',\n      theme.fonts.medium,\n      AnimationClassNames.fadeIn200,\n      {\n        background: semanticColors.menuBackground,\n        boxShadow: effects.elevation8,\n        padding: '8px',\n        maxWidth: maxWidth,\n        selectors: {\n          ':after': {\n            content: `''`,\n            position: 'absolute',\n            bottom: tooltipGapSpace,\n            left: tooltipGapSpace,\n            right: tooltipGapSpace,\n            top: tooltipGapSpace,\n            zIndex: 0,\n          },\n        },\n      },\n      className,\n    ],\n    content: [\n      'ms-Tooltip-content',\n      fonts.small,\n      {\n        position: 'relative',\n        zIndex: 1,\n        color: semanticColors.menuItemText,\n        wordWrap: 'break-word',\n        overflowWrap: 'break-word',\n        overflow: 'hidden',\n      },\n    ],\n    subText: [\n      'ms-Tooltip-subtext',\n      {\n        // Using inherit here to avoid unintentional global overrides of the <p> tag.\n        fontSize: 'inherit',\n        fontWeight: 'inherit',\n        color: 'inherit',\n        margin: 0,\n      },\n    ],\n  };\n};\n",
    "import * as React from 'react';\nimport { hiddenContentStyle } from '../../Styling';\nimport {\n  initializeComponentRef,\n  Async,\n  divProperties,\n  getNativeProps,\n  getId,\n  assign,\n  hasOverflow,\n  portalContainsElement,\n  classNamesFunction,\n  KeyCodes,\n} from '../../Utilities';\nimport {\n  ITooltipHostProps,\n  TooltipOverflowMode,\n  ITooltipHostStyles,\n  ITooltipHostStyleProps,\n  ITooltipHost,\n} from './TooltipHost.types';\nimport { Tooltip } from './Tooltip';\nimport { TooltipDelay } from './Tooltip.types';\n\nexport interface ITooltipHostState {\n  isAriaPlaceholderRendered: boolean;\n  isTooltipVisible: boolean;\n}\n\nconst getClassNames = classNamesFunction<ITooltipHostStyleProps, ITooltipHostStyles>();\n\nexport class TooltipHostBase extends React.Component<ITooltipHostProps, ITooltipHostState> implements ITooltipHost {\n  public static defaultProps = {\n    delay: TooltipDelay.medium,\n  };\n\n  private static _currentVisibleTooltip: ITooltipHost | undefined;\n\n  // The wrapping div that gets the hover events\n  private _tooltipHost = React.createRef<HTMLDivElement>();\n\n  private _classNames: { [key in keyof ITooltipHostStyles]: string };\n  private _async: Async;\n  private _dismissTimerId: number;\n  private _openTimerId: number;\n  private _defaultTooltipId = getId('tooltip');\n\n  // Constructor\n  constructor(props: ITooltipHostProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      isAriaPlaceholderRendered: false,\n      isTooltipVisible: false,\n    };\n\n    this._async = new Async(this);\n  }\n\n  // Render\n  public render(): JSX.Element {\n    const {\n      calloutProps,\n      children,\n      content,\n      directionalHint,\n      directionalHintForRTL,\n      hostClassName: className,\n      id,\n      setAriaDescribedBy = true,\n      tooltipProps,\n      styles,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n\n    const { isAriaPlaceholderRendered, isTooltipVisible } = this.state;\n    const tooltipId = id || this._defaultTooltipId;\n    const isContentPresent = !!(\n      content ||\n      (tooltipProps && tooltipProps.onRenderContent && tooltipProps.onRenderContent())\n    );\n    const showTooltip = isTooltipVisible && isContentPresent;\n    const ariaDescribedBy = setAriaDescribedBy && isTooltipVisible && isContentPresent ? tooltipId : undefined;\n\n    return (\n      <div\n        className={this._classNames.root}\n        ref={this._tooltipHost}\n        {...{ onFocusCapture: this._onTooltipMouseEnter }}\n        {...{ onBlurCapture: this._hideTooltip }}\n        onMouseEnter={this._onTooltipMouseEnter}\n        onMouseLeave={this._onTooltipMouseLeave}\n        onKeyDown={this._onTooltipKeyDown}\n        aria-describedby={ariaDescribedBy}\n      >\n        {children}\n        {showTooltip && (\n          <Tooltip\n            id={tooltipId}\n            content={content}\n            targetElement={this._getTargetElement()}\n            directionalHint={directionalHint}\n            directionalHintForRTL={directionalHintForRTL}\n            calloutProps={assign({}, calloutProps, {\n              onDismiss: this._hideTooltip,\n              onMouseEnter: this._onTooltipMouseEnter,\n              onMouseLeave: this._onTooltipMouseLeave,\n            })}\n            onMouseEnter={this._onTooltipMouseEnter}\n            onMouseLeave={this._onTooltipMouseLeave}\n            {...getNativeProps(this.props, divProperties)}\n            {...tooltipProps}\n          />\n        )}\n        {isAriaPlaceholderRendered && (\n          <div id={tooltipId} style={hiddenContentStyle as React.CSSProperties}>\n            {content}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  public componentWillUnmount(): void {\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n\n    this._async.dispose();\n  }\n\n  public show = (): void => {\n    this._toggleTooltip(true);\n  };\n\n  public dismiss = (): void => {\n    this._hideTooltip();\n  };\n\n  private _getTargetElement = (): HTMLElement | undefined => {\n    if (!this._tooltipHost.current) {\n      return undefined;\n    }\n\n    const { overflowMode } = this.props;\n\n    // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\n    // to the parent element, otherwise it might look off.\n    if (overflowMode !== undefined) {\n      switch (overflowMode) {\n        case TooltipOverflowMode.Parent:\n          return this._tooltipHost.current.parentElement!;\n\n        case TooltipOverflowMode.Self:\n          return this._tooltipHost.current;\n      }\n    }\n\n    return this._tooltipHost.current;\n  };\n\n  // Show Tooltip\n  private _onTooltipMouseEnter = (ev: any): void => {\n    const { overflowMode, delay } = this.props;\n\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip !== this) {\n      TooltipHostBase._currentVisibleTooltip.dismiss();\n    }\n    TooltipHostBase._currentVisibleTooltip = this;\n\n    if (overflowMode !== undefined) {\n      const overflowElement = this._getTargetElement();\n      if (overflowElement && !hasOverflow(overflowElement)) {\n        return;\n      }\n    }\n\n    if (ev.target && portalContainsElement(ev.target as HTMLElement, this._getTargetElement())) {\n      // Do not show tooltip when target is inside a portal relative to TooltipHost.\n      return;\n    }\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (delay !== TooltipDelay.zero) {\n      this.setState({ isAriaPlaceholderRendered: true });\n      const delayTime = this._getDelayTime(delay!); // non-null assertion because we set it in `defaultProps`\n\n      this._openTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(true);\n      }, delayTime);\n    } else {\n      this._toggleTooltip(true);\n    }\n  };\n\n  // Hide Tooltip\n  private _onTooltipMouseLeave = (ev: any): void => {\n    const { closeDelay } = this.props;\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (closeDelay) {\n      this._dismissTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(false);\n      }, closeDelay);\n    } else {\n      this._toggleTooltip(false);\n    }\n\n    if (TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n  };\n\n  private _onTooltipKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if ((ev.which === KeyCodes.escape || ev.ctrlKey) && this.state.isTooltipVisible) {\n      this._hideTooltip();\n      ev.stopPropagation();\n    }\n  };\n\n  private _clearDismissTimer = (): void => {\n    this._async.clearTimeout(this._dismissTimerId);\n  };\n\n  private _clearOpenTimer = (): void => {\n    this._async.clearTimeout(this._openTimerId);\n  };\n\n  // Hide Tooltip\n  private _hideTooltip = (): void => {\n    this._clearOpenTimer();\n    this._clearDismissTimer();\n    this._toggleTooltip(false);\n  };\n\n  private _toggleTooltip = (isTooltipVisible: boolean): void => {\n    if (this.state.isTooltipVisible !== isTooltipVisible) {\n      this.setState(\n        { isAriaPlaceholderRendered: false, isTooltipVisible },\n        () => this.props.onTooltipToggle && this.props.onTooltipToggle(isTooltipVisible),\n      );\n    }\n  };\n\n  private _getDelayTime = (delay: TooltipDelay): number => {\n    switch (delay) {\n      case TooltipDelay.medium:\n        return 300;\n      case TooltipDelay.long:\n        return 500;\n      default:\n        return 0;\n    }\n  };\n}\n",
    "/**\n * Detects whether an element's content has horizontal overflow\n *\n * @public\n * @param element - Element to check for overflow\n * @returns True if element's content overflows\n */\nexport function hasHorizontalOverflow(element: HTMLElement): boolean {\n  return element.clientWidth < element.scrollWidth;\n}\n\n/**\n * Detects whether an element's content has vertical overflow\n *\n * @public\n * @param element - Element to check for overflow\n * @returns True if element's content overflows\n */\nexport function hasVerticalOverflow(element: HTMLElement): boolean {\n  return element.clientHeight < element.scrollHeight;\n}\n\n/**\n * Detects whether an element's content has overflow in any direction\n *\n * @public\n * @param element - Element to check for overflow\n * @returns True if element's content overflows\n */\nexport function hasOverflow(element: HTMLElement): boolean {\n  return hasHorizontalOverflow(element) || hasVerticalOverflow(element);\n}\n",
    "import { ITooltipHostStyleProps, ITooltipHostStyles } from './TooltipHost.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-TooltipHost',\n  ariaPlaceholder: 'ms-TooltipHost-aria-placeholder',\n};\n\nexport const getStyles = (props: ITooltipHostStyleProps): ITooltipHostStyles => {\n  const { className, theme } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'inline',\n      },\n      className,\n    ],\n  };\n};\n",
    "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TooltipHostBase } from './TooltipHost.base';\nimport { ITooltipHostProps, ITooltipHostStyleProps, ITooltipHostStyles } from './TooltipHost.types';\nimport { getStyles } from './TooltipHost.styles';\n\nexport const TooltipHost: React.FunctionComponent<ITooltipHostProps> = styled<\n  ITooltipHostProps,\n  ITooltipHostStyleProps,\n  ITooltipHostStyles\n>(TooltipHostBase, getStyles, undefined, {\n  scope: 'TooltipHost',\n});\n"
  ],
  "sourceRoot": ""
}
